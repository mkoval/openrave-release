#define IKFAST_NAMESPACE ik_barrettwam
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 71 generated on 2014-04-13 19:10:58.360034
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==71);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((0.045)*x1);
x15=((1.0)*x5);
x16=((0.3)*x1);
x17=((1.0)*x11);
x18=((0.045)*x5);
x19=((1.0)*x1);
x20=((0.22)*x8);
x21=((1.0)*x12);
x22=((0.22)*x5);
x23=((1.0)*x6);
x24=((0.22)*x9);
x25=((0.22)*x6);
x26=(x0*x4);
x27=(x0*x2);
x28=(x2*x7);
x29=(x3*x4);
x30=(x0*x7);
x31=(x2*x3);
x32=(x3*x7);
x33=((1.0)*x29);
x34=((0.045)*x29);
x35=((0.045)*x26);
x36=(x19*x6);
x37=(x32*x6);
x38=(x4*x7*x9);
x39=(x15*x30);
x40=(x23*x30);
x41=(x14*x27);
x42=(x15*x32);
x43=(x23*x32);
x44=(x14*x31);
x45=((((-1.0)*x33))+((x1*x27)));
x46=(x26+((x1*x31)));
x47=((((-1.0)*x19*x29))+x27);
x48=((((-1.0)*x36))+((x28*x5)));
x49=((((-1.0)*x19*x27))+x33);
x50=((((-1.0)*x31))+(((-1.0)*x19*x26)));
x51=((((-1.0)*x26))+(((-1.0)*x19*x31)));
x52=(((x1*x15))+((x23*x28)));
x53=((-1.0)*x52);
x54=(x35+x44);
x55=(x46*x6);
x56=(x11*x48);
x57=(x45*x6);
x58=(x5*x51);
x59=(x50*x9);
x60=((((-1.0)*x39))+x57);
x61=((((-1.0)*x42))+x55);
x62=((((-1.0)*x40))+((x49*x5)));
x63=((((-1.0)*x43))+x58);
x64=(((x4*x7*x8))+((x52*x9)));
x65=(((x53*x8))+x38);
x66=(x11*x63);
x67=(((x47*x9))+((x61*x8)));
x68=(((x9*((x42+(((-1.0)*x23*x46))))))+((x47*x8)));
x69=(((x60*x8))+x59);
x70=(x12*x67);
x71=(((x50*x8))+((x9*((x39+(((-1.0)*x57)))))));
eerot[0]=(((x10*x71))+((x13*((((x12*x69))+((x11*x62)))))));
eerot[1]=(((x13*x71))+((x10*(((((-1.0)*x21*x69))+(((-1.0)*x17*x62)))))));
eerot[2]=(((x11*x69))+((x12*(((((-1.0)*x15*x49))+x40)))));
eetrans[0]=((0.22)+(((-1.0)*x34))+((x11*((((x20*x60))+((x24*x50))))))+((x5*(((((-0.3)*x29))+((x16*x27))))))+((x18*x30))+((x12*(((((-1.0)*x22*x49))+((x25*x30))))))+(((0.3)*x30*x6))+(((0.55)*x30))+x41+((x6*(((((-1.0)*x41))+x34)))));
eerot[3]=(((x13*((x70+x66))))+((x10*x68)));
eerot[4]=(((x10*(((((-1.0)*x21*x67))+(((-1.0)*x17*x63))))))+((x13*x68)));
eerot[5]=(((x12*((x43+(((-1.0)*x15*x51))))))+((x11*x67)));
eetrans[1]=((0.14)+((x18*x32))+(((-1.0)*x54*x6))+((x11*((((x20*x61))+((x24*x47))))))+((x12*((((x25*x32))+(((-1.0)*x22*x51))))))+(((0.55)*x32))+x54+((x5*((((x16*x31))+(((0.3)*x26))))))+(((0.3)*x37)));
eerot[6]=(((x10*x64))+((x13*((((x12*x65))+x56)))));
eerot[7]=(((x13*x64))+((x10*(((((-1.0)*x17*x48))+(((-1.0)*x21*x65)))))));
eerot[8]=(((x11*x65))+((x12*(((((-1.0)*x15*x28))+x36)))));
IkReal x72=((0.045)*x28);
eetrans[2]=((0.346)+(((-0.3)*x28*x5))+(((-1.0)*x72))+((x14*x5))+((x12*((((x1*x25))+(((-1.0)*x22*x28))))))+((x16*x6))+((x6*x72))+(((0.55)*x1))+((x11*((((x20*x53))+((x24*x4*x7)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]), htj2=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.22)+(((-0.22)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.14)+(((-0.22)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.346)+(((-0.22)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x73=((1.0)*px);
IkReal x74=((1.0)*pz);
IkReal x75=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x75))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x74)));
rxp0_2=((((-1.0)*r10*x73))+((py*r00)));
rxp1_0=((((-1.0)*r21*x75))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x74)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x73)));
rxp2_0=((((-1.0)*r22*x75))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x74)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x73)));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((1.18441410190393)+(((-2.9867963734811)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((1.18441410190393)+(((-2.9867963734811)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x76=IKasin(((1.18441410190393)+(((-2.9867963734811)*pp))));
j3array[0]=((-1.34027003705633)+(((-1.0)*x76)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.80132261653346)+x76);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j0eval[2];
j0eval[0]=((px*px)+(py*py));
j0eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x77=cj2*cj2;
IkReal x78=sj3*sj3;
IkReal x79=cj3*cj3;
IkReal x80=((3.0)*cj2);
IkReal x81=((13.3333333333333)*cj3*sj3);
j1eval[0]=((IKabs(((((20.0)*cj2*sj3))+x80+(((-1.0)*cj3*x80)))))+(((66.6666666666667)*(IKabs(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))));
j1eval[1]=((149.382716049383)+(((44.4444444444444)*x79))+(((44.4444444444444)*x77*x78))+(((-1.0)*x77*x81))+(((24.4444444444444)*sj3))+(((13.3333333333333)*sj3*x77))+(((-2.0)*cj3*x77))+x77+x78+x81+(((162.962962962963)*cj3))+((x77*x79)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x82=cj2*cj2;
IkReal x83=sj2*sj2;
IkReal x84=px*px;
IkReal x85=py*py;
IkReal x86=py*py*py*py;
IkReal x87=sj2*sj2*sj2*sj2;
IkReal x88=cj2*cj2*cj2*cj2;
IkReal x89=((1.0)*px*py);
IkReal x90=(x84*x85);
IkReal x91=((2.0)*x82*x83);
j0eval[0]=(((x87*x90))+((x86*x91))+((x86*x88))+((x86*x87))+((x90*x91))+((x88*x90)));
j0eval[1]=((IKabs(((((-1.0)*x82*x89))+(((-1.0)*x83*x89)))))+(IKabs((((x82*x85))+((x83*x85))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x92=cj2*cj2;
IkReal x93=py*py;
IkReal x94=sj2*sj2;
IkReal x95=((0.045)*py*sj2);
IkReal x96=((1.0)*px*py);
IkReal x97=(((x92*x93))+((x93*x94)));
IkReal x98=((((-1.0)*x94*x96))+(((-1.0)*x92*x96)));
CheckValue<IkReal> x101 = IKatan2WithCheck(IkReal(x97),x98,IKFAST_ATAN2_MAGTHRESH);
if(!x101.valid){
continue;
}
IkReal x99=((1.0)*(x101.value));
if((((x97*x97)+(x98*x98))) < -0.00001)
continue;
CheckValue<IkReal> x102=IKPowWithIntegerCheck(IKabs(IKsqrt(((x97*x97)+(x98*x98)))),-1);
if(!x102.valid){
continue;
}
if( (((x102.value)*(((((-0.3)*py*sj2*sj3))+((cj3*x95))+(((-1.0)*x95)))))) < -1-IKFAST_SINCOS_THRESH || (((x102.value)*(((((-0.3)*py*sj2*sj3))+((cj3*x95))+(((-1.0)*x95)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x100=IKasin(((x102.value)*(((((-0.3)*py*sj2*sj3))+((cj3*x95))+(((-1.0)*x95))))));
j0array[0]=((((-1.0)*x99))+(((-1.0)*x100)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x100+(((-1.0)*x99)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x103=sj2*sj2;
IkReal x104=cj2*cj2;
IkReal x105=px*px;
IkReal x106=IKsin(j0);
IkReal x107=IKcos(j0);
IkReal x108=(px*py);
IkReal x109=((0.045)*sj2);
IkReal x110=((1.0)*x105);
IkReal x111=((0.3)*sj2*sj3);
evalcond[0]=((((-1.0)*px*x109))+(((-1.0)*px*x111))+((x106*(((((-1.0)*x103*x110))+(((-1.0)*x104*x110))))))+((x107*((((x103*x108))+((x104*x108))))))+((cj3*px*x109)));
evalcond[1]=((((-1.0)*cj3*x109))+x111+x109+((px*x106))+(((-1.0)*py*x107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x112=(py*sj0);
IkReal x113=((0.3)*cj3);
IkReal x114=((0.045)*sj3);
IkReal x115=(cj2*pz);
IkReal x116=((6.66666666666667)*cj3);
IkReal x117=(cj0*px);
IkReal x118=((1.0)*sj3);
j1eval[0]=(((cj3*x115))+(((-1.0)*x112*x118))+(((-1.0)*x112*x116))+(((-6.66666666666667)*sj3*x115))+(((-1.0)*x117*x118))+(((-1.0)*x116*x117))+(((-12.2222222222222)*x117))+(((-12.2222222222222)*x112))+(((-1.0)*x115)));
j1eval[1]=IKsign(((((-1.0)*x112*x113))+(((-1.0)*x112*x114))+(((-0.55)*x112))+(((-0.55)*x117))+(((-1.0)*x113*x117))+(((-1.0)*x114*x117))+(((-0.3)*sj3*x115))+(((0.045)*cj3*x115))+(((-0.045)*x115))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x119=cj0*cj0;
IkReal x120=py*py;
IkReal x121=(sj2*x119);
IkReal x122=(((sj2*x120))+((x121*(px*px)))+((sj2*(pz*pz)))+(((-1.0)*x120*x121))+(((2.0)*cj0*px*py*sj0*sj2)));
j1eval[0]=x122;
j1eval[1]=IKsign(x122);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x123=(pz*sj2);
IkReal x124=(py*sj0);
IkReal x125=(cj0*px);
IkReal x126=(cj2*sj2);
IkReal x127=((1.0)*cj3);
IkReal x128=((0.045)*x126);
IkReal x129=(sj3*x126);
IkReal x130=(x124*x129);
j1eval[0]=((((-12.2222222222222)*x123))+(((6.66666666666667)*x125*x129))+(((-1.0)*x125*x126*x127))+(((6.66666666666667)*x130))+(((-6.66666666666667)*cj3*x123))+(((-1.0)*x124*x126*x127))+((x125*x126))+((x124*x126))+(((-1.0)*sj3*x123)));
j1eval[1]=IKsign(((((-1.0)*cj3*x125*x128))+(((-0.55)*x123))+(((-0.3)*cj3*x123))+(((0.3)*x130))+((x125*x128))+(((-1.0)*cj3*x124*x128))+((x124*x128))+(((0.3)*x125*x129))+(((-0.045)*sj3*x123))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x131=(((px*sj0))+(((-1.0)*cj0*py)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x131;
evalcond[3]=x131;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x132=(cj0*px);
IkReal x133=((0.310561435803037)*sj3);
IkReal x134=(pp*pz);
IkReal x135=(py*sj0);
IkReal x136=((0.138057984353428)*pp);
IkReal x137=((12.2222222222222)*sj3);
IkReal x138=((5.4333061668025)*pp);
IkReal x139=(pz*sj3);
j1eval[0]=((((-1.0)*x135*x137))+(((7.28153581454315)*pz))+((x135*x138))+(((-1.0)*x132*x137))+(((36.2220411120167)*x134))+(((-3.92556370551481)*x135))+(((-3.92556370551481)*x132))+(((-1.0)*x139))+((x132*x138)));
j1eval[1]=IKsign((((x135*x136))+(((-1.0)*x133*x135))+(((0.185020708697653)*pz))+(((-1.0)*x132*x133))+(((-0.0254095720202485)*x139))+((x132*x136))+(((-0.099746893695352)*x135))+(((-0.099746893695352)*x132))+(((0.92038656235619)*x134))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x140=(cj0*px);
IkReal x141=(py*sj0);
IkReal x142=((0.3)*sj3);
IkReal x143=((0.045)*cj3);
IkReal x144=(pz*sj3);
IkReal x145=((6.66666666666667)*sj3);
IkReal x146=((1.0)*cj3);
IkReal x147=(cj3*pz);
j1eval[0]=(((x140*x145))+(((-1.0)*x140*x146))+(((-6.66666666666667)*x147))+x140+x141+((x141*x145))+(((-1.0)*x144))+(((-1.0)*x141*x146))+(((-12.2222222222222)*pz)));
j1eval[1]=IKsign(((((-0.55)*pz))+(((-0.3)*x147))+((x140*x142))+(((-1.0)*x140*x143))+(((-0.045)*x144))+((x141*x142))+(((-1.0)*x141*x143))+(((0.045)*x141))+(((0.045)*x140))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x148=(py*sj0);
IkReal x149=(cj0*px);
IkReal x150=(pp*pz);
IkReal x151=((0.92038656235619)*pp);
IkReal x152=(pz*sj3);
IkReal x153=((36.2220411120167)*pp);
IkReal x154=((0.0254095720202485)*sj3);
j1eval[0]=((((-3.92556370551481)*pz))+(((-1.0)*x148*x153))+(((5.4333061668025)*x150))+(((-1.0)*x149*x153))+(((-7.28153581454315)*x148))+(((-7.28153581454315)*x149))+((sj3*x148))+((sj3*x149))+(((-12.2222222222222)*x152)));
j1eval[1]=IKsign(((((-0.185020708697653)*x148))+(((-0.185020708697653)*x149))+((x149*x154))+(((-0.310561435803037)*x152))+(((-0.099746893695352)*pz))+(((-1.0)*x148*x151))+((x148*x154))+(((-1.0)*x149*x151))+(((0.138057984353428)*x150))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x155=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x155);
rxp0_1=(px*r20);
rxp1_0=(r21*x155);
rxp1_1=(px*r21);
rxp2_0=(r22*x155);
rxp2_1=(px*r22);
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x156=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x156);
rxp0_1=(px*r20);
rxp1_0=(r21*x156);
rxp1_1=(px*r21);
rxp2_0=(r22*x156);
rxp2_1=(px*r22);
j1eval[0]=((-1.0)+(((-4.97450565850019)*(py*py)))+(((-4.97450565850019)*(px*px))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x157=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x157);
rxp0_1=(px*r20);
rxp1_0=(r21*x157);
rxp1_1=(px*r21);
rxp2_0=(r22*x157);
rxp2_1=(px*r22);
IkReal x158=(cj0*px);
IkReal x159=((4.97450565850019)*sj0);
IkReal x160=(py*sj0);
j1eval[0]=(x160+x158);
j1eval[1]=((((-1.0)*py*x159*(px*px)))+(((-1.0)*x159*(py*py*py)))+(((-1.0)*x160))+(((-4.97450565850019)*x158*(px*px)))+(((-1.0)*x158))+(((-4.97450565850019)*x158*(py*py))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=-0.2125;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
j1array[0]=1.07635079860369;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=4.21794345219348;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((0.85)*(IKsin(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x596=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x596);
rxp0_1=0;
rxp1_0=(r21*x596);
rxp1_1=0;
rxp2_0=(r22*x596);
rxp2_1=0;
px=0;
j0=0;
sj0=0;
cj0=1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=((1.0)+(((7.0852086999355)*(py*py)))+(((19.6045757079702)*(py*py*py*py))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x597=py*py;
CheckValue<IkReal> x599 = IKatan2WithCheck(IkReal(((-0.185020708697653)+(((-0.92038656235619)*x597)))),((0.099746893695352)+(((-0.138057984353428)*x597))),IKFAST_ATAN2_MAGTHRESH);
if(!x599.valid){
continue;
}
IkReal x598=x599.value;
j1array[0]=((-1.0)*x598);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x598)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((0.85)*(IKsin(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x600=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x600);
rxp0_1=0;
rxp1_0=(r21*x600);
rxp1_1=0;
rxp2_0=(r22*x600);
rxp2_1=0;
px=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=((1.0)+(((7.0852086999355)*(py*py)))+(((19.6045757079702)*(py*py*py*py))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x601=py*py;
CheckValue<IkReal> x603 = IKatan2WithCheck(IkReal(((-0.185020708697653)+(((-0.92038656235619)*x601)))),((0.099746893695352)+(((-0.138057984353428)*x601))),IKFAST_ATAN2_MAGTHRESH);
if(!x603.valid){
continue;
}
IkReal x602=x603.value;
j1array[0]=((-1.0)*x602);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x602)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((0.85)*(IKsin(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*(px*px))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x604=((-1.0)*px);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
rxp0_2=(r10*x604);
rxp1_2=(r11*x604);
rxp2_2=(r12*x604);
j1eval[0]=((1.0)+(((7.0852086999355)*(px*px)))+(((19.6045757079702)*(px*px*px*px))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x605=px*px;
CheckValue<IkReal> x607 = IKatan2WithCheck(IkReal(((-0.185020708697653)+(((-0.92038656235619)*x605)))),((0.099746893695352)+(((-0.138057984353428)*x605))),IKFAST_ATAN2_MAGTHRESH);
if(!x607.valid){
continue;
}
IkReal x606=x607.value;
j1array[0]=((-1.0)*x606);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x606)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((0.85)*(IKsin(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*(px*px))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x608=((-1.0)*px);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
rxp0_2=(r10*x608);
rxp1_2=(r11*x608);
rxp2_2=(r12*x608);
j1eval[0]=((1.0)+(((7.0852086999355)*(px*px)))+(((19.6045757079702)*(px*px*px*px))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x609=px*px;
CheckValue<IkReal> x611 = IKatan2WithCheck(IkReal(((-0.185020708697653)+(((-0.92038656235619)*x609)))),((0.099746893695352)+(((-0.138057984353428)*x609))),IKFAST_ATAN2_MAGTHRESH);
if(!x611.valid){
continue;
}
IkReal x610=x611.value;
j1array[0]=((-1.0)*x610);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x610)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((0.85)*(IKsin(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x612=px*px;
IkReal x613=py*py;
IkReal x614=((18.4077312471238)*sj0);
IkReal x615=((18.4077312471238)*cj0);
IkReal x616=(py*sj0);
IkReal x617=(cj0*px);
CheckValue<IkReal> x618=IKPowWithIntegerCheck(((((20.0)*x616))+(((20.0)*x617))),-1);
if(!x618.valid){
continue;
}
CheckValue<IkReal> x619=IKPowWithIntegerCheck(((((-1.0)*x614*(py*py*py)))+(((-1.0)*x615*(px*px*px)))+(((-1.0)*py*x612*x614))+(((-3.70041417395306)*x617))+(((-3.70041417395306)*x616))+(((-1.0)*px*x613*x615))),-1);
if(!x619.valid){
continue;
}
if( IKabs(((17.0)*(x618.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x619.value)*(((-1.69569719282098)+(((2.34698573400828)*x612))+(((2.34698573400828)*x613)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x618.value)))+IKsqr(((x619.value)*(((-1.69569719282098)+(((2.34698573400828)*x612))+(((2.34698573400828)*x613))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x618.value)), ((x619.value)*(((-1.69569719282098)+(((2.34698573400828)*x612))+(((2.34698573400828)*x613))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x620=IKsin(j1);
IkReal x621=IKcos(j1);
IkReal x622=py*py;
IkReal x623=px*px;
IkReal x624=(py*sj0);
IkReal x625=(cj0*px);
IkReal x626=((0.09)*x621);
IkReal x627=((1.0)*x621);
IkReal x628=((0.138057984353428)*x620);
IkReal x629=((0.92038656235619)*x621);
IkReal x630=((1.1)*x620);
evalcond[0]=((-0.85)+((x620*x624))+((x620*x625)));
evalcond[1]=((((0.85)*x620))+(((-1.0)*x624))+(((-1.0)*x625)));
evalcond[2]=((((-1.0)*x624*x627))+(((-1.0)*x625*x627)));
evalcond[3]=((((-0.185020708697653)*x621))+(((-1.0)*x623*x628))+(((-1.0)*x623*x629))+(((-1.0)*x622*x629))+(((-1.0)*x622*x628))+(((0.099746893695352)*x620)));
evalcond[4]=((-0.2125)+((x625*x630))+((x625*x626))+((x624*x630))+((x624*x626))+(((-1.0)*x623))+(((-1.0)*x622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x631=px*px;
IkReal x632=py*py;
IkReal x633=(cj0*px);
IkReal x634=((2.76115968706857)*sj0);
IkReal x635=(py*sj0);
CheckValue<IkReal> x636=IKPowWithIntegerCheck(((-3.1453520478601)+(((-15.6465715600552)*x632))+(((-15.6465715600552)*x631))),-1);
if(!x636.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x635))+(((1.17647058823529)*x633)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x636.value)*((((x634*(py*py*py)))+(((-1.99493787390704)*x633))+(((-1.99493787390704)*x635))+(((2.76115968706857)*x633*(px*px)))+((py*x631*x634))+(((2.76115968706857)*x632*x633)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x635))+(((1.17647058823529)*x633))))+IKsqr(((x636.value)*((((x634*(py*py*py)))+(((-1.99493787390704)*x633))+(((-1.99493787390704)*x635))+(((2.76115968706857)*x633*(px*px)))+((py*x631*x634))+(((2.76115968706857)*x632*x633))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x635))+(((1.17647058823529)*x633))), ((x636.value)*((((x634*(py*py*py)))+(((-1.99493787390704)*x633))+(((-1.99493787390704)*x635))+(((2.76115968706857)*x633*(px*px)))+((py*x631*x634))+(((2.76115968706857)*x632*x633))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x637=IKsin(j1);
IkReal x638=IKcos(j1);
IkReal x639=py*py;
IkReal x640=px*px;
IkReal x641=(py*sj0);
IkReal x642=(cj0*px);
IkReal x643=((0.09)*x638);
IkReal x644=((1.0)*x638);
IkReal x645=((0.138057984353428)*x637);
IkReal x646=((0.92038656235619)*x638);
IkReal x647=((1.1)*x637);
evalcond[0]=((-0.85)+((x637*x641))+((x637*x642)));
evalcond[1]=((((-1.0)*x642))+(((-1.0)*x641))+(((0.85)*x637)));
evalcond[2]=((((-1.0)*x642*x644))+(((-1.0)*x641*x644)));
evalcond[3]=((((-0.185020708697653)*x638))+(((-1.0)*x640*x645))+(((-1.0)*x640*x646))+(((-1.0)*x639*x645))+(((-1.0)*x639*x646))+(((0.099746893695352)*x637)));
evalcond[4]=((-0.2125)+(((-1.0)*x640))+((x641*x643))+((x641*x647))+(((-1.0)*x639))+((x642*x643))+((x642*x647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x648=cj0*cj0;
IkReal x649=px*px;
IkReal x650=py*py;
IkReal x651=(cj0*px);
IkReal x652=(py*sj0);
IkReal x653=((22.0)*x648);
CheckValue<IkReal> x654=IKPowWithIntegerCheck(((((1.53)*x651))+(((1.53)*x652))),-1);
if(!x654.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x652))+(((1.17647058823529)*x651)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x654.value)*(((3.6125)+(((17.0)*x649))+(((-44.0)*x651*x652))+(((-5.0)*x650))+(((-1.0)*x649*x653))+((x650*x653)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x652))+(((1.17647058823529)*x651))))+IKsqr(((x654.value)*(((3.6125)+(((17.0)*x649))+(((-44.0)*x651*x652))+(((-5.0)*x650))+(((-1.0)*x649*x653))+((x650*x653))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x652))+(((1.17647058823529)*x651))), ((x654.value)*(((3.6125)+(((17.0)*x649))+(((-44.0)*x651*x652))+(((-5.0)*x650))+(((-1.0)*x649*x653))+((x650*x653))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x655=IKsin(j1);
IkReal x656=IKcos(j1);
IkReal x657=py*py;
IkReal x658=px*px;
IkReal x659=(py*sj0);
IkReal x660=(cj0*px);
IkReal x661=((0.09)*x656);
IkReal x662=((1.0)*x656);
IkReal x663=((0.138057984353428)*x655);
IkReal x664=((0.92038656235619)*x656);
IkReal x665=((1.1)*x655);
evalcond[0]=((-0.85)+((x655*x659))+((x655*x660)));
evalcond[1]=((((-1.0)*x659))+(((0.85)*x655))+(((-1.0)*x660)));
evalcond[2]=((((-1.0)*x659*x662))+(((-1.0)*x660*x662)));
evalcond[3]=((((-1.0)*x658*x663))+(((-1.0)*x658*x664))+(((-1.0)*x657*x663))+(((-1.0)*x657*x664))+(((0.099746893695352)*x655))+(((-0.185020708697653)*x656)));
evalcond[4]=((-0.2125)+(((-1.0)*x657))+(((-1.0)*x658))+((x660*x661))+((x660*x665))+((x659*x661))+((x659*x665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x666=cj3*cj3;
IkReal x667=(cj3*sj3);
IkReal x668=(cj0*px);
IkReal x669=((0.92038656235619)*pp);
IkReal x670=((0.0254095720202485)*sj3);
IkReal x671=(py*sj0);
IkReal x672=(pp*sj3);
IkReal x673=((1.0)*pz);
IkReal x674=(cj3*pp);
CheckValue<IkReal> x675=IKPowWithIntegerCheck(IKsign(((((-0.099746893695352)*pz))+(((-0.310561435803037)*pz*sj3))+((x670*x671))+(((-0.185020708697653)*x671))+(((-1.0)*x668*x669))+(((-0.185020708697653)*x668))+((x668*x670))+(((-1.0)*x669*x671))+(((0.138057984353428)*pp*pz)))),-1);
if(!x675.valid){
continue;
}
CheckValue<IkReal> x676 = IKatan2WithCheck(IkReal(((-0.100617959042798)+(((-0.276115968706857)*x674))+(((0.00762287160607455)*x667))+(((-0.0414173953060285)*x672))+(pz*pz)+(((-0.506212609295904)*pp))+(((0.00564933271974229)*sj3))+(((-0.00114343074091118)*x666))+(((-0.0555062126092959)*cj3)))),((-0.0688360561435803)+(((-0.0299240681086056)*cj3))+(((-0.0931684307409112)*x667))+(((-1.0)*x668*x673))+(((0.0414173953060285)*x674))+(((0.0759318913943856)*pp))+(((0.00621260929590428)*x672))+(((-0.175297399907961)*sj3))+(((0.0139752646111367)*x666))+(((-1.0)*x671*x673))),IKFAST_ATAN2_MAGTHRESH);
if(!x676.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x675.value)))+(x676.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x677=IKsin(j1);
IkReal x678=IKcos(j1);
IkReal x679=((0.045)*sj3);
IkReal x680=((0.3)*cj3);
IkReal x681=((0.045)*cj3);
IkReal x682=(cj0*px);
IkReal x683=(py*sj0);
IkReal x684=((1.0)*x678);
IkReal x685=(sj3*x678);
IkReal x686=(pz*x677);
IkReal x687=(pz*x678);
IkReal x688=((0.09)*x678);
IkReal x689=((1.1)*x677);
evalcond[0]=((-0.55)+(((-1.0)*x680))+((x677*x683))+((x677*x682))+x687+(((-1.0)*x679)));
evalcond[1]=((0.045)+(((-1.0)*x681))+x686+(((-1.0)*x682*x684))+(((0.3)*sj3))+(((-1.0)*x683*x684)));
evalcond[2]=((((0.099746893695352)*x677))+(((-0.92038656235619)*pp*x678))+(((0.0254095720202485)*x685))+(((-0.185020708697653)*x678))+(((0.310561435803037)*sj3*x677))+pz+(((-0.138057984353428)*pp*x677)));
evalcond[3]=((((0.045)*x678))+((x677*x679))+((x677*x680))+(((0.55)*x677))+(((-1.0)*x678*x681))+(((0.3)*x685))+(((-1.0)*x683))+(((-1.0)*x682)));
evalcond[4]=((-0.2125)+(((1.1)*x687))+((x682*x689))+((x682*x688))+((x683*x689))+((x683*x688))+(((-0.09)*x686))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x690=cj0*cj0;
IkReal x691=py*py;
IkReal x692=cj3*cj3;
IkReal x693=(py*sj0);
IkReal x694=((0.3)*sj3);
IkReal x695=((0.045)*cj3);
IkReal x696=(cj0*px);
IkReal x697=(cj3*sj3);
IkReal x698=((1.0)*pz);
CheckValue<IkReal> x699 = IKatan2WithCheck(IkReal(((0.03825)+(((-0.01125)*cj3))+(((0.087975)*x697))+(((-1.0)*x696*x698))+(((-1.0)*x693*x698))+(((-0.027)*x692))+(((0.167025)*sj3)))),((-0.304525)+(((-0.0495)*sj3))+(((-0.087975)*x692))+(((-0.027)*x697))+(((-1.0)*x690*x691))+x691+((x690*(px*px)))+(((2.0)*x693*x696))+(((-0.33)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x699.valid){
continue;
}
CheckValue<IkReal> x700=IKPowWithIntegerCheck(IKsign(((((-0.55)*pz))+(((-0.3)*cj3*pz))+((x694*x696))+(((-0.045)*pz*sj3))+(((-1.0)*x693*x695))+(((0.045)*x696))+(((0.045)*x693))+((x693*x694))+(((-1.0)*x695*x696)))),-1);
if(!x700.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x699.value)+(((1.5707963267949)*(x700.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x701=IKsin(j1);
IkReal x702=IKcos(j1);
IkReal x703=((0.045)*sj3);
IkReal x704=((0.3)*cj3);
IkReal x705=((0.045)*cj3);
IkReal x706=(cj0*px);
IkReal x707=(py*sj0);
IkReal x708=((1.0)*x702);
IkReal x709=(sj3*x702);
IkReal x710=(pz*x701);
IkReal x711=(pz*x702);
IkReal x712=((0.09)*x702);
IkReal x713=((1.1)*x701);
evalcond[0]=((-0.55)+((x701*x706))+((x701*x707))+(((-1.0)*x703))+(((-1.0)*x704))+x711);
evalcond[1]=((0.045)+(((-1.0)*x706*x708))+(((-1.0)*x707*x708))+(((-1.0)*x705))+(((0.3)*sj3))+x710);
evalcond[2]=((((-0.138057984353428)*pp*x701))+(((0.310561435803037)*sj3*x701))+pz+(((0.099746893695352)*x701))+(((-0.92038656235619)*pp*x702))+(((-0.185020708697653)*x702))+(((0.0254095720202485)*x709)));
evalcond[3]=(((x701*x704))+((x701*x703))+(((-1.0)*x702*x705))+(((0.3)*x709))+(((0.55)*x701))+(((-1.0)*x706))+(((-1.0)*x707))+(((0.045)*x702)));
evalcond[4]=((-0.2125)+((x707*x712))+((x707*x713))+((x706*x712))+((x706*x713))+(((1.1)*x711))+(((-1.0)*pp))+(((-0.09)*x710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x714=cj3*cj3;
IkReal x715=(cj0*px);
IkReal x716=((0.00621260929590428)*pp);
IkReal x717=(cj3*sj3);
IkReal x718=(py*sj0);
IkReal x719=((0.138057984353428)*pp);
IkReal x720=((0.0414173953060285)*pp);
IkReal x721=((0.310561435803037)*sj3);
CheckValue<IkReal> x722 = IKatan2WithCheck(IkReal(((-0.000703060285319834)+(((-0.00762287160607455)*x714))+(((-1.0)*x720))+(((-0.276115968706857)*pp*sj3))+((cj3*x720))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((pz*x718))+((pz*x715))+(((-0.00114343074091118)*x717)))),((-0.097657040957202)+(((0.0931684307409112)*x714))+((sj3*x720))+(((-1.0)*cj3*x716))+(pz*pz)+(((0.0139752646111367)*x717))+(((0.00448861021629084)*cj3))+x716+(((-0.0438993327197423)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x722.valid){
continue;
}
CheckValue<IkReal> x723=IKPowWithIntegerCheck(IKsign((((x715*x719))+(((-0.0254095720202485)*pz*sj3))+(((-0.099746893695352)*x715))+(((-0.099746893695352)*x718))+(((0.185020708697653)*pz))+(((0.92038656235619)*pp*pz))+(((-1.0)*x715*x721))+((x718*x719))+(((-1.0)*x718*x721)))),-1);
if(!x723.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x722.value)+(((1.5707963267949)*(x723.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x724=IKsin(j1);
IkReal x725=IKcos(j1);
IkReal x726=((0.045)*sj3);
IkReal x727=((0.3)*cj3);
IkReal x728=((0.045)*cj3);
IkReal x729=(cj0*px);
IkReal x730=(py*sj0);
IkReal x731=((1.0)*x725);
IkReal x732=(sj3*x725);
IkReal x733=(pz*x724);
IkReal x734=(pz*x725);
IkReal x735=((0.09)*x725);
IkReal x736=((1.1)*x724);
evalcond[0]=((-0.55)+(((-1.0)*x727))+(((-1.0)*x726))+((x724*x730))+x734+((x724*x729)));
evalcond[1]=((0.045)+(((-1.0)*x728))+(((-1.0)*x730*x731))+(((0.3)*sj3))+x733+(((-1.0)*x729*x731)));
evalcond[2]=((((0.0254095720202485)*x732))+(((-0.138057984353428)*pp*x724))+pz+(((0.310561435803037)*sj3*x724))+(((-0.92038656235619)*pp*x725))+(((-0.185020708697653)*x725))+(((0.099746893695352)*x724)));
evalcond[3]=((((0.3)*x732))+(((-1.0)*x730))+(((0.55)*x724))+(((-1.0)*x725*x728))+(((-1.0)*x729))+(((0.045)*x725))+((x724*x726))+((x724*x727)));
evalcond[4]=((-0.2125)+(((1.1)*x734))+((x729*x736))+((x729*x735))+(((-1.0)*pp))+(((-0.09)*x733))+((x730*x735))+((x730*x736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x737=(px*sj0);
IkReal x738=(cj0*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-1.0)*x738))+x737);
evalcond[3]=((((-1.0)*x737))+x738);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x739=cj0*cj0;
IkReal x740=py*py;
IkReal x741=(((x739*(px*px)))+(pz*pz)+x740+(((2.0)*cj0*px*py*sj0))+(((-1.0)*x739*x740)));
j1eval[0]=x741;
j1eval[1]=IKsign(x741);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x742=(py*sj0);
IkReal x743=((0.3)*sj3);
IkReal x744=(cj0*px);
IkReal x745=((6.66666666666667)*sj3);
IkReal x746=(pz*sj3);
IkReal x747=(cj3*pz);
IkReal x748=((0.045)*x744);
j1eval[0]=((((-1.0)*x742*x745))+((cj3*x744))+((cj3*x742))+(((-1.0)*x744*x745))+(((-1.0)*x744))+(((-1.0)*x742))+(((-1.0)*x746))+(((-12.2222222222222)*pz))+(((-6.66666666666667)*x747)));
j1eval[1]=IKsign(((((-0.55)*pz))+(((0.045)*cj3*x742))+(((-1.0)*x742*x743))+((cj3*x748))+(((-0.3)*x747))+(((-0.045)*x746))+(((-0.045)*x742))+(((-1.0)*x748))+(((-1.0)*x743*x744))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x749=(py*sj0);
IkReal x750=(cj0*px);
IkReal x751=(pp*pz);
IkReal x752=((0.92038656235619)*pp);
IkReal x753=(pz*sj3);
IkReal x754=((36.2220411120167)*pp);
IkReal x755=((0.0254095720202485)*sj3);
j1eval[0]=((((-1.0)*x750*x754))+((sj3*x749))+(((3.92556370551481)*pz))+(((-5.4333061668025)*x751))+(((-1.0)*x749*x754))+((sj3*x750))+(((-7.28153581454315)*x749))+(((-7.28153581454315)*x750))+(((12.2222222222222)*x753)));
j1eval[1]=IKsign(((((-1.0)*x750*x752))+(((-0.185020708697653)*x749))+(((0.310561435803037)*x753))+(((-0.185020708697653)*x750))+(((0.099746893695352)*pz))+(((-0.138057984353428)*x751))+(((-1.0)*x749*x752))+((x749*x755))+((x750*x755))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x756=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x756);
rxp0_1=(px*r20);
rxp1_0=(r21*x756);
rxp1_1=(px*r21);
rxp2_0=(r22*x756);
rxp2_1=(px*r22);
j1eval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x757=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x757);
rxp0_1=(px*r20);
rxp1_0=(r21*x757);
rxp1_1=(px*r21);
rxp2_0=(r22*x757);
rxp2_1=(px*r22);
j1eval[0]=((-1.0)+(((-4.97450565850019)*(py*py)))+(((-4.97450565850019)*(px*px))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x758=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x758);
rxp0_1=(px*r20);
rxp1_0=(r21*x758);
rxp1_1=(px*r21);
rxp2_0=(r22*x758);
rxp2_1=(px*r22);
IkReal x759=(cj0*px);
IkReal x760=((4.97450565850019)*sj0);
IkReal x761=(py*sj0);
j1eval[0]=(x759+x761);
j1eval[1]=((((-4.97450565850019)*x759*(py*py)))+(((-1.0)*x760*(py*py*py)))+(((-1.0)*x761))+(((-1.0)*x759))+(((-4.97450565850019)*x759*(px*px)))+(((-1.0)*py*x760*(px*px))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=-0.2125;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
j1array[0]=2.06524185498611;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=5.2068345085759;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((0.85)*(IKsin(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x762=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x762);
rxp0_1=0;
rxp1_0=(r21*x762);
rxp1_1=0;
rxp2_0=(r22*x762);
rxp2_1=0;
px=0;
j0=0;
sj0=0;
cj0=1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=((1.0)+(((7.0852086999355)*(py*py)))+(((19.6045757079702)*(py*py*py*py))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x763=py*py;
CheckValue<IkReal> x765 = IKatan2WithCheck(IkReal(((-0.185020708697653)+(((-0.92038656235619)*x763)))),((-0.099746893695352)+(((0.138057984353428)*x763))),IKFAST_ATAN2_MAGTHRESH);
if(!x765.valid){
continue;
}
IkReal x764=x765.value;
j1array[0]=((-1.0)*x764);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x764)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((0.85)*(IKsin(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x766=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x766);
rxp0_1=0;
rxp1_0=(r21*x766);
rxp1_1=0;
rxp2_0=(r22*x766);
rxp2_1=0;
px=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=((1.0)+(((7.0852086999355)*(py*py)))+(((19.6045757079702)*(py*py*py*py))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x767=py*py;
CheckValue<IkReal> x769 = IKatan2WithCheck(IkReal(((-0.185020708697653)+(((-0.92038656235619)*x767)))),((-0.099746893695352)+(((0.138057984353428)*x767))),IKFAST_ATAN2_MAGTHRESH);
if(!x769.valid){
continue;
}
IkReal x768=x769.value;
j1array[0]=((-1.0)*x768);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x768)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((0.85)*(IKsin(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*(px*px))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x770=((-1.0)*px);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
rxp0_2=(r10*x770);
rxp1_2=(r11*x770);
rxp2_2=(r12*x770);
j1eval[0]=((1.0)+(((7.0852086999355)*(px*px)))+(((19.6045757079702)*(px*px*px*px))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x771=px*px;
CheckValue<IkReal> x773 = IKatan2WithCheck(IkReal(((-0.185020708697653)+(((-0.92038656235619)*x771)))),((-0.099746893695352)+(((0.138057984353428)*x771))),IKFAST_ATAN2_MAGTHRESH);
if(!x773.valid){
continue;
}
IkReal x772=x773.value;
j1array[0]=((-1.0)*x772);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x772)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((0.85)*(IKsin(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*(px*px))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x774=((-1.0)*px);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
rxp0_2=(r10*x774);
rxp1_2=(r11*x774);
rxp2_2=(r12*x774);
j1eval[0]=((1.0)+(((7.0852086999355)*(px*px)))+(((19.6045757079702)*(px*px*px*px))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x775=px*px;
CheckValue<IkReal> x777 = IKatan2WithCheck(IkReal(((-0.185020708697653)+(((-0.92038656235619)*x775)))),((-0.099746893695352)+(((0.138057984353428)*x775))),IKFAST_ATAN2_MAGTHRESH);
if(!x777.valid){
continue;
}
IkReal x776=x777.value;
j1array[0]=((-1.0)*x776);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x776)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((0.85)*(IKsin(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x778=px*px;
IkReal x779=py*py;
IkReal x780=((18.4077312471238)*sj0);
IkReal x781=((18.4077312471238)*cj0);
IkReal x782=(py*sj0);
IkReal x783=(cj0*px);
CheckValue<IkReal> x784=IKPowWithIntegerCheck(((((20.0)*x782))+(((20.0)*x783))),-1);
if(!x784.valid){
continue;
}
CheckValue<IkReal> x785=IKPowWithIntegerCheck(((((-1.0)*px*x779*x781))+(((-1.0)*x780*(py*py*py)))+(((-1.0)*py*x778*x780))+(((-1.0)*x781*(px*px*px)))+(((-3.70041417395306)*x783))+(((-3.70041417395306)*x782))),-1);
if(!x785.valid){
continue;
}
if( IKabs(((17.0)*(x784.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x785.value)*(((1.69569719282098)+(((-2.34698573400828)*x778))+(((-2.34698573400828)*x779)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x784.value)))+IKsqr(((x785.value)*(((1.69569719282098)+(((-2.34698573400828)*x778))+(((-2.34698573400828)*x779))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x784.value)), ((x785.value)*(((1.69569719282098)+(((-2.34698573400828)*x778))+(((-2.34698573400828)*x779))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x786=IKcos(j1);
IkReal x787=IKsin(j1);
IkReal x788=px*px;
IkReal x789=py*py;
IkReal x790=(py*sj0);
IkReal x791=(cj0*px);
IkReal x792=((0.09)*x786);
IkReal x793=((0.138057984353428)*x787);
IkReal x794=((1.1)*x787);
IkReal x795=((0.92038656235619)*x786);
evalcond[0]=(((x786*x791))+((x786*x790)));
evalcond[1]=((-0.85)+((x787*x790))+((x787*x791)));
evalcond[2]=((((0.85)*x787))+(((-1.0)*x791))+(((-1.0)*x790)));
evalcond[3]=((((-0.099746893695352)*x787))+(((-1.0)*x788*x795))+(((-0.185020708697653)*x786))+((x788*x793))+(((-1.0)*x789*x795))+((x789*x793)));
evalcond[4]=((-0.2125)+((x790*x794))+(((-1.0)*x791*x792))+(((-1.0)*x790*x792))+(((-1.0)*x789))+(((-1.0)*x788))+((x791*x794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x796=px*px;
IkReal x797=py*py;
IkReal x798=(cj0*px);
IkReal x799=((2.76115968706857)*sj0);
IkReal x800=(py*sj0);
CheckValue<IkReal> x801=IKPowWithIntegerCheck(((-3.1453520478601)+(((-15.6465715600552)*x797))+(((-15.6465715600552)*x796))),-1);
if(!x801.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x800))+(((1.17647058823529)*x798)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x801.value)*(((((1.99493787390704)*x798))+(((-2.76115968706857)*x798*(px*px)))+(((-2.76115968706857)*x797*x798))+(((1.99493787390704)*x800))+(((-1.0)*py*x796*x799))+(((-1.0)*x799*(py*py*py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x800))+(((1.17647058823529)*x798))))+IKsqr(((x801.value)*(((((1.99493787390704)*x798))+(((-2.76115968706857)*x798*(px*px)))+(((-2.76115968706857)*x797*x798))+(((1.99493787390704)*x800))+(((-1.0)*py*x796*x799))+(((-1.0)*x799*(py*py*py)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x800))+(((1.17647058823529)*x798))), ((x801.value)*(((((1.99493787390704)*x798))+(((-2.76115968706857)*x798*(px*px)))+(((-2.76115968706857)*x797*x798))+(((1.99493787390704)*x800))+(((-1.0)*py*x796*x799))+(((-1.0)*x799*(py*py*py)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x802=IKcos(j1);
IkReal x803=IKsin(j1);
IkReal x804=px*px;
IkReal x805=py*py;
IkReal x806=(py*sj0);
IkReal x807=(cj0*px);
IkReal x808=((0.09)*x802);
IkReal x809=((0.138057984353428)*x803);
IkReal x810=((1.1)*x803);
IkReal x811=((0.92038656235619)*x802);
evalcond[0]=(((x802*x807))+((x802*x806)));
evalcond[1]=((-0.85)+((x803*x807))+((x803*x806)));
evalcond[2]=((((-1.0)*x807))+(((-1.0)*x806))+(((0.85)*x803)));
evalcond[3]=(((x804*x809))+(((-0.099746893695352)*x803))+((x805*x809))+(((-1.0)*x804*x811))+(((-1.0)*x805*x811))+(((-0.185020708697653)*x802)));
evalcond[4]=((-0.2125)+(((-1.0)*x805))+(((-1.0)*x804))+(((-1.0)*x807*x808))+(((-1.0)*x806*x808))+((x807*x810))+((x806*x810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x812=cj0*cj0;
IkReal x813=px*px;
IkReal x814=py*py;
IkReal x815=(cj0*px);
IkReal x816=(py*sj0);
IkReal x817=((22.0)*x812);
CheckValue<IkReal> x818=IKPowWithIntegerCheck(((((-1.53)*x816))+(((-1.53)*x815))),-1);
if(!x818.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x816))+(((1.17647058823529)*x815)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x818.value)*(((3.6125)+(((17.0)*x813))+(((-44.0)*x815*x816))+((x814*x817))+(((-1.0)*x813*x817))+(((-5.0)*x814)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x816))+(((1.17647058823529)*x815))))+IKsqr(((x818.value)*(((3.6125)+(((17.0)*x813))+(((-44.0)*x815*x816))+((x814*x817))+(((-1.0)*x813*x817))+(((-5.0)*x814))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x816))+(((1.17647058823529)*x815))), ((x818.value)*(((3.6125)+(((17.0)*x813))+(((-44.0)*x815*x816))+((x814*x817))+(((-1.0)*x813*x817))+(((-5.0)*x814))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x819=IKcos(j1);
IkReal x820=IKsin(j1);
IkReal x821=px*px;
IkReal x822=py*py;
IkReal x823=(py*sj0);
IkReal x824=(cj0*px);
IkReal x825=((0.09)*x819);
IkReal x826=((0.138057984353428)*x820);
IkReal x827=((1.1)*x820);
IkReal x828=((0.92038656235619)*x819);
evalcond[0]=(((x819*x823))+((x819*x824)));
evalcond[1]=((-0.85)+((x820*x824))+((x820*x823)));
evalcond[2]=((((-1.0)*x824))+(((-1.0)*x823))+(((0.85)*x820)));
evalcond[3]=((((-1.0)*x822*x828))+((x821*x826))+(((-0.185020708697653)*x819))+(((-1.0)*x821*x828))+((x822*x826))+(((-0.099746893695352)*x820)));
evalcond[4]=((-0.2125)+((x824*x827))+(((-1.0)*x823*x825))+(((-1.0)*x824*x825))+(((-1.0)*x821))+(((-1.0)*x822))+((x823*x827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x829=cj3*cj3;
IkReal x830=(cj3*sj3);
IkReal x831=(cj0*px);
IkReal x832=((0.92038656235619)*pp);
IkReal x833=((0.0254095720202485)*sj3);
IkReal x834=(py*sj0);
IkReal x835=((0.0414173953060285)*pp);
IkReal x836=((1.0)*pz);
CheckValue<IkReal> x837 = IKatan2WithCheck(IkReal(((-0.100617959042798)+(((0.00762287160607455)*x830))+(((-0.276115968706857)*cj3*pp))+(pz*pz)+(((-0.00114343074091118)*x829))+(((-0.506212609295904)*pp))+(((0.00564933271974229)*sj3))+(((-0.0555062126092959)*cj3))+(((-1.0)*sj3*x835)))),((0.0688360561435803)+(((0.0931684307409112)*x830))+(((0.175297399907961)*sj3))+(((-1.0)*x834*x836))+(((-0.00621260929590428)*pp*sj3))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))+(((-1.0)*cj3*x835))+(((-0.0139752646111367)*x829))+(((-1.0)*x831*x836))),IKFAST_ATAN2_MAGTHRESH);
if(!x837.valid){
continue;
}
CheckValue<IkReal> x838=IKPowWithIntegerCheck(IKsign(((((-1.0)*x832*x834))+((x831*x833))+(((-0.185020708697653)*x831))+(((-0.185020708697653)*x834))+(((-0.138057984353428)*pp*pz))+(((0.310561435803037)*pz*sj3))+((x833*x834))+(((0.099746893695352)*pz))+(((-1.0)*x831*x832)))),-1);
if(!x838.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x837.value)+(((1.5707963267949)*(x838.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x839=IKsin(j1);
IkReal x840=IKcos(j1);
IkReal x841=((0.045)*sj3);
IkReal x842=((0.3)*cj3);
IkReal x843=((0.045)*cj3);
IkReal x844=(cj0*px);
IkReal x845=(py*sj0);
IkReal x846=(sj3*x840);
IkReal x847=(pz*x839);
IkReal x848=(pz*x840);
IkReal x849=((0.09)*x840);
IkReal x850=((1.1)*x839);
evalcond[0]=((-0.55)+((x839*x845))+((x839*x844))+(((-1.0)*x842))+(((-1.0)*x841))+x848);
evalcond[1]=((0.045)+((x840*x845))+((x840*x844))+(((-1.0)*x843))+(((0.3)*sj3))+(((-1.0)*x847)));
evalcond[2]=((((-0.310561435803037)*sj3*x839))+(((-0.099746893695352)*x839))+(((-0.185020708697653)*x840))+(((0.138057984353428)*pp*x839))+(((0.0254095720202485)*x846))+pz+(((-0.92038656235619)*pp*x840)));
evalcond[3]=(((x840*x843))+((x839*x842))+((x839*x841))+(((-0.3)*x846))+(((-0.045)*x840))+(((0.55)*x839))+(((-1.0)*x845))+(((-1.0)*x844)));
evalcond[4]=((-0.2125)+((x845*x850))+((x844*x850))+(((-1.0)*pp))+(((-1.0)*x844*x849))+(((-1.0)*x845*x849))+(((1.1)*x848))+(((0.09)*x847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x851=cj0*cj0;
IkReal x852=py*py;
IkReal x853=cj3*cj3;
IkReal x854=(py*sj0);
IkReal x855=((0.3)*sj3);
IkReal x856=((0.045)*cj3);
IkReal x857=(cj0*px);
IkReal x858=(cj3*sj3);
IkReal x859=((1.0)*pz);
CheckValue<IkReal> x860=IKPowWithIntegerCheck(IKsign(((((-0.55)*pz))+(((-0.045)*x857))+(((-0.045)*x854))+(((-0.3)*cj3*pz))+(((-0.045)*pz*sj3))+((x856*x857))+((x854*x856))+(((-1.0)*x855*x857))+(((-1.0)*x854*x855)))),-1);
if(!x860.valid){
continue;
}
CheckValue<IkReal> x861 = IKatan2WithCheck(IkReal(((-0.03825)+(((0.01125)*cj3))+(((-0.087975)*x858))+(((0.027)*x853))+(((-0.167025)*sj3))+(((-1.0)*x854*x859))+(((-1.0)*x857*x859)))),((-0.304525)+(((-0.087975)*x853))+(((-0.027)*x858))+(((-0.0495)*sj3))+(((-1.0)*x851*x852))+((x851*(px*px)))+x852+(((2.0)*x854*x857))+(((-0.33)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x861.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x860.value)))+(x861.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x862=IKsin(j1);
IkReal x863=IKcos(j1);
IkReal x864=((0.045)*sj3);
IkReal x865=((0.3)*cj3);
IkReal x866=((0.045)*cj3);
IkReal x867=(cj0*px);
IkReal x868=(py*sj0);
IkReal x869=(sj3*x863);
IkReal x870=(pz*x862);
IkReal x871=(pz*x863);
IkReal x872=((0.09)*x863);
IkReal x873=((1.1)*x862);
evalcond[0]=((-0.55)+(((-1.0)*x864))+(((-1.0)*x865))+((x862*x868))+((x862*x867))+x871);
evalcond[1]=((0.045)+(((-1.0)*x866))+((x863*x867))+((x863*x868))+(((-1.0)*x870))+(((0.3)*sj3)));
evalcond[2]=((((0.0254095720202485)*x869))+(((-0.92038656235619)*pp*x863))+(((-0.185020708697653)*x863))+(((-0.099746893695352)*x862))+pz+(((0.138057984353428)*pp*x862))+(((-0.310561435803037)*sj3*x862)));
evalcond[3]=((((-0.3)*x869))+((x863*x866))+(((-1.0)*x868))+(((-1.0)*x867))+(((0.55)*x862))+((x862*x865))+((x862*x864))+(((-0.045)*x863)));
evalcond[4]=((-0.2125)+((x867*x873))+(((1.1)*x871))+((x868*x873))+(((-1.0)*x868*x872))+(((-1.0)*pp))+(((0.09)*x870))+(((-1.0)*x867*x872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x874=cj0*cj0;
IkReal x875=py*py;
IkReal x876=(pz*sj3);
IkReal x877=(py*sj0);
IkReal x878=((0.3)*cj3);
IkReal x879=((0.045)*sj3);
IkReal x880=((0.045)*cj3);
IkReal x881=(cj0*px);
IkReal x882=((0.3)*sj3);
CheckValue<IkReal> x883=IKPowWithIntegerCheck(IKsign((((x874*(px*px)))+(((2.0)*x877*x881))+(pz*pz)+(((-1.0)*x874*x875))+x875)),-1);
if(!x883.valid){
continue;
}
CheckValue<IkReal> x884 = IKatan2WithCheck(IkReal(((((0.3)*x876))+((x879*x881))+(((-1.0)*pz*x880))+(((0.045)*pz))+(((0.55)*x877))+(((0.55)*x881))+((x878*x881))+((x877*x878))+((x877*x879)))),(((x880*x881))+(((0.045)*x876))+((x877*x880))+(((-0.045)*x881))+(((-1.0)*x881*x882))+(((-1.0)*x877*x882))+((pz*x878))+(((0.55)*pz))+(((-0.045)*x877))),IKFAST_ATAN2_MAGTHRESH);
if(!x884.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x883.value)))+(x884.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x885=IKsin(j1);
IkReal x886=IKcos(j1);
IkReal x887=((0.045)*sj3);
IkReal x888=((0.3)*cj3);
IkReal x889=((0.045)*cj3);
IkReal x890=(cj0*px);
IkReal x891=(py*sj0);
IkReal x892=(sj3*x886);
IkReal x893=(pz*x885);
IkReal x894=(pz*x886);
IkReal x895=((0.09)*x886);
IkReal x896=((1.1)*x885);
evalcond[0]=((-0.55)+(((-1.0)*x887))+(((-1.0)*x888))+x894+((x885*x890))+((x885*x891)));
evalcond[1]=((0.045)+((x886*x891))+((x886*x890))+(((-1.0)*x889))+(((-1.0)*x893))+(((0.3)*sj3)));
evalcond[2]=((((-0.185020708697653)*x886))+(((0.138057984353428)*pp*x885))+(((0.0254095720202485)*x892))+pz+(((-0.92038656235619)*pp*x886))+(((-0.099746893695352)*x885))+(((-0.310561435803037)*sj3*x885)));
evalcond[3]=(((x886*x889))+(((-0.045)*x886))+(((-1.0)*x890))+(((-1.0)*x891))+(((0.55)*x885))+(((-0.3)*x892))+((x885*x887))+((x885*x888)));
evalcond[4]=((-0.2125)+(((1.1)*x894))+(((-1.0)*pp))+((x890*x896))+((x891*x896))+(((0.09)*x893))+(((-1.0)*x890*x895))+(((-1.0)*x891*x895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x897=cj2*cj2;
IkReal x898=((0.045)*px);
IkReal x899=(sj0*sj2);
IkReal x900=(pz*sj2);
IkReal x901=(cj0*cj3);
IkReal x902=((0.55)*cj2);
IkReal x903=(px*sj0);
IkReal x904=(cj0*py);
IkReal x905=((0.3)*cj3);
IkReal x906=((0.3)*sj3);
IkReal x907=((0.045)*sj3);
IkReal x908=(sj0*x897);
IkReal x909=(cj0*cj2*sj2);
IkReal x910=((0.3)*cj2*py);
IkReal x911=((0.045)*x897);
IkReal x912=((0.045)*cj2*py);
CheckValue<IkReal> x913=IKPowWithIntegerCheck(IKsign(((((-1.0)*x900*x907))+(((-1.0)*x900*x905))+((px*x906*x909))+(((-1.0)*cj2*sj2*x898*x901))+(((-0.55)*x900))+((x899*x912))+((cj2*py*x899*x906))+((x898*x909))+(((-1.0)*cj3*x899*x912)))),-1);
if(!x913.valid){
continue;
}
CheckValue<IkReal> x914 = IKatan2WithCheck(IkReal((((x901*x910))+(((-1.0)*x902*x903))+((x902*x904))+((cj2*x904*x907))+(((-1.0)*cj0*px*x900))+(((-1.0)*cj2*x903*x905))+(((-1.0)*py*pz*x899))+(((-1.0)*cj2*sj0*sj3*x898)))),(((x897*x904*x906))+(((-1.0)*py*x901*x911))+((cj3*x898*x908))+(((-1.0)*x897*x903*x906))+(((-1.0)*x898*x908))+((x904*x911))+(((-1.0)*pz*x900))),IKFAST_ATAN2_MAGTHRESH);
if(!x914.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x913.value)))+(x914.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x915=IKsin(j1);
IkReal x916=IKcos(j1);
IkReal x917=(px*sj2);
IkReal x918=((0.3)*sj3);
IkReal x919=((0.09)*sj0);
IkReal x920=(cj2*px);
IkReal x921=((0.045)*cj3);
IkReal x922=((0.045)*cj2);
IkReal x923=(py*sj0);
IkReal x924=((0.045)*sj3);
IkReal x925=((1.0)*cj0);
IkReal x926=((0.3)*cj3);
IkReal x927=(py*sj2);
IkReal x928=(cj0*x916);
IkReal x929=(cj3*x915);
IkReal x930=(cj2*x916);
IkReal x931=(cj2*x915);
IkReal x932=(pz*x916);
IkReal x933=(cj0*px*x915);
evalcond[0]=((-0.55)+(((-1.0)*x924))+(((-1.0)*x926))+((x915*x923))+x933+x932);
evalcond[1]=(((sj0*x920))+((sj2*x916*x923))+((x917*x928))+(((-1.0)*pz*sj2*x915))+(((-1.0)*cj2*py*x925)));
evalcond[2]=(((x915*x922))+(((-0.55)*x916))+pz+(((-1.0)*x921*x931))+(((-1.0)*x916*x924))+(((-1.0)*x916*x926))+((x918*x931)));
evalcond[3]=((0.045)+(((-1.0)*x921))+(((-1.0)*x925*x927))+(((-1.0)*x923*x930))+(((-1.0)*x916*x920*x925))+((pz*x931))+((sj0*x917))+x918);
evalcond[4]=(((x915*x926))+((x915*x924))+((x916*x922))+(((-1.0)*px*x925))+(((-1.0)*x923))+(((0.55)*x915))+(((-1.0)*x921*x930))+((x918*x930)));
evalcond[5]=((-0.2125)+(((-0.09)*pz*x931))+(((1.1)*x915*x923))+(((1.1)*x933))+(((1.1)*x932))+(((-1.0)*pp))+((py*x919*x930))+(((0.09)*x920*x928))+(((0.09)*cj0*x927))+(((-1.0)*x917*x919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x934=cj0*cj0;
IkReal x935=py*py;
IkReal x936=px*px;
IkReal x937=(px*py);
IkReal x938=((1.0)*cj2);
IkReal x939=(cj0*sj2);
IkReal x940=(cj2*sj0);
IkReal x941=((0.3)*cj3);
IkReal x942=(pz*sj2);
IkReal x943=((0.045)*sj3);
IkReal x944=(sj2*x935);
IkReal x945=(py*sj0*sj2);
CheckValue<IkReal> x946=IKPowWithIntegerCheck(IKsign((((sj2*x934*x936))+(((-1.0)*x934*x944))+(((2.0)*sj0*x937*x939))+x944+((pz*x942)))),-1);
if(!x946.valid){
continue;
}
CheckValue<IkReal> x947 = IKatan2WithCheck(IkReal((((px*pz*x940))+(((0.55)*x945))+((x941*x945))+((x943*x945))+((px*x939*x941))+((px*x939*x943))+(((-1.0)*cj0*py*pz*x938))+(((0.55)*px*x939)))),(((cj0*x935*x940))+(((0.55)*x942))+((x941*x942))+((x942*x943))+(((2.0)*cj2*x934*x937))+(((-1.0)*x937*x938))+(((-1.0)*cj0*sj0*x936*x938))),IKFAST_ATAN2_MAGTHRESH);
if(!x947.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x946.value)))+(x947.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x948=IKsin(j1);
IkReal x949=IKcos(j1);
IkReal x950=(px*sj2);
IkReal x951=((0.3)*sj3);
IkReal x952=((0.09)*sj0);
IkReal x953=(cj2*px);
IkReal x954=((0.045)*cj3);
IkReal x955=((0.045)*cj2);
IkReal x956=(py*sj0);
IkReal x957=((0.045)*sj3);
IkReal x958=((1.0)*cj0);
IkReal x959=((0.3)*cj3);
IkReal x960=(py*sj2);
IkReal x961=(cj0*x949);
IkReal x962=(cj3*x948);
IkReal x963=(cj2*x949);
IkReal x964=(cj2*x948);
IkReal x965=(pz*x949);
IkReal x966=(cj0*px*x948);
evalcond[0]=((-0.55)+((x948*x956))+(((-1.0)*x957))+(((-1.0)*x959))+x966+x965);
evalcond[1]=((((-1.0)*cj2*py*x958))+((sj2*x949*x956))+((sj0*x953))+(((-1.0)*pz*sj2*x948))+((x950*x961)));
evalcond[2]=(((x951*x964))+(((-0.55)*x949))+((x948*x955))+pz+(((-1.0)*x949*x957))+(((-1.0)*x949*x959))+(((-1.0)*x954*x964)));
evalcond[3]=((0.045)+(((-1.0)*x956*x963))+((pz*x964))+(((-1.0)*x958*x960))+((sj0*x950))+(((-1.0)*x949*x953*x958))+(((-1.0)*x954))+x951);
evalcond[4]=(((x951*x963))+(((0.55)*x948))+((x949*x955))+(((-1.0)*x956))+((x948*x959))+((x948*x957))+(((-1.0)*px*x958))+(((-1.0)*x954*x963)));
evalcond[5]=((-0.2125)+(((0.09)*x953*x961))+(((1.1)*x948*x956))+((py*x952*x963))+(((-0.09)*pz*x964))+(((-1.0)*pp))+(((1.1)*x966))+(((1.1)*x965))+(((-1.0)*x950*x952))+(((0.09)*cj0*x960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x967=cj3*cj3;
IkReal x968=(cj2*sj3);
IkReal x969=(py*sj0);
IkReal x970=((0.3)*cj3);
IkReal x971=((0.045)*sj3);
IkReal x972=(cj0*px);
IkReal x973=(cj2*cj3);
IkReal x974=((0.045)*pz);
IkReal x975=((1.0)*pz);
CheckValue<IkReal> x976 = IKatan2WithCheck(IkReal(((-0.304525)+(((-0.0495)*sj3))+(((-0.027)*cj3*sj3))+(pz*pz)+(((-0.087975)*x967))+(((-0.33)*cj3)))),((((-1.0)*x969*x975))+(((-0.087975)*cj3*x968))+(((-0.167025)*x968))+(((0.01125)*x973))+(((-1.0)*x972*x975))+(((0.027)*cj2*x967))+(((-0.03825)*cj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x976.valid){
continue;
}
CheckValue<IkReal> x977=IKPowWithIntegerCheck(IKsign(((((-0.55)*x972))+(((-0.55)*x969))+(((-1.0)*x969*x971))+(((-1.0)*x969*x970))+(((-1.0)*cj2*x974))+(((-1.0)*x971*x972))+((x973*x974))+(((-1.0)*x970*x972))+(((-0.3)*pz*x968)))),-1);
if(!x977.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x976.value)+(((1.5707963267949)*(x977.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x978=IKsin(j1);
IkReal x979=IKcos(j1);
IkReal x980=(px*sj2);
IkReal x981=((0.3)*sj3);
IkReal x982=((0.09)*sj0);
IkReal x983=(cj2*px);
IkReal x984=((0.045)*cj3);
IkReal x985=((0.045)*cj2);
IkReal x986=(py*sj0);
IkReal x987=((0.045)*sj3);
IkReal x988=((1.0)*cj0);
IkReal x989=((0.3)*cj3);
IkReal x990=(py*sj2);
IkReal x991=(cj0*x979);
IkReal x992=(cj3*x978);
IkReal x993=(cj2*x979);
IkReal x994=(cj2*x978);
IkReal x995=(pz*x979);
IkReal x996=(cj0*px*x978);
evalcond[0]=((-0.55)+(((-1.0)*x989))+(((-1.0)*x987))+x996+x995+((x978*x986)));
evalcond[1]=((((-1.0)*cj2*py*x988))+((sj0*x983))+((x980*x991))+(((-1.0)*pz*sj2*x978))+((sj2*x979*x986)));
evalcond[2]=((((-0.55)*x979))+((x981*x994))+(((-1.0)*x984*x994))+pz+(((-1.0)*x979*x989))+(((-1.0)*x979*x987))+((x978*x985)));
evalcond[3]=((0.045)+(((-1.0)*x984))+(((-1.0)*x986*x993))+((pz*x994))+((sj0*x980))+(((-1.0)*x979*x983*x988))+x981+(((-1.0)*x988*x990)));
evalcond[4]=((((0.55)*x978))+(((-1.0)*px*x988))+(((-1.0)*x986))+((x979*x985))+((x981*x993))+(((-1.0)*x984*x993))+((x978*x989))+((x978*x987)));
evalcond[5]=((-0.2125)+(((1.1)*x996))+(((1.1)*x995))+(((1.1)*x978*x986))+(((0.09)*cj0*x990))+(((-1.0)*pp))+((py*x982*x993))+(((0.09)*x983*x991))+(((-1.0)*x980*x982))+(((-0.09)*pz*x994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x997=((0.045)*cj2);
IkReal x998=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
IkReal x999=((((0.3)*cj2*sj3))+(((-1.0)*cj3*x997))+x997);
CheckValue<IkReal> x1002 = IKatan2WithCheck(IkReal(x998),x999,IKFAST_ATAN2_MAGTHRESH);
if(!x1002.valid){
continue;
}
IkReal x1000=((1.0)*(x1002.value));
if((((x999*x999)+(x998*x998))) < -0.00001)
continue;
CheckValue<IkReal> x1003=IKPowWithIntegerCheck(IKabs(IKsqrt(((x999*x999)+(x998*x998)))),-1);
if(!x1003.valid){
continue;
}
if( ((pz*(x1003.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x1003.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1001=IKasin((pz*(x1003.value)));
j1array[0]=((((-1.0)*x1001))+(((-1.0)*x1000)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+x1001+(((-1.0)*x1000)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[2];
IkReal x1004=(((pp*sj1))+(((-1.0)*sj1*(pz*pz))));
j0eval[0]=x1004;
j0eval[1]=IKsign(x1004);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1005=(cj2*sj1);
IkReal x1006=((((-1.0)*pp*x1005))+((x1005*(pz*pz))));
j0eval[0]=x1006;
j0eval[1]=IKsign(x1006);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1007=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x1007;
j0eval[1]=IKsign(x1007);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1008=(cj1*px);
IkReal x1009=((0.3)*sj3);
IkReal x1010=(cj1*py);
IkReal x1011=(pz*sj1);
IkReal x1012=((0.045)*cj3);
IkReal x1013=(((cj1*pp))+(((-1.0)*cj1*(pz*pz))));
j0eval[0]=x1013;
j0eval[1]=((IKabs(((((-1.0)*x1010*x1012))+((x1009*x1010))+(((0.045)*x1010))+((px*x1011)))))+(IKabs(((((-0.045)*x1008))+(((-1.0)*x1008*x1009))+((py*x1011))+((x1008*x1012))))));
j0eval[2]=IKsign(x1013);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1014=pz*pz;
IkReal x1015=((1.1)*pz);
IkReal x1016=(cj1*pp);
IkReal x1017=((0.2125)*cj1);
IkReal x1018=(cj1*x1014);
IkReal x1019=((0.09)*pz*sj1);
j0eval[0]=(x1016+(((-1.0)*x1018)));
j0eval[1]=((IKabs(((((-1.0)*py*x1015))+((py*x1017))+((py*x1016))+((px*x1019)))))+(IKabs(((((-1.0)*px*x1017))+(((-1.0)*px*x1016))+((py*x1019))+((px*x1015))))));
j0eval[2]=IKsign(((((0.09)*x1016))+(((-0.09)*x1018))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1020=((0.3)*sj3);
IkReal x1021=(py*sj1);
IkReal x1022=((0.3)*cj3);
IkReal x1023=(px*sj1);
IkReal x1024=((0.045)*sj3);
IkReal x1025=((0.045)*px);
IkReal x1026=((0.045)*py);
IkReal x1027=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x1027;
j0eval[1]=((IKabs(((((-1.0)*x1025))+((x1021*x1024))+((x1021*x1022))+(((0.55)*x1021))+(((-1.0)*px*x1020))+((cj3*x1025)))))+(IKabs((((py*x1020))+x1026+((x1023*x1024))+((x1022*x1023))+(((-1.0)*cj3*x1026))+(((0.55)*x1023))))));
j0eval[2]=IKsign(x1027);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x1028=pz*pz;
IkReal x1029=sj3*sj3;
IkReal x1030=cj3*cj3;
IkReal x1031=((4.26078431372549)*cj3);
IkReal x1032=(x1028+(((-1.0)*pp)));
IkReal x1033=((1.20294117647059)*x1030);
IkReal x1034=((1.20294117647059)*x1029);
j0eval[0]=x1032;
j0eval[1]=((((-1.0)*x1028*x1033))+(((-1.0)*x1028*x1031))+(((-1.0)*x1028*x1034))+((pp*sj3))+((pp*x1034))+((pp*x1031))+((pp*x1033))+(((3.98071895424837)*pp))+(((-3.98071895424837)*x1028))+(((-1.0)*sj3*x1028)));
j0eval[2]=IKsign(x1032);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x1035=pz*pz;
IkReal x1036=((0.00405)*sj3);
IkReal x1037=((0.33)*cj3);
IkReal x1038=((0.027)*cj3);
IkReal x1039=((0.0495)*sj3);
j0eval[0]=((((-1.0)*x1035))+pp);
j0eval[1]=IKsign(((((-0.09)*x1035))+(((0.09)*pp))));
j0eval[2]=((IKabs(((((-1.0)*py*x1037))+(((-1.0)*py*x1039))+((px*x1038))+((px*x1036))+(((0.0495)*px))+(((-0.3925)*py))+((pp*py)))))+(IKabs(((((-1.0)*pp*px))+((px*x1039))+((px*x1037))+(((0.0495)*py))+((py*x1038))+((py*x1036))+(((0.3925)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x1040=pz*pz;
IkReal x1041=(cj3*py);
IkReal x1042=(py*sj3);
IkReal x1043=((1.0)*pp);
IkReal x1044=(cj3*px);
IkReal x1045=(px*sj3);
j0eval[0]=(x1040+(((-1.0)*x1043)));
j0eval[1]=IKsign(((((1.1)*x1040))+(((-1.1)*pp))));
j0eval[2]=((IKabs(((((-1.0)*px*x1043))+(((-0.0495)*py))+(((0.027)*x1045))+(((-0.00405)*x1044))+(((0.0495)*x1041))+(((-0.33)*x1042))+(((-0.20845)*px)))))+(IKabs(((((0.33)*x1045))+(((0.0495)*px))+(((0.027)*x1042))+(((-1.0)*py*x1043))+(((-0.0495)*x1044))+(((-0.00405)*x1041))+(((-0.20845)*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1046=((0.045)*sj3);
IkReal x1047=((0.3)*cj3);
IkReal x1048=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x1049=(x1047+x1046);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-1.0)*x1049)));
evalcond[2]=x1048;
evalcond[3]=x1048;
evalcond[4]=((0.55)+x1049);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1050=(cj3*py);
IkReal x1051=(py*sj3);
IkReal x1052=((1.0)*pp);
IkReal x1053=(cj3*px);
IkReal x1054=(px*sj3);
CheckValue<IkReal> x1055=IKPowWithIntegerCheck(IKsign(((((-1.1)*pp))+(((1.1)*(pz*pz))))),-1);
if(!x1055.valid){
continue;
}
CheckValue<IkReal> x1056 = IKatan2WithCheck(IkReal(((((0.33)*x1054))+(((0.0495)*px))+(((0.027)*x1051))+(((-1.0)*py*x1052))+(((-0.0495)*x1053))+(((-0.00405)*x1050))+(((-0.20845)*py)))),((((-1.0)*px*x1052))+(((-0.0495)*py))+(((0.027)*x1054))+(((-0.00405)*x1053))+(((0.0495)*x1050))+(((-0.33)*x1051))+(((-0.20845)*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x1056.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1055.value)))+(x1056.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1057=IKsin(j0);
IkReal x1058=IKcos(j0);
IkReal x1059=(px*x1057);
IkReal x1060=(py*x1058);
IkReal x1061=(px*x1058);
IkReal x1062=(py*x1057);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1061+x1062+(((-0.3)*cj3)));
evalcond[1]=((0.045)+x1059+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x1060)));
evalcond[2]=((-0.2125)+(((0.09)*x1060))+(((1.1)*x1062))+(((1.1)*x1061))+(((-1.0)*pp))+(((-0.09)*x1059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1063=((0.33)*cj3);
IkReal x1064=((0.027)*cj3);
IkReal x1065=((0.00405)*sj3);
IkReal x1066=((0.0495)*sj3);
CheckValue<IkReal> x1067 = IKatan2WithCheck(IkReal(((((-1.0)*pp*px))+(((0.0495)*py))+((py*x1064))+((py*x1065))+((px*x1063))+((px*x1066))+(((0.3925)*px)))),((((0.0495)*px))+(((-1.0)*py*x1063))+(((-1.0)*py*x1066))+((px*x1064))+((px*x1065))+(((-0.3925)*py))+((pp*py))),IKFAST_ATAN2_MAGTHRESH);
if(!x1067.valid){
continue;
}
CheckValue<IkReal> x1068=IKPowWithIntegerCheck(IKsign(((((-0.09)*(pz*pz)))+(((0.09)*pp)))),-1);
if(!x1068.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1067.value)+(((1.5707963267949)*(x1068.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1069=IKsin(j0);
IkReal x1070=IKcos(j0);
IkReal x1071=(px*x1069);
IkReal x1072=(py*x1070);
IkReal x1073=(px*x1070);
IkReal x1074=(py*x1069);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1074+x1073+(((-0.3)*cj3)));
evalcond[1]=((0.045)+x1071+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x1072)));
evalcond[2]=((-0.2125)+(((0.09)*x1072))+(((1.1)*x1074))+(((1.1)*x1073))+(((-1.0)*pp))+(((-0.09)*x1071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1075=((0.3)*py);
IkReal x1076=((0.045)*px);
IkReal x1077=((0.045)*py);
IkReal x1078=((0.3)*px);
CheckValue<IkReal> x1079=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1079.valid){
continue;
}
CheckValue<IkReal> x1080 = IKatan2WithCheck(IkReal(((((-0.55)*py))+x1076+((sj3*x1078))+(((-1.0)*sj3*x1077))+(((-1.0)*cj3*x1076))+(((-1.0)*cj3*x1075)))),((((-0.55)*px))+((cj3*x1077))+(((-1.0)*sj3*x1076))+(((-1.0)*sj3*x1075))+(((-1.0)*cj3*x1078))+(((-1.0)*x1077))),IKFAST_ATAN2_MAGTHRESH);
if(!x1080.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1079.value)))+(x1080.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1081=IKsin(j0);
IkReal x1082=IKcos(j0);
IkReal x1083=(px*x1081);
IkReal x1084=(py*x1082);
IkReal x1085=(px*x1082);
IkReal x1086=(py*x1081);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1086+x1085+(((-0.3)*cj3)));
evalcond[1]=((0.045)+x1083+(((-1.0)*x1084))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1083))+(((-1.0)*pp))+(((1.1)*x1086))+(((1.1)*x1085))+(((0.09)*x1084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x1087=pz*pz;
IkReal x1088=sj3*sj3;
IkReal x1089=cj3*cj3;
IkReal x1090=((4.26078431372549)*cj3);
IkReal x1091=((((-1.0)*x1087))+pp);
IkReal x1092=((1.20294117647059)*x1089);
IkReal x1093=((1.0)*x1087);
IkReal x1094=((1.20294117647059)*x1088);
j0eval[0]=x1091;
j0eval[1]=(((pp*sj3))+((pp*x1092))+((pp*x1090))+((pp*x1094))+(((-3.98071895424837)*x1087))+(((-1.0)*x1087*x1094))+(((-1.0)*x1087*x1090))+(((-1.0)*x1087*x1092))+(((-1.0)*sj3*x1093))+(((3.98071895424837)*pp)));
j0eval[2]=IKsign(x1091);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x1095=pz*pz;
IkReal x1096=((0.00405)*sj3);
IkReal x1097=((0.33)*cj3);
IkReal x1098=((0.027)*cj3);
IkReal x1099=((0.0495)*sj3);
j0eval[0]=((((-1.0)*x1095))+pp);
j0eval[1]=IKsign(((((-0.09)*x1095))+(((0.09)*pp))));
j0eval[2]=((IKabs(((((-1.0)*py*x1097))+(((-1.0)*py*x1099))+(((-0.0495)*px))+(((-0.3925)*py))+((pp*py))+(((-1.0)*px*x1096))+(((-1.0)*px*x1098)))))+(IKabs(((((-1.0)*pp*px))+(((-1.0)*py*x1096))+(((-1.0)*py*x1098))+(((-0.0495)*py))+(((0.3925)*px))+((px*x1097))+((px*x1099))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x1100=pz*pz;
IkReal x1101=(cj3*py);
IkReal x1102=(py*sj3);
IkReal x1103=((1.0)*pp);
IkReal x1104=(cj3*px);
IkReal x1105=(px*sj3);
j0eval[0]=((((-1.0)*x1100))+pp);
j0eval[1]=IKsign(((((1.1)*pp))+(((-1.1)*x1100))));
j0eval[2]=((IKabs(((((0.027)*x1105))+(((-1.0)*px*x1103))+(((-0.00405)*x1104))+(((-0.0495)*x1101))+(((0.0495)*py))+(((0.33)*x1102))+(((-0.20845)*px)))))+(IKabs(((((0.027)*x1102))+(((-0.00405)*x1101))+(((-0.0495)*px))+(((-1.0)*py*x1103))+(((-0.33)*x1105))+(((0.0495)*x1104))+(((-0.20845)*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1106=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x1107=x998;
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=x1107;
evalcond[2]=x1106;
evalcond[3]=x1106;
evalcond[4]=x1107;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1108=(cj3*py);
IkReal x1109=(py*sj3);
IkReal x1110=((1.0)*pp);
IkReal x1111=(cj3*px);
IkReal x1112=(px*sj3);
CheckValue<IkReal> x1113 = IKatan2WithCheck(IkReal(((((0.027)*x1109))+(((-0.00405)*x1108))+(((-0.0495)*px))+(((-0.33)*x1112))+(((-1.0)*py*x1110))+(((0.0495)*x1111))+(((-0.20845)*py)))),((((0.027)*x1112))+(((-1.0)*px*x1110))+(((-0.00405)*x1111))+(((-0.0495)*x1108))+(((0.0495)*py))+(((0.33)*x1109))+(((-0.20845)*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x1113.valid){
continue;
}
CheckValue<IkReal> x1114=IKPowWithIntegerCheck(IKsign(((((-1.1)*(pz*pz)))+(((1.1)*pp)))),-1);
if(!x1114.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1113.value)+(((1.5707963267949)*(x1114.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1115=IKcos(j0);
IkReal x1116=IKsin(j0);
IkReal x1117=(px*x1116);
IkReal x1118=((1.0)*x1115);
IkReal x1119=(py*x1116);
evalcond[0]=((0.045)+x1117+(((-0.045)*cj3))+(((-1.0)*py*x1118))+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*px*x1118))+(((-0.3)*cj3))+(((-1.0)*x1119)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1115))+(((-1.0)*pp))+(((-1.1)*x1119))+(((-1.1)*px*x1115))+(((-0.09)*x1117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1120=((0.00405)*sj3);
IkReal x1121=((0.33)*cj3);
IkReal x1122=((0.027)*cj3);
IkReal x1123=((0.0495)*sj3);
CheckValue<IkReal> x1124=IKPowWithIntegerCheck(IKsign(((((-0.09)*(pz*pz)))+(((0.09)*pp)))),-1);
if(!x1124.valid){
continue;
}
CheckValue<IkReal> x1125 = IKatan2WithCheck(IkReal(((((-1.0)*pp*px))+((px*x1123))+((px*x1121))+(((-0.0495)*py))+(((-1.0)*py*x1120))+(((-1.0)*py*x1122))+(((0.3925)*px)))),((((-0.0495)*px))+(((-1.0)*py*x1123))+(((-1.0)*py*x1121))+(((-0.3925)*py))+((pp*py))+(((-1.0)*px*x1122))+(((-1.0)*px*x1120))),IKFAST_ATAN2_MAGTHRESH);
if(!x1125.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1124.value)))+(x1125.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1126=IKcos(j0);
IkReal x1127=IKsin(j0);
IkReal x1128=(px*x1127);
IkReal x1129=((1.0)*x1126);
IkReal x1130=(py*x1127);
evalcond[0]=((0.045)+x1128+(((-0.045)*cj3))+(((-1.0)*py*x1129))+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1130))+(((-1.0)*px*x1129)));
evalcond[2]=((-0.2125)+(((-1.1)*px*x1126))+(((-1.0)*pp))+(((-0.09)*x1128))+(((-1.1)*x1130))+(((0.09)*py*x1126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1131=((0.3)*py);
IkReal x1132=((0.045)*px);
IkReal x1133=((0.045)*py);
IkReal x1134=((0.3)*px);
CheckValue<IkReal> x1135=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1135.valid){
continue;
}
CheckValue<IkReal> x1136 = IKatan2WithCheck(IkReal(((((-0.55)*py))+((cj3*x1132))+(((-1.0)*sj3*x1134))+(((-1.0)*sj3*x1133))+(((-1.0)*x1132))+(((-1.0)*cj3*x1131)))),((((-0.55)*px))+x1133+(((-1.0)*sj3*x1132))+(((-1.0)*cj3*x1134))+(((-1.0)*cj3*x1133))+((sj3*x1131))),IKFAST_ATAN2_MAGTHRESH);
if(!x1136.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1135.value)))+(x1136.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1137=IKcos(j0);
IkReal x1138=IKsin(j0);
IkReal x1139=(px*x1138);
IkReal x1140=((1.0)*x1137);
IkReal x1141=(py*x1138);
evalcond[0]=((0.045)+x1139+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*py*x1140)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*px*x1140))+(((-0.3)*cj3))+(((-1.0)*x1141)));
evalcond[2]=((-0.2125)+(((-1.1)*px*x1137))+(((-1.1)*x1141))+(((-1.0)*pp))+(((-0.09)*x1139))+(((0.09)*py*x1137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1142=(cj1*pz);
IkReal x1143=((0.3)*cj3);
IkReal x1144=((0.045)*sj3);
IkReal x1145=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+x1142+(((-1.0)*x1144))+(((-1.0)*x1143)));
evalcond[2]=x1145;
evalcond[3]=((-1.0)*pz*sj1);
evalcond[4]=x1145;
evalcond[5]=(((sj1*x1144))+((sj1*x1143))+(((0.55)*sj1)));
evalcond[6]=((-0.2125)+(((1.1)*x1142))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1146=((-1.0)*py);
sj2=1.0;
cj2=0;
j2=1.5707963267949;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1146);
rxp0_1=(px*r20);
rxp1_0=(r21*x1146);
rxp1_1=(px*r21);
rxp2_0=(r22*x1146);
rxp2_1=(px*r22);
IkReal x1147=px*px;
IkReal x1148=py*py;
IkReal x1149=(sj1*x1147);
IkReal x1150=(sj1*x1148);
j0eval[0]=(x1149+x1150);
j0eval[1]=IKsign(((((20.0)*x1150))+(((20.0)*x1149))));
j0eval[2]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[4];
IkReal x1151=((-1.0)*py);
sj2=1.0;
cj2=0;
j2=1.5707963267949;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1151);
rxp0_1=(px*r20);
rxp1_0=(r21*x1151);
rxp1_1=(px*r21);
rxp2_0=(r22*x1151);
rxp2_1=(px*r22);
IkReal x1152=px*px;
IkReal x1153=py*py;
j0eval[0]=(x1153+x1152);
j0eval[1]=289.0;
j0eval[2]=sj1;
j0eval[3]=IKsign(((((20.0)*x1152))+(((20.0)*x1153))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x1154=((-1.0)*py);
sj2=1.0;
cj2=0;
j2=1.5707963267949;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1154);
rxp0_1=(px*r20);
rxp1_0=(r21*x1154);
rxp1_1=(px*r21);
rxp2_0=(r22*x1154);
rxp2_1=(px*r22);
IkReal x1155=py*py;
IkReal x1156=px*px;
j0eval[0]=(x1155+x1156);
j0eval[1]=IKsign(((((0.09)*x1155))+(((0.09)*x1156))));
j0eval[2]=((IKabs(((((80.0)*(py*py*py)))+(((80.0)*py*x1156))+(((17.0)*py)))))+(IKabs(((((-80.0)*(px*px*px)))+(((-80.0)*px*x1155))+(((-17.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=((0.85)*sj1);
evalcond[4]=-0.2125;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=-0.85;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1157=((-1.0)*py);
sj2=1.0;
cj2=0;
j2=1.5707963267949;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1157);
rxp0_1=(px*r20);
rxp1_0=(r21*x1157);
rxp1_1=(px*r21);
rxp2_0=(r22*x1157);
rxp2_1=(px*r22);
sj1=0;
cj1=1.0;
j1=0;
IkReal x1158=py*py;
IkReal x1159=px*px;
j0eval[0]=(x1159+x1158);
j0eval[1]=((IKabs(((((-80.0)*(px*px*px)))+(((-80.0)*px*x1158))+(((-17.0)*px)))))+(IKabs(((((80.0)*(py*py*py)))+(((80.0)*py*x1159))+(((17.0)*py))))));
j0eval[2]=IKsign(((((9.0)*x1159))+(((9.0)*x1158))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
evalcond[1]=0;
evalcond[2]=-0.2125;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=-0.2125;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1160=py*py;
IkReal x1161=px*px;
CheckValue<IkReal> x1162=IKPowWithIntegerCheck(IKsign(((((9.0)*x1160))+(((9.0)*x1161)))),-1);
if(!x1162.valid){
continue;
}
CheckValue<IkReal> x1163 = IKatan2WithCheck(IkReal(((((-100.0)*px*x1160))+(((-100.0)*(px*px*px)))+(((-21.25)*px)))),((((21.25)*py))+(((100.0)*py*x1161))+(((100.0)*(py*py*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1163.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1162.value)))+(x1163.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1164=IKsin(j0);
IkReal x1165=IKcos(j0);
IkReal x1166=(px*x1164);
IkReal x1167=(py*x1165);
evalcond[0]=(((px*x1165))+((py*x1164)));
evalcond[1]=(x1166+(((-1.0)*x1167)));
evalcond[2]=((-0.2125)+(((-1.0)*(px*px)))+(((0.09)*x1167))+(((-0.09)*x1166))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=-0.85;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1168=((-1.0)*py);
sj2=1.0;
cj2=0;
j2=1.5707963267949;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1168);
rxp0_1=(px*r20);
rxp1_0=(r21*x1168);
rxp1_1=(px*r21);
rxp2_0=(r22*x1168);
rxp2_1=(px*r22);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x1169=py*py;
IkReal x1170=px*px;
j0eval[0]=(x1169+x1170);
j0eval[1]=((IKabs(((((-80.0)*(px*px*px)))+(((-17.0)*px))+(((-80.0)*px*x1169)))))+(IKabs(((((80.0)*(py*py*py)))+(((17.0)*py))+(((80.0)*py*x1170))))));
j0eval[2]=IKsign(((((9.0)*x1169))+(((9.0)*x1170))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
evalcond[1]=0;
evalcond[2]=-0.2125;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=-0.2125;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1171=py*py;
IkReal x1172=px*px;
CheckValue<IkReal> x1173 = IKatan2WithCheck(IkReal(((((-100.0)*(px*px*px)))+(((-21.25)*px))+(((-100.0)*px*x1171)))),((((21.25)*py))+(((100.0)*py*x1172))+(((100.0)*(py*py*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1173.valid){
continue;
}
CheckValue<IkReal> x1174=IKPowWithIntegerCheck(IKsign(((((9.0)*x1172))+(((9.0)*x1171)))),-1);
if(!x1174.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1173.value)+(((1.5707963267949)*(x1174.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1175=IKcos(j0);
IkReal x1176=IKsin(j0);
IkReal x1177=(px*x1176);
IkReal x1178=((1.0)*x1175);
evalcond[0]=(x1177+(((-1.0)*py*x1178)));
evalcond[1]=((((-1.0)*py*x1176))+(((-1.0)*px*x1178)));
evalcond[2]=((-0.2125)+(((-1.0)*(px*px)))+(((-0.09)*x1177))+(((-1.0)*(py*py)))+(((0.09)*py*x1175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=((0.85)*sj1);
evalcond[4]=-0.2125;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1179=py*py;
IkReal x1180=px*px;
CheckValue<IkReal> x1181 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1179))+(((-0.2125)*px))+(((-1.0)*(px*px*px))))),(((py*x1180))+(py*py*py)+(((0.2125)*py))),IKFAST_ATAN2_MAGTHRESH);
if(!x1181.valid){
continue;
}
CheckValue<IkReal> x1182=IKPowWithIntegerCheck(IKsign(((((0.09)*x1179))+(((0.09)*x1180)))),-1);
if(!x1182.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1181.value)+(((1.5707963267949)*(x1182.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1183=IKcos(j0);
IkReal x1184=IKsin(j0);
IkReal x1185=((1.0)*py);
IkReal x1186=((1.1)*sj1);
IkReal x1187=(px*x1184);
IkReal x1188=(px*x1183);
IkReal x1189=(py*x1184);
evalcond[0]=(x1187+(((-1.0)*x1183*x1185)));
evalcond[1]=(((cj1*x1188))+((cj1*x1189)));
evalcond[2]=((-0.85)+((sj1*x1189))+((sj1*x1188)));
evalcond[3]=((((-1.0)*x1184*x1185))+(((0.85)*sj1))+(((-1.0)*x1188)));
evalcond[4]=((-0.2125)+(((-0.09)*x1187))+((x1186*x1188))+((x1186*x1189))+(((-1.0)*(px*px)))+(((-1.0)*py*x1185))+(((0.09)*py*x1183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1190=((17.0)*sj1);
CheckValue<IkReal> x1191 = IKatan2WithCheck(IkReal((py*x1190)),(px*x1190),IKFAST_ATAN2_MAGTHRESH);
if(!x1191.valid){
continue;
}
CheckValue<IkReal> x1192=IKPowWithIntegerCheck(IKsign(((((20.0)*(px*px)))+(((20.0)*(py*py))))),-1);
if(!x1192.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1191.value)+(((1.5707963267949)*(x1192.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1193=IKcos(j0);
IkReal x1194=IKsin(j0);
IkReal x1195=((1.0)*py);
IkReal x1196=((1.1)*sj1);
IkReal x1197=(px*x1194);
IkReal x1198=(px*x1193);
IkReal x1199=(py*x1194);
evalcond[0]=(x1197+(((-1.0)*x1193*x1195)));
evalcond[1]=(((cj1*x1198))+((cj1*x1199)));
evalcond[2]=((-0.85)+((sj1*x1198))+((sj1*x1199)));
evalcond[3]=((((-1.0)*x1194*x1195))+(((0.85)*sj1))+(((-1.0)*x1198)));
evalcond[4]=((-0.2125)+(((-1.0)*(px*px)))+(((-1.0)*py*x1195))+((x1196*x1199))+((x1196*x1198))+(((0.09)*py*x1193))+(((-0.09)*x1197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1200=((20.0)*sj1);
CheckValue<IkReal> x1201 = IKatan2WithCheck(IkReal(((17.0)*py)),((17.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x1201.valid){
continue;
}
CheckValue<IkReal> x1202=IKPowWithIntegerCheck(IKsign((((x1200*(px*px)))+((x1200*(py*py))))),-1);
if(!x1202.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1201.value)+(((1.5707963267949)*(x1202.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1203=IKcos(j0);
IkReal x1204=IKsin(j0);
IkReal x1205=((1.0)*py);
IkReal x1206=((1.1)*sj1);
IkReal x1207=(px*x1204);
IkReal x1208=(px*x1203);
IkReal x1209=(py*x1204);
evalcond[0]=(x1207+(((-1.0)*x1203*x1205)));
evalcond[1]=(((cj1*x1209))+((cj1*x1208)));
evalcond[2]=((-0.85)+((sj1*x1208))+((sj1*x1209)));
evalcond[3]=((((-1.0)*x1204*x1205))+(((0.85)*sj1))+(((-1.0)*x1208)));
evalcond[4]=((-0.2125)+(((-1.0)*(px*px)))+(((-0.09)*x1207))+(((0.09)*py*x1203))+((x1206*x1208))+((x1206*x1209))+(((-1.0)*py*x1205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((-0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3=0;
sj3=0;
cj3=1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x1210=pz*pz;
IkReal x1211=((400.0)*pp);
j0eval[0]=(pp+(((-1.0)*x1210)));
j0eval[1]=IKsign(((((9.0)*pp))+(((-9.0)*x1210))));
j0eval[2]=((IKabs(((((-289.0)*py))+((py*x1211)))))+(IKabs(((((-1.0)*px*x1211))+(((289.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((0.7225)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1212=((100.0)*pp);
CheckValue<IkReal> x1213 = IKatan2WithCheck(IkReal(((((72.25)*px))+(((-1.0)*px*x1212)))),((((-72.25)*py))+((py*x1212))),IKFAST_ATAN2_MAGTHRESH);
if(!x1213.valid){
continue;
}
CheckValue<IkReal> x1214=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1214.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1213.value)+(((1.5707963267949)*(x1214.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1215=IKsin(j0);
IkReal x1216=IKcos(j0);
IkReal x1217=(px*x1215);
IkReal x1218=(py*x1216);
evalcond[0]=(((px*x1216))+((py*x1215)));
evalcond[1]=(x1217+(((-1.0)*x1218)));
evalcond[2]=((0.7225)+(((-0.09)*x1217))+(((0.09)*x1218))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((-0.85)+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3=0;
sj3=0;
cj3=1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x1219=pz*pz;
IkReal x1220=((400.0)*pp);
j0eval[0]=(pp+(((-1.0)*x1219)));
j0eval[1]=IKsign(((((9.0)*pp))+(((-9.0)*x1219))));
j0eval[2]=((IKabs(((((-289.0)*py))+((py*x1220)))))+(IKabs(((((-1.0)*px*x1220))+(((289.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((0.7225)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1221=((100.0)*pp);
CheckValue<IkReal> x1222=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1222.valid){
continue;
}
CheckValue<IkReal> x1223 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1221))+(((72.25)*px)))),(((py*x1221))+(((-72.25)*py))),IKFAST_ATAN2_MAGTHRESH);
if(!x1223.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1222.value)))+(x1223.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1224=IKcos(j0);
IkReal x1225=IKsin(j0);
IkReal x1226=(px*x1225);
IkReal x1227=((1.0)*x1224);
evalcond[0]=(x1226+(((-1.0)*py*x1227)));
evalcond[1]=((((-1.0)*px*x1227))+(((-1.0)*py*x1225)));
evalcond[2]=((0.7225)+(((-0.09)*x1226))+(((0.09)*py*x1224))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1228=((0.3)*py);
IkReal x1229=(cj3*sj1);
IkReal x1230=(px*sj1);
IkReal x1231=((0.3)*px);
IkReal x1232=((0.045)*py);
IkReal x1233=((0.045)*px);
CheckValue<IkReal> x1234=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1234.valid){
continue;
}
CheckValue<IkReal> x1235 = IKatan2WithCheck(IkReal((((cj3*x1233))+(((0.55)*py*sj1))+(((-1.0)*x1233))+(((-1.0)*sj3*x1231))+((x1228*x1229))+((sj1*sj3*x1232)))),(x1232+((sj3*x1228))+(((0.045)*sj3*x1230))+(((0.55)*x1230))+(((-1.0)*cj3*x1232))+((x1229*x1231))),IKFAST_ATAN2_MAGTHRESH);
if(!x1235.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1234.value)))+(x1235.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1236=IKsin(j0);
IkReal x1237=IKcos(j0);
IkReal x1238=((0.3)*cj3);
IkReal x1239=((0.045)*sj3);
IkReal x1240=(cj1*pz);
IkReal x1241=(px*x1236);
IkReal x1242=(px*x1237);
IkReal x1243=(py*x1236);
IkReal x1244=(py*x1237);
IkReal x1245=(sj1*x1243);
evalcond[0]=(((cj1*x1243))+((cj1*x1242))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+x1241+(((-1.0)*x1244))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.55)+x1240+x1245+(((-1.0)*x1239))+(((-1.0)*x1238))+((sj1*x1242)));
evalcond[3]=(((sj1*x1239))+((sj1*x1238))+(((-1.0)*x1243))+(((-1.0)*x1242))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((0.09)*x1244))+(((1.1)*x1240))+(((1.1)*x1245))+(((-1.0)*pp))+(((1.1)*sj1*x1242))+(((-0.09)*x1241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1246=((1.1)*pz);
IkReal x1247=((0.09)*cj1);
IkReal x1248=((0.2125)*cj1);
IkReal x1249=(cj1*pp);
IkReal x1250=((0.09)*pz*sj1);
CheckValue<IkReal> x1251 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1248))+(((-1.0)*px*x1249))+((px*x1246))+((py*x1250)))),((((-1.0)*py*x1246))+((py*x1248))+((py*x1249))+((px*x1250))),IKFAST_ATAN2_MAGTHRESH);
if(!x1251.valid){
continue;
}
CheckValue<IkReal> x1252=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1247*(pz*pz)))+((pp*x1247)))),-1);
if(!x1252.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1251.value)+(((1.5707963267949)*(x1252.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1253=IKsin(j0);
IkReal x1254=IKcos(j0);
IkReal x1255=((0.3)*cj3);
IkReal x1256=((0.045)*sj3);
IkReal x1257=(cj1*pz);
IkReal x1258=(px*x1253);
IkReal x1259=(px*x1254);
IkReal x1260=(py*x1253);
IkReal x1261=(py*x1254);
IkReal x1262=(sj1*x1260);
evalcond[0]=(((cj1*x1259))+((cj1*x1260))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+x1258+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x1261)));
evalcond[2]=((-0.55)+(((-1.0)*x1255))+(((-1.0)*x1256))+x1262+x1257+((sj1*x1259)));
evalcond[3]=(((sj1*x1255))+((sj1*x1256))+(((0.55)*sj1))+(((-1.0)*x1260))+(((-1.0)*x1259)));
evalcond[4]=((-0.2125)+(((1.1)*sj1*x1259))+(((-0.09)*x1258))+(((-1.0)*pp))+(((1.1)*x1257))+(((0.09)*x1261))+(((1.1)*x1262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1263=((0.045)*cj1);
IkReal x1264=(pz*sj1);
IkReal x1265=((0.3)*cj1*sj3);
CheckValue<IkReal> x1266=IKPowWithIntegerCheck(IKsign((((cj1*pp))+(((-1.0)*cj1*(pz*pz))))),-1);
if(!x1266.valid){
continue;
}
CheckValue<IkReal> x1267 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1265))+(((-1.0)*px*x1263))+((cj3*px*x1263))+((py*x1264)))),((((-1.0)*cj3*py*x1263))+((px*x1264))+((py*x1263))+((py*x1265))),IKFAST_ATAN2_MAGTHRESH);
if(!x1267.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1266.value)))+(x1267.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1268=IKsin(j0);
IkReal x1269=IKcos(j0);
IkReal x1270=((0.3)*cj3);
IkReal x1271=((0.045)*sj3);
IkReal x1272=(cj1*pz);
IkReal x1273=(px*x1268);
IkReal x1274=(px*x1269);
IkReal x1275=(py*x1268);
IkReal x1276=(py*x1269);
IkReal x1277=(sj1*x1275);
evalcond[0]=(((cj1*x1275))+((cj1*x1274))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+x1273+(((-0.045)*cj3))+(((-1.0)*x1276))+(((0.3)*sj3)));
evalcond[2]=((-0.55)+x1272+x1277+(((-1.0)*x1271))+(((-1.0)*x1270))+((sj1*x1274)));
evalcond[3]=(((sj1*x1271))+((sj1*x1270))+(((-1.0)*x1275))+(((-1.0)*x1274))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((-0.09)*x1273))+(((1.1)*sj1*x1274))+(((0.09)*x1276))+(((-1.0)*pp))+(((1.1)*x1272))+(((1.1)*x1277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1278=((0.045)*cj1);
IkReal x1279=(pz*sj1);
IkReal x1280=((0.3)*cj1*sj3);
IkReal x1281=(((cj1*pp))+(((-1.0)*cj1*(pz*pz))));
j0eval[0]=x1281;
j0eval[1]=IKsign(x1281);
j0eval[2]=((IKabs(((((-1.0)*py*x1278))+((cj3*py*x1278))+((px*x1279))+(((-1.0)*py*x1280)))))+(IKabs((((py*x1279))+(((-1.0)*cj3*px*x1278))+((px*x1280))+((px*x1278))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1282=pz*pz;
IkReal x1283=(cj1*pp);
IkReal x1284=((1.1)*pz);
IkReal x1285=((0.2125)*cj1);
IkReal x1286=(cj1*x1282);
IkReal x1287=((0.09)*pz*sj1);
j0eval[0]=((((-1.0)*x1283))+x1286);
j0eval[1]=((IKabs(((((-1.0)*px*x1285))+((px*x1284))+(((-1.0)*px*x1283))+(((-1.0)*py*x1287)))))+(IKabs(((((-1.0)*px*x1287))+((py*x1285))+((py*x1283))+(((-1.0)*py*x1284))))));
j0eval[2]=IKsign(((((-0.09)*x1283))+(((0.09)*x1286))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1288=((0.3)*py);
IkReal x1289=(cj3*sj1);
IkReal x1290=((0.55)*sj1);
IkReal x1291=((0.3)*px);
IkReal x1292=((0.045)*py);
IkReal x1293=(sj1*sj3);
IkReal x1294=((0.045)*px);
IkReal x1295=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x1295;
j0eval[1]=((IKabs(((((-1.0)*x1292))+((cj3*x1292))+((x1293*x1294))+(((-1.0)*sj3*x1288))+((px*x1290))+((x1289*x1291)))))+(IKabs((((x1288*x1289))+x1294+((sj3*x1291))+((py*x1290))+(((-1.0)*cj3*x1294))+((x1292*x1293))))));
j0eval[2]=IKsign(x1295);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x1296=pz*pz;
IkReal x1297=sj3*sj3;
IkReal x1298=cj3*cj3;
IkReal x1299=((4.26078431372549)*cj3);
IkReal x1300=(x1296+(((-1.0)*pp)));
IkReal x1301=((1.20294117647059)*x1298);
IkReal x1302=((1.20294117647059)*x1297);
j0eval[0]=x1300;
j0eval[1]=((((-3.98071895424837)*x1296))+((pp*x1301))+((pp*x1302))+(((-1.0)*sj3*x1296))+((pp*sj3))+(((-1.0)*x1296*x1301))+(((-1.0)*x1296*x1302))+(((3.98071895424837)*pp))+((pp*x1299))+(((-1.0)*x1296*x1299)));
j0eval[2]=IKsign(x1300);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x1303=pz*pz;
IkReal x1304=((0.33)*cj3);
IkReal x1305=((1.0)*pp);
IkReal x1306=((0.027)*cj3);
IkReal x1307=((0.00405)*sj3);
IkReal x1308=((0.0495)*sj3);
j0eval[0]=(x1303+(((-1.0)*x1305)));
j0eval[1]=((IKabs(((((-1.0)*px*x1305))+((px*x1304))+((px*x1308))+(((-0.0495)*py))+(((-1.0)*py*x1307))+(((-1.0)*py*x1306))+(((0.3925)*px)))))+(IKabs(((((-1.0)*px*x1306))+(((-1.0)*px*x1307))+(((-0.0495)*px))+(((-1.0)*py*x1304))+(((-1.0)*py*x1308))+(((-0.3925)*py))+((pp*py))))));
j0eval[2]=IKsign(((((-0.09)*pp))+(((0.09)*x1303))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x1309=pz*pz;
IkReal x1310=(cj3*py);
IkReal x1311=(py*sj3);
IkReal x1312=((1.0)*pp);
IkReal x1313=(cj3*px);
IkReal x1314=(px*sj3);
j0eval[0]=(x1309+(((-1.0)*x1312)));
j0eval[1]=IKsign(((((-1.1)*pp))+(((1.1)*x1309))));
j0eval[2]=((IKabs(((((-0.33)*x1314))+(((-0.00405)*x1310))+(((-0.0495)*px))+(((0.0495)*x1313))+(((-1.0)*py*x1312))+(((0.027)*x1311))+(((-0.20845)*py)))))+(IKabs(((((-0.00405)*x1313))+(((0.33)*x1311))+(((0.0495)*py))+(((0.027)*x1314))+(((-0.0495)*x1310))+(((-0.20845)*px))+(((-1.0)*px*x1312))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1315=((0.3)*sj3);
IkReal x1316=((0.045)*cj3);
IkReal x1317=((0.045)*sj3);
IkReal x1318=((0.3)*cj3);
IkReal x1319=(x1317+x1318);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-1.0)*x1319)));
evalcond[2]=((-0.045)+x1316+(((-1.0)*x1315)));
evalcond[3]=((0.045)+x1315+(((-1.0)*x1316)));
evalcond[4]=((0.55)+x1319);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1320=(cj3*py);
IkReal x1321=(py*sj3);
IkReal x1322=((1.0)*pp);
IkReal x1323=(cj3*px);
IkReal x1324=(px*sj3);
CheckValue<IkReal> x1325=IKPowWithIntegerCheck(IKsign(((((-1.1)*pp))+(((1.1)*(pz*pz))))),-1);
if(!x1325.valid){
continue;
}
CheckValue<IkReal> x1326 = IKatan2WithCheck(IkReal(((((-0.0495)*px))+(((0.0495)*x1323))+(((-1.0)*py*x1322))+(((0.027)*x1321))+(((-0.20845)*py))+(((-0.33)*x1324))+(((-0.00405)*x1320)))),((((0.33)*x1321))+(((0.0495)*py))+(((0.027)*x1324))+(((-0.0495)*x1320))+(((-1.0)*px*x1322))+(((-0.20845)*px))+(((-0.00405)*x1323))),IKFAST_ATAN2_MAGTHRESH);
if(!x1326.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1325.value)))+(x1326.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1327=IKsin(j0);
IkReal x1328=IKcos(j0);
IkReal x1329=(px*x1327);
IkReal x1330=(py*x1328);
IkReal x1331=(px*x1328);
IkReal x1332=(py*x1327);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1331+x1332+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+x1329+(((0.045)*cj3))+(((-1.0)*x1330))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1330))+(((0.09)*x1329))+(((-1.0)*pp))+(((1.1)*x1332))+(((1.1)*x1331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1333=((0.00405)*sj3);
IkReal x1334=((0.33)*cj3);
IkReal x1335=((0.027)*cj3);
IkReal x1336=((0.0495)*sj3);
CheckValue<IkReal> x1337=IKPowWithIntegerCheck(IKsign(((((-0.09)*pp))+(((0.09)*(pz*pz))))),-1);
if(!x1337.valid){
continue;
}
CheckValue<IkReal> x1338 = IKatan2WithCheck(IkReal((((px*x1336))+((px*x1334))+(((-1.0)*pp*px))+(((-1.0)*py*x1335))+(((-1.0)*py*x1333))+(((-0.0495)*py))+(((0.3925)*px)))),((((-1.0)*px*x1335))+(((-1.0)*px*x1333))+(((-1.0)*py*x1336))+(((-1.0)*py*x1334))+(((-0.0495)*px))+(((-0.3925)*py))+((pp*py))),IKFAST_ATAN2_MAGTHRESH);
if(!x1338.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1337.value)))+(x1338.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1339=IKsin(j0);
IkReal x1340=IKcos(j0);
IkReal x1341=(px*x1339);
IkReal x1342=(py*x1340);
IkReal x1343=(px*x1340);
IkReal x1344=(py*x1339);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1343+x1344+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+x1341+(((0.045)*cj3))+(((-1.0)*x1342))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1341))+(((1.1)*x1343))+(((1.1)*x1344))+(((-1.0)*pp))+(((-0.09)*x1342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1345=((0.3)*py);
IkReal x1346=((0.045)*px);
IkReal x1347=((0.045)*py);
IkReal x1348=((0.3)*px);
CheckValue<IkReal> x1349=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1349.valid){
continue;
}
CheckValue<IkReal> x1350 = IKatan2WithCheck(IkReal(((((-0.55)*py))+(((-1.0)*x1346))+(((-1.0)*sj3*x1347))+(((-1.0)*sj3*x1348))+(((-1.0)*cj3*x1345))+((cj3*x1346)))),((((-0.55)*px))+x1347+(((-1.0)*sj3*x1346))+(((-1.0)*cj3*x1347))+(((-1.0)*cj3*x1348))+((sj3*x1345))),IKFAST_ATAN2_MAGTHRESH);
if(!x1350.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1349.value)))+(x1350.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1351=IKsin(j0);
IkReal x1352=IKcos(j0);
IkReal x1353=(px*x1351);
IkReal x1354=(py*x1352);
IkReal x1355=(px*x1352);
IkReal x1356=(py*x1351);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1356+x1355+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+x1353+(((-1.0)*x1354))+(((0.045)*cj3))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1354))+(((0.09)*x1353))+(((-1.0)*pp))+(((1.1)*x1355))+(((1.1)*x1356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x1357=pz*pz;
IkReal x1358=sj3*sj3;
IkReal x1359=cj3*cj3;
IkReal x1360=((4.26078431372549)*cj3);
IkReal x1361=((((-1.0)*x1357))+pp);
IkReal x1362=((1.20294117647059)*x1359);
IkReal x1363=((1.0)*x1357);
IkReal x1364=((1.20294117647059)*x1358);
j0eval[0]=x1361;
j0eval[1]=((((-3.98071895424837)*x1357))+(((-1.0)*sj3*x1363))+((pp*sj3))+((pp*x1360))+((pp*x1364))+((pp*x1362))+(((3.98071895424837)*pp))+(((-1.0)*x1357*x1364))+(((-1.0)*x1357*x1362))+(((-1.0)*x1357*x1360)));
j0eval[2]=IKsign(x1361);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x1365=pz*pz;
IkReal x1366=((0.33)*cj3);
IkReal x1367=((1.0)*pp);
IkReal x1368=((0.027)*cj3);
IkReal x1369=((0.00405)*sj3);
IkReal x1370=((0.0495)*sj3);
j0eval[0]=(x1365+(((-1.0)*x1367)));
j0eval[1]=((IKabs(((((0.0495)*px))+((px*x1369))+((px*x1368))+(((-1.0)*py*x1370))+(((-1.0)*py*x1366))+(((-0.3925)*py))+((pp*py)))))+(IKabs((((px*x1370))+(((-1.0)*px*x1367))+(((0.0495)*py))+((px*x1366))+(((0.3925)*px))+((py*x1369))+((py*x1368))))));
j0eval[2]=IKsign(((((0.09)*x1365))+(((-0.09)*pp))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x1371=pz*pz;
IkReal x1372=(cj3*py);
IkReal x1373=(py*sj3);
IkReal x1374=((1.0)*pp);
IkReal x1375=(cj3*px);
IkReal x1376=(px*sj3);
j0eval[0]=((((-1.0)*x1371))+pp);
j0eval[1]=((IKabs(((((-1.0)*px*x1374))+(((-0.33)*x1373))+(((-0.00405)*x1375))+(((0.0495)*x1372))+(((-0.0495)*py))+(((0.027)*x1376))+(((-0.20845)*px)))))+(IKabs(((((-0.00405)*x1372))+(((0.0495)*px))+(((0.33)*x1376))+(((-0.0495)*x1375))+(((0.027)*x1373))+(((-1.0)*py*x1374))+(((-0.20845)*py))))));
j0eval[2]=IKsign(((((-1.1)*x1371))+(((1.1)*pp))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1377=((0.3)*sj3);
IkReal x1378=((0.045)*cj3);
IkReal x1379=x998;
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=x1379;
evalcond[2]=((-0.045)+x1378+(((-1.0)*x1377)));
evalcond[3]=((0.045)+x1377+(((-1.0)*x1378)));
evalcond[4]=x1379;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1380=(cj3*py);
IkReal x1381=(py*sj3);
IkReal x1382=((1.0)*pp);
IkReal x1383=(cj3*px);
IkReal x1384=(px*sj3);
CheckValue<IkReal> x1385 = IKatan2WithCheck(IkReal(((((-0.0495)*x1383))+(((0.027)*x1381))+(((0.0495)*px))+(((-0.00405)*x1380))+(((0.33)*x1384))+(((-0.20845)*py))+(((-1.0)*py*x1382)))),((((0.027)*x1384))+(((-0.00405)*x1383))+(((-0.0495)*py))+(((-0.33)*x1381))+(((-1.0)*px*x1382))+(((0.0495)*x1380))+(((-0.20845)*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x1385.valid){
continue;
}
CheckValue<IkReal> x1386=IKPowWithIntegerCheck(IKsign(((((-1.1)*(pz*pz)))+(((1.1)*pp)))),-1);
if(!x1386.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1385.value)+(((1.5707963267949)*(x1386.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1387=IKcos(j0);
IkReal x1388=IKsin(j0);
IkReal x1389=(px*x1388);
IkReal x1390=((1.0)*x1387);
IkReal x1391=(py*x1388);
evalcond[0]=((-0.045)+x1389+(((0.045)*cj3))+(((-1.0)*py*x1390))+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*px*x1390))+(((-1.0)*x1391)));
evalcond[2]=((-0.2125)+(((-1.1)*x1391))+(((-0.09)*py*x1387))+(((-1.0)*pp))+(((-1.1)*px*x1387))+(((0.09)*x1389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1392=((0.33)*cj3);
IkReal x1393=((0.027)*cj3);
IkReal x1394=((0.00405)*sj3);
IkReal x1395=((0.0495)*sj3);
CheckValue<IkReal> x1396=IKPowWithIntegerCheck(IKsign(((((-0.09)*pp))+(((0.09)*(pz*pz))))),-1);
if(!x1396.valid){
continue;
}
CheckValue<IkReal> x1397 = IKatan2WithCheck(IkReal((((px*x1395))+((px*x1392))+(((-1.0)*pp*px))+(((0.0495)*py))+((py*x1394))+((py*x1393))+(((0.3925)*px)))),(((px*x1394))+((px*x1393))+(((0.0495)*px))+(((-1.0)*py*x1395))+(((-1.0)*py*x1392))+(((-0.3925)*py))+((pp*py))),IKFAST_ATAN2_MAGTHRESH);
if(!x1397.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1396.value)))+(x1397.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1398=IKcos(j0);
IkReal x1399=IKsin(j0);
IkReal x1400=(px*x1399);
IkReal x1401=((1.0)*x1398);
IkReal x1402=(py*x1399);
evalcond[0]=((-0.045)+(((0.045)*cj3))+x1400+(((-1.0)*py*x1401))+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1402))+(((-0.3)*cj3))+(((-1.0)*px*x1401)));
evalcond[2]=((-0.2125)+(((-0.09)*py*x1398))+(((0.09)*x1400))+(((-1.0)*pp))+(((-1.1)*px*x1398))+(((-1.1)*x1402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1403=((0.3)*py);
IkReal x1404=((0.045)*px);
IkReal x1405=((0.045)*py);
IkReal x1406=((0.3)*px);
CheckValue<IkReal> x1407=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1407.valid){
continue;
}
CheckValue<IkReal> x1408 = IKatan2WithCheck(IkReal(((((-0.55)*py))+(((-1.0)*cj3*x1404))+(((-1.0)*cj3*x1403))+((sj3*x1406))+x1404+(((-1.0)*sj3*x1405)))),((((-0.55)*px))+(((-1.0)*cj3*x1406))+(((-1.0)*x1405))+((cj3*x1405))+(((-1.0)*sj3*x1403))+(((-1.0)*sj3*x1404))),IKFAST_ATAN2_MAGTHRESH);
if(!x1408.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1407.value)))+(x1408.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1409=IKcos(j0);
IkReal x1410=IKsin(j0);
IkReal x1411=(px*x1410);
IkReal x1412=((1.0)*x1409);
IkReal x1413=(py*x1410);
evalcond[0]=((-0.045)+(((0.045)*cj3))+x1411+(((-1.0)*py*x1412))+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*px*x1412))+(((-1.0)*x1413)));
evalcond[2]=((-0.2125)+(((-1.1)*x1413))+(((-0.09)*py*x1409))+(((0.09)*x1411))+(((-1.0)*pp))+(((-1.1)*px*x1409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1414=((0.3)*sj3);
IkReal x1415=((0.045)*cj3);
IkReal x1416=(cj1*pz);
IkReal x1417=((0.3)*cj3);
IkReal x1418=((0.045)*sj3);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-1.0)*x1418))+(((-1.0)*x1417))+x1416);
evalcond[2]=((-0.045)+(((-1.0)*x1414))+x1415);
evalcond[3]=(pz*sj1);
evalcond[4]=((0.045)+(((-1.0)*x1415))+x1414);
evalcond[5]=((((0.55)*sj1))+((sj1*x1417))+((sj1*x1418)));
evalcond[6]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x1416)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1419=((-1.0)*py);
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1419);
rxp0_1=(px*r20);
rxp1_0=(r21*x1419);
rxp1_1=(px*r21);
rxp2_0=(r22*x1419);
rxp2_1=(px*r22);
IkReal x1420=px*px;
IkReal x1421=py*py;
IkReal x1422=(sj1*x1420);
IkReal x1423=(sj1*x1421);
j0eval[0]=(x1423+x1422);
j0eval[1]=IKsign(((((20.0)*x1423))+(((20.0)*x1422))));
j0eval[2]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[4];
IkReal x1424=((-1.0)*py);
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1424);
rxp0_1=(px*r20);
rxp1_0=(r21*x1424);
rxp1_1=(px*r21);
rxp2_0=(r22*x1424);
rxp2_1=(px*r22);
IkReal x1425=px*px;
IkReal x1426=py*py;
j0eval[0]=(x1425+x1426);
j0eval[1]=289.0;
j0eval[2]=sj1;
j0eval[3]=IKsign(((((20.0)*x1426))+(((20.0)*x1425))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x1427=((-1.0)*py);
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1427);
rxp0_1=(px*r20);
rxp1_0=(r21*x1427);
rxp1_1=(px*r21);
rxp2_0=(r22*x1427);
rxp2_1=(px*r22);
IkReal x1428=py*py;
IkReal x1429=px*px;
IkReal x1430=(sj1*x1428);
IkReal x1431=(sj1*x1429);
j0eval[0]=((((-1.0)*x1431))+(((-1.0)*x1430)));
j0eval[1]=IKsign(((((-1.1)*x1430))+(((-1.1)*x1431))));
j0eval[2]=((IKabs(((((-80.0)*(px*px*px)))+(((-17.0)*px))+(((-80.0)*px*x1428)))))+(IKabs(((((-80.0)*(py*py*py)))+(((-17.0)*py))+(((-80.0)*py*x1429))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=-0.85;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1432=((-1.0)*py);
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1432);
rxp0_1=(px*r20);
rxp1_0=(r21*x1432);
rxp1_1=(px*r21);
rxp2_0=(r22*x1432);
rxp2_1=(px*r22);
sj1=0;
cj1=1.0;
j1=0;
IkReal x1433=px*px;
IkReal x1434=py*py;
j0eval[0]=((((-1.0)*x1433))+(((-1.0)*x1434)));
j0eval[1]=IKsign(((((-9.0)*x1433))+(((-9.0)*x1434))));
j0eval[2]=((IKabs(((((80.0)*(py*py*py)))+(((80.0)*py*x1433))+(((17.0)*py)))))+(IKabs(((((-80.0)*px*x1434))+(((-80.0)*(px*px*px)))+(((-17.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=-0.2125;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1435=py*py;
IkReal x1436=px*px;
CheckValue<IkReal> x1437 = IKatan2WithCheck(IkReal(((((-100.0)*(px*px*px)))+(((-21.25)*px))+(((-100.0)*px*x1435)))),((((100.0)*py*x1436))+(((21.25)*py))+(((100.0)*(py*py*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1437.valid){
continue;
}
CheckValue<IkReal> x1438=IKPowWithIntegerCheck(IKsign(((((-9.0)*x1435))+(((-9.0)*x1436)))),-1);
if(!x1438.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1437.value)+(((1.5707963267949)*(x1438.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1439=IKcos(j0);
IkReal x1440=IKsin(j0);
IkReal x1441=(px*x1440);
IkReal x1442=((1.0)*x1439);
evalcond[0]=((((-1.0)*py*x1442))+x1441);
evalcond[1]=((((-1.0)*px*x1442))+(((-1.0)*py*x1440)));
evalcond[2]=((-0.2125)+(((-1.0)*(px*px)))+(((-0.09)*py*x1439))+(((0.09)*x1441))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=-0.85;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1443=((-1.0)*py);
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1443);
rxp0_1=(px*r20);
rxp1_0=(r21*x1443);
rxp1_1=(px*r21);
rxp2_0=(r22*x1443);
rxp2_1=(px*r22);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x1444=px*px;
IkReal x1445=py*py;
j0eval[0]=((((-1.0)*x1444))+(((-1.0)*x1445)));
j0eval[1]=IKsign(((((-9.0)*x1444))+(((-9.0)*x1445))));
j0eval[2]=((IKabs(((((80.0)*(py*py*py)))+(((17.0)*py))+(((80.0)*py*x1444)))))+(IKabs(((((-80.0)*(px*px*px)))+(((-17.0)*px))+(((-80.0)*px*x1445))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=-0.2125;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1446=py*py;
IkReal x1447=px*px;
CheckValue<IkReal> x1448=IKPowWithIntegerCheck(IKsign(((((-9.0)*x1446))+(((-9.0)*x1447)))),-1);
if(!x1448.valid){
continue;
}
CheckValue<IkReal> x1449 = IKatan2WithCheck(IkReal(((((-100.0)*(px*px*px)))+(((-21.25)*px))+(((-100.0)*px*x1446)))),((((21.25)*py))+(((100.0)*py*x1447))+(((100.0)*(py*py*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1449.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1448.value)))+(x1449.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1450=IKsin(j0);
IkReal x1451=IKcos(j0);
IkReal x1452=(px*x1450);
IkReal x1453=(py*x1451);
evalcond[0]=(((py*x1450))+((px*x1451)));
evalcond[1]=((((-1.0)*x1453))+x1452);
evalcond[2]=((-0.2125)+(((-1.0)*(px*px)))+(((0.09)*x1452))+(((-0.09)*x1453))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=((0.85)*sj1);
evalcond[4]=-0.2125;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=((0.85)*sj1);
evalcond[4]=-0.2125;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1454=px*px;
IkReal x1455=py*py;
IkReal x1456=((1.1)*sj1);
CheckValue<IkReal> x1457=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1455*x1456))+(((-1.0)*x1454*x1456)))),-1);
if(!x1457.valid){
continue;
}
CheckValue<IkReal> x1458 = IKatan2WithCheck(IkReal(((((-1.0)*(py*py*py)))+(((-0.2125)*py))+(((-1.0)*py*x1454)))),((((-0.2125)*px))+(((-1.0)*px*x1455))+(((-1.0)*(px*px*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1458.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1457.value)))+(x1458.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1459=IKcos(j0);
IkReal x1460=IKsin(j0);
IkReal x1461=((1.0)*py);
IkReal x1462=((1.1)*sj1);
IkReal x1463=(px*x1460);
IkReal x1464=(px*x1459);
IkReal x1465=(py*x1460);
evalcond[0]=((((-1.0)*x1459*x1461))+x1463);
evalcond[1]=((-0.85)+((sj1*x1464))+((sj1*x1465)));
evalcond[2]=((((-1.0)*cj1*x1460*x1461))+(((-1.0)*cj1*x1464)));
evalcond[3]=((((0.85)*sj1))+(((-1.0)*x1460*x1461))+(((-1.0)*x1464)));
evalcond[4]=((-0.2125)+(((-1.0)*py*x1461))+(((-1.0)*(px*px)))+(((0.09)*x1463))+(((-0.09)*py*x1459))+((x1462*x1465))+((x1462*x1464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1466=((17.0)*sj1);
CheckValue<IkReal> x1467 = IKatan2WithCheck(IkReal((py*x1466)),(px*x1466),IKFAST_ATAN2_MAGTHRESH);
if(!x1467.valid){
continue;
}
CheckValue<IkReal> x1468=IKPowWithIntegerCheck(IKsign(((((20.0)*(px*px)))+(((20.0)*(py*py))))),-1);
if(!x1468.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1467.value)+(((1.5707963267949)*(x1468.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1469=IKcos(j0);
IkReal x1470=IKsin(j0);
IkReal x1471=((1.0)*py);
IkReal x1472=((1.1)*sj1);
IkReal x1473=(px*x1470);
IkReal x1474=(px*x1469);
IkReal x1475=(py*x1470);
evalcond[0]=((((-1.0)*x1469*x1471))+x1473);
evalcond[1]=((-0.85)+((sj1*x1475))+((sj1*x1474)));
evalcond[2]=((((-1.0)*cj1*x1470*x1471))+(((-1.0)*cj1*x1474)));
evalcond[3]=((((-1.0)*x1470*x1471))+(((-1.0)*x1474))+(((0.85)*sj1)));
evalcond[4]=((-0.2125)+(((-1.0)*(px*px)))+(((-0.09)*py*x1469))+((x1472*x1475))+((x1472*x1474))+(((-1.0)*py*x1471))+(((0.09)*x1473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1476=((20.0)*sj1);
CheckValue<IkReal> x1477 = IKatan2WithCheck(IkReal(((17.0)*py)),((17.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x1477.valid){
continue;
}
CheckValue<IkReal> x1478=IKPowWithIntegerCheck(IKsign((((x1476*(px*px)))+((x1476*(py*py))))),-1);
if(!x1478.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1477.value)+(((1.5707963267949)*(x1478.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1479=IKcos(j0);
IkReal x1480=IKsin(j0);
IkReal x1481=((1.0)*py);
IkReal x1482=((1.1)*sj1);
IkReal x1483=(px*x1480);
IkReal x1484=(px*x1479);
IkReal x1485=(py*x1480);
evalcond[0]=((((-1.0)*x1479*x1481))+x1483);
evalcond[1]=((-0.85)+((sj1*x1484))+((sj1*x1485)));
evalcond[2]=((((-1.0)*cj1*x1480*x1481))+(((-1.0)*cj1*x1484)));
evalcond[3]=((((-1.0)*x1480*x1481))+(((-1.0)*x1484))+(((0.85)*sj1)));
evalcond[4]=((-0.2125)+(((-1.0)*(px*px)))+((x1482*x1484))+((x1482*x1485))+(((0.09)*x1483))+(((-0.09)*py*x1479))+(((-1.0)*py*x1481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((-0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3=0;
sj3=0;
cj3=1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x1486=pz*pz;
IkReal x1487=((400.0)*pp);
j0eval[0]=((((-1.0)*pp))+x1486);
j0eval[1]=IKsign(((((-9.0)*pp))+(((9.0)*x1486))));
j0eval[2]=((IKabs(((((-1.0)*px*x1487))+(((289.0)*px)))))+(IKabs(((((-289.0)*py))+((py*x1487))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((0.7225)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1488=((100.0)*pp);
CheckValue<IkReal> x1489=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1489.valid){
continue;
}
CheckValue<IkReal> x1490 = IKatan2WithCheck(IkReal(((((72.25)*px))+(((-1.0)*px*x1488)))),(((py*x1488))+(((-72.25)*py))),IKFAST_ATAN2_MAGTHRESH);
if(!x1490.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1489.value)))+(x1490.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1491=IKcos(j0);
IkReal x1492=IKsin(j0);
IkReal x1493=(px*x1492);
IkReal x1494=((1.0)*x1491);
evalcond[0]=(x1493+(((-1.0)*py*x1494)));
evalcond[1]=((((-1.0)*px*x1494))+(((-1.0)*py*x1492)));
evalcond[2]=((0.7225)+(((0.09)*x1493))+(((-1.0)*pp))+(((-0.09)*py*x1491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((-0.85)+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3=0;
sj3=0;
cj3=1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x1495=pz*pz;
IkReal x1496=((400.0)*pp);
j0eval[0]=((((-1.0)*pp))+x1495);
j0eval[1]=IKsign(((((9.0)*x1495))+(((-9.0)*pp))));
j0eval[2]=((IKabs(((((-289.0)*py))+((py*x1496)))))+(IKabs(((((-1.0)*px*x1496))+(((289.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((0.7225)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1497=((100.0)*pp);
CheckValue<IkReal> x1498 = IKatan2WithCheck(IkReal(((((72.25)*px))+(((-1.0)*px*x1497)))),(((py*x1497))+(((-72.25)*py))),IKFAST_ATAN2_MAGTHRESH);
if(!x1498.valid){
continue;
}
CheckValue<IkReal> x1499=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1499.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1498.value)+(((1.5707963267949)*(x1499.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1500=IKsin(j0);
IkReal x1501=IKcos(j0);
IkReal x1502=(px*x1500);
IkReal x1503=(py*x1501);
evalcond[0]=(((py*x1500))+((px*x1501)));
evalcond[1]=((((-1.0)*x1503))+x1502);
evalcond[2]=((0.7225)+(((-0.09)*x1503))+(((0.09)*x1502))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1504=((0.3)*py);
IkReal x1505=(cj3*sj1);
IkReal x1506=((0.55)*sj1);
IkReal x1507=((0.3)*px);
IkReal x1508=((0.045)*py);
IkReal x1509=(sj1*sj3);
IkReal x1510=((0.045)*px);
CheckValue<IkReal> x1511 = IKatan2WithCheck(IkReal((((x1508*x1509))+((sj3*x1507))+((x1504*x1505))+x1510+((py*x1506))+(((-1.0)*cj3*x1510)))),((((-1.0)*sj3*x1504))+((x1509*x1510))+(((-1.0)*x1508))+((cj3*x1508))+((px*x1506))+((x1505*x1507))),IKFAST_ATAN2_MAGTHRESH);
if(!x1511.valid){
continue;
}
CheckValue<IkReal> x1512=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1512.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1511.value)+(((1.5707963267949)*(x1512.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1513=IKsin(j0);
IkReal x1514=IKcos(j0);
IkReal x1515=((1.1)*sj1);
IkReal x1516=((0.3)*cj3);
IkReal x1517=((0.045)*sj3);
IkReal x1518=((1.0)*cj1);
IkReal x1519=(cj1*pz);
IkReal x1520=(px*x1513);
IkReal x1521=(px*x1514);
IkReal x1522=(py*x1513);
IkReal x1523=(py*x1514);
evalcond[0]=((((-1.0)*x1518*x1522))+(((-1.0)*x1518*x1521))+((pz*sj1)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1520+(((-1.0)*x1523))+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1516))+(((-1.0)*x1517))+((sj1*x1522))+((sj1*x1521))+x1519);
evalcond[3]=(((sj1*x1516))+((sj1*x1517))+(((0.55)*sj1))+(((-1.0)*x1522))+(((-1.0)*x1521)));
evalcond[4]=((-0.2125)+(((0.09)*x1520))+(((1.1)*x1519))+(((-1.0)*pp))+((x1515*x1521))+((x1515*x1522))+(((-0.09)*x1523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1524=((1.1)*pz);
IkReal x1525=((0.2125)*cj1);
IkReal x1526=((0.09)*cj1);
IkReal x1527=(cj1*pp);
IkReal x1528=((0.09)*pz*sj1);
CheckValue<IkReal> x1529 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1527))+((px*x1524))+(((-1.0)*px*x1525))+(((-1.0)*py*x1528)))),((((-1.0)*px*x1528))+((py*x1525))+((py*x1527))+(((-1.0)*py*x1524))),IKFAST_ATAN2_MAGTHRESH);
if(!x1529.valid){
continue;
}
CheckValue<IkReal> x1530=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*x1526))+((x1526*(pz*pz))))),-1);
if(!x1530.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1529.value)+(((1.5707963267949)*(x1530.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1531=IKsin(j0);
IkReal x1532=IKcos(j0);
IkReal x1533=((1.1)*sj1);
IkReal x1534=((0.3)*cj3);
IkReal x1535=((0.045)*sj3);
IkReal x1536=((1.0)*cj1);
IkReal x1537=(cj1*pz);
IkReal x1538=(px*x1531);
IkReal x1539=(px*x1532);
IkReal x1540=(py*x1531);
IkReal x1541=(py*x1532);
evalcond[0]=((((-1.0)*x1536*x1540))+((pz*sj1))+(((-1.0)*x1536*x1539)));
evalcond[1]=((-0.045)+(((-1.0)*x1541))+(((0.045)*cj3))+x1538+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1534))+(((-1.0)*x1535))+((sj1*x1539))+x1537+((sj1*x1540)));
evalcond[3]=((((-1.0)*x1540))+(((-1.0)*x1539))+((sj1*x1534))+((sj1*x1535))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((-0.09)*x1541))+(((0.09)*x1538))+((x1533*x1540))+(((-1.0)*pp))+(((1.1)*x1537))+((x1533*x1539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1542=((0.045)*cj1);
IkReal x1543=(pz*sj1);
IkReal x1544=((0.3)*cj1*sj3);
CheckValue<IkReal> x1545=IKPowWithIntegerCheck(IKsign((((cj1*pp))+(((-1.0)*cj1*(pz*pz))))),-1);
if(!x1545.valid){
continue;
}
CheckValue<IkReal> x1546 = IKatan2WithCheck(IkReal((((py*x1543))+((px*x1542))+((px*x1544))+(((-1.0)*cj3*px*x1542)))),(((cj3*py*x1542))+(((-1.0)*py*x1542))+(((-1.0)*py*x1544))+((px*x1543))),IKFAST_ATAN2_MAGTHRESH);
if(!x1546.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1545.value)))+(x1546.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1547=IKsin(j0);
IkReal x1548=IKcos(j0);
IkReal x1549=((1.1)*sj1);
IkReal x1550=((0.3)*cj3);
IkReal x1551=((0.045)*sj3);
IkReal x1552=((1.0)*cj1);
IkReal x1553=(cj1*pz);
IkReal x1554=(px*x1547);
IkReal x1555=(px*x1548);
IkReal x1556=(py*x1547);
IkReal x1557=(py*x1548);
evalcond[0]=((((-1.0)*x1552*x1555))+(((-1.0)*x1552*x1556))+((pz*sj1)));
evalcond[1]=((-0.045)+(((-1.0)*x1557))+(((0.045)*cj3))+x1554+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+x1553+((sj1*x1556))+((sj1*x1555))+(((-1.0)*x1551))+(((-1.0)*x1550)));
evalcond[3]=((((-1.0)*x1556))+(((-1.0)*x1555))+((sj1*x1550))+((sj1*x1551))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((1.1)*x1553))+(((-0.09)*x1557))+(((0.09)*x1554))+(((-1.0)*pp))+((x1549*x1556))+((x1549*x1555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1558=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1558;
evalcond[3]=x1558;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x1559=((0.3)*sj3);
IkReal x1560=(px*sj2);
IkReal x1561=((0.045)*py);
IkReal x1562=(pp+(((-1.0)*(pz*pz))));
IkReal x1563=(cj3*x1561);
IkReal x1564=((0.045)*cj2*px);
j0eval[0]=x1562;
j0eval[1]=((IKabs(((((-1.0)*sj2*x1563))+((py*sj2*x1559))+x1564+(((-1.0)*cj3*x1564))+((cj2*px*x1559))+((sj2*x1561)))))+(IKabs(((((-1.0)*x1559*x1560))+(((-0.045)*x1560))+(((0.045)*cj3*x1560))+((cj2*x1561))+(((-1.0)*cj2*x1563))+((cj2*py*x1559))))));
j0eval[2]=IKsign(x1562);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj1=0;
cj1=1.0;
j1=0;
IkReal x1565=((((-1.0)*cj2*pp))+((cj2*(pz*pz))));
j0eval[0]=x1565;
j0eval[1]=IKsign(x1565);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj1=0;
cj1=1.0;
j1=0;
IkReal x1566=(((cj2*pp))+(((-1.0)*cj2*(pz*pz))));
j0eval[0]=x1566;
j0eval[1]=IKsign(x1566);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1567=((20.0)*sj3);
IkReal x1568=((3.0)*px);
IkReal x1569=((3.0)*py);
IkReal x1570=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x1570;
j0eval[1]=((IKabs(((((-1.0)*py*x1567))+((cj3*x1569))+(((-1.0)*x1569)))))+(IKabs((x1568+((px*x1567))+(((-1.0)*cj3*x1568))))));
j0eval[2]=IKsign(x1570);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1571=pz*pz;
IkReal x1572=((80.0)*pp);
IkReal x1573=((88.0)*pz);
j0eval[0]=(pp+(((-1.0)*x1571)));
j0eval[1]=IKsign(((((9.0)*pp))+(((-9.0)*x1571))));
j0eval[2]=((IKabs(((((-1.0)*py*x1573))+(((17.0)*py))+((py*x1572)))))+(IKabs(((((-1.0)*px*x1572))+((px*x1573))+(((-17.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1574=pz*pz;
IkReal x1575=((80.0)*pp);
IkReal x1576=((88.0)*pz);
j0eval[0]=(pp+(((-1.0)*x1574)));
j0eval[1]=IKsign(((((9.0)*pp))+(((-9.0)*x1574))));
j0eval[2]=((IKabs(((((-1.0)*py*x1576))+(((17.0)*py))+((py*x1575)))))+(IKabs(((((-1.0)*px*x1575))+((px*x1576))+(((-17.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1577=((110.0)*pz);
IkReal x1578=((100.0)*pp);
CheckValue<IkReal> x1579=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1579.valid){
continue;
}
CheckValue<IkReal> x1580 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1578))+(((-21.25)*px))+((px*x1577)))),((((21.25)*py))+(((-1.0)*py*x1577))+((py*x1578))),IKFAST_ATAN2_MAGTHRESH);
if(!x1580.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1579.value)))+(x1580.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1581=IKsin(j0);
IkReal x1582=IKcos(j0);
IkReal x1583=(px*x1581);
IkReal x1584=(py*x1582);
evalcond[0]=(((py*x1581))+((px*x1582)));
evalcond[1]=(x1583+(((-1.0)*x1584)));
evalcond[2]=((-0.2125)+(((0.09)*x1584))+(((-0.09)*x1583))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1585=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=x1585;
evalcond[2]=0;
evalcond[3]=x1585;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1586=((110.0)*pz);
IkReal x1587=((100.0)*pp);
CheckValue<IkReal> x1588=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1588.valid){
continue;
}
CheckValue<IkReal> x1589 = IKatan2WithCheck(IkReal(((((-21.25)*px))+((px*x1586))+(((-1.0)*px*x1587)))),((((-1.0)*py*x1586))+(((21.25)*py))+((py*x1587))),IKFAST_ATAN2_MAGTHRESH);
if(!x1589.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1588.value)))+(x1589.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1590=IKsin(j0);
IkReal x1591=IKcos(j0);
IkReal x1592=(px*x1590);
IkReal x1593=(py*x1591);
evalcond[0]=(((py*x1590))+((px*x1591)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1592+(((0.3)*sj3))+(((-1.0)*x1593)));
evalcond[2]=((-0.2125)+(((0.09)*x1593))+(((-0.09)*x1592))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1594=((0.3)*sj3);
IkReal x1595=((0.045)*px);
IkReal x1596=((0.045)*py);
CheckValue<IkReal> x1597=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1597.valid){
continue;
}
CheckValue<IkReal> x1598 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x1595))+x1595+((px*x1594)))),((((-1.0)*x1596))+(((-1.0)*py*x1594))+((cj3*x1596))),IKFAST_ATAN2_MAGTHRESH);
if(!x1598.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1597.value)))+(x1598.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1599=IKsin(j0);
IkReal x1600=IKcos(j0);
IkReal x1601=(px*x1599);
IkReal x1602=(py*x1600);
evalcond[0]=(((py*x1599))+((px*x1600)));
evalcond[1]=((0.045)+(((-1.0)*x1602))+x1601+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x1602))+(((1.1)*pz))+(((-0.09)*x1601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1603=((20.0)*sj3);
IkReal x1604=((3.0)*px);
IkReal x1605=((3.0)*py);
IkReal x1606=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x1606;
j0eval[1]=((IKabs(((((-1.0)*x1604))+((cj3*x1604))+(((-1.0)*px*x1603)))))+(IKabs((((py*x1603))+x1605+(((-1.0)*cj3*x1605))))));
j0eval[2]=IKsign(x1606);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1607=pz*pz;
IkReal x1608=((80.0)*pp);
IkReal x1609=((88.0)*pz);
j0eval[0]=(x1607+(((-1.0)*pp)));
j0eval[1]=IKsign(((((-9.0)*pp))+(((9.0)*x1607))));
j0eval[2]=((IKabs(((((-1.0)*px*x1608))+((px*x1609))+(((-17.0)*px)))))+(IKabs((((py*x1608))+(((-1.0)*py*x1609))+(((17.0)*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1610=pz*pz;
IkReal x1611=((80.0)*pp);
IkReal x1612=((88.0)*pz);
j0eval[0]=(x1610+(((-1.0)*pp)));
j0eval[1]=IKsign(((((9.0)*x1610))+(((-9.0)*pp))));
j0eval[2]=((IKabs((((px*x1612))+(((-1.0)*px*x1611))+(((-17.0)*px)))))+(IKabs((((py*x1611))+(((-1.0)*py*x1612))+(((17.0)*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1613=((110.0)*pz);
IkReal x1614=((100.0)*pp);
CheckValue<IkReal> x1615=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1615.valid){
continue;
}
CheckValue<IkReal> x1616 = IKatan2WithCheck(IkReal((((px*x1613))+(((-1.0)*px*x1614))+(((-21.25)*px)))),(((py*x1614))+(((21.25)*py))+(((-1.0)*py*x1613))),IKFAST_ATAN2_MAGTHRESH);
if(!x1616.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1615.value)))+(x1616.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1617=IKcos(j0);
IkReal x1618=IKsin(j0);
IkReal x1619=(px*x1618);
IkReal x1620=((1.0)*x1617);
evalcond[0]=(x1619+(((-1.0)*py*x1620)));
evalcond[1]=((((-1.0)*px*x1620))+(((-1.0)*py*x1618)));
evalcond[2]=((-0.2125)+(((-0.09)*py*x1617))+(((0.09)*x1619))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1621=((0.3)*sj3);
IkReal x1622=((0.045)*cj3);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.045)+x1622+(((-1.0)*x1621)));
evalcond[2]=0;
evalcond[3]=((0.045)+x1621+(((-1.0)*x1622)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1623=((110.0)*pz);
IkReal x1624=((100.0)*pp);
CheckValue<IkReal> x1625=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1625.valid){
continue;
}
CheckValue<IkReal> x1626 = IKatan2WithCheck(IkReal((((px*x1623))+(((-21.25)*px))+(((-1.0)*px*x1624)))),(((py*x1624))+(((21.25)*py))+(((-1.0)*py*x1623))),IKFAST_ATAN2_MAGTHRESH);
if(!x1626.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1625.value)))+(x1626.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1627=IKsin(j0);
IkReal x1628=IKcos(j0);
IkReal x1629=(px*x1627);
IkReal x1630=((1.0)*x1628);
evalcond[0]=((((-1.0)*px*x1630))+(((-1.0)*py*x1627)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1629+(((-1.0)*py*x1630))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*py*x1628))+(((0.09)*x1629))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1631=((0.3)*sj3);
IkReal x1632=((0.045)*px);
IkReal x1633=((0.045)*py);
CheckValue<IkReal> x1634 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1631))+((cj3*x1632))+(((-1.0)*x1632)))),(((py*x1631))+x1633+(((-1.0)*cj3*x1633))),IKFAST_ATAN2_MAGTHRESH);
if(!x1634.valid){
continue;
}
CheckValue<IkReal> x1635=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1635.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1634.value)+(((1.5707963267949)*(x1635.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1636=IKsin(j0);
IkReal x1637=IKcos(j0);
IkReal x1638=(px*x1636);
IkReal x1639=((1.0)*x1637);
evalcond[0]=((((-1.0)*py*x1636))+(((-1.0)*px*x1639)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1638+(((-1.0)*py*x1639))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*py*x1637))+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*x1638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1640=pz*pz;
IkReal x1641=(pp*sj2);
IkReal x1642=((80.0)*pp);
IkReal x1643=((88.0)*pz);
IkReal x1644=(sj2*x1640);
j0eval[0]=(x1641+(((-1.0)*x1644)));
j0eval[1]=IKsign(((((-0.09)*x1644))+(((0.09)*x1641))));
j0eval[2]=((IKabs(((((-1.0)*py*x1643))+((py*x1642))+(((17.0)*py)))))+(IKabs(((((-1.0)*px*x1642))+((px*x1643))+(((-17.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1645=pz*pz;
IkReal x1646=((80.0)*pp);
IkReal x1647=(cj2*pp);
IkReal x1648=((88.0)*pz);
IkReal x1649=(cj2*x1645);
j0eval[0]=(x1649+(((-1.0)*x1647)));
j0eval[1]=IKsign(((((-0.09)*x1647))+(((0.09)*x1649))));
j0eval[2]=((IKabs(((((-1.0)*px*x1646))+((px*x1648))+(((-17.0)*px)))))+(IKabs(((((-1.0)*py*x1646))+((py*x1648))+(((-17.0)*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1650=pz*pz;
IkReal x1651=(pp*px);
IkReal x1652=(cj2*py);
IkReal x1653=((1.1)*pz);
IkReal x1654=(py*sj2);
IkReal x1655=(px*sj2);
IkReal x1656=(cj2*px);
j0eval[0]=((((-1.0)*x1650))+pp);
j0eval[1]=IKsign(((((-0.09)*x1650))+(((0.09)*pp))));
j0eval[2]=((IKabs(((((0.2125)*x1656))+(((0.2125)*x1654))+((cj2*x1651))+(((-1.0)*x1653*x1654))+(((-1.0)*x1653*x1656))+((pp*x1654)))))+(IKabs(((((-1.0)*x1652*x1653))+(((0.2125)*x1652))+((pp*x1652))+(((-0.2125)*x1655))+(((-1.0)*sj2*x1651))+((x1653*x1655))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x1657=pz*pz;
IkReal x1658=((80.0)*pp);
IkReal x1659=((88.0)*pz);
j0eval[0]=(x1657+(((-1.0)*pp)));
j0eval[1]=IKsign(((((9.0)*x1657))+(((-9.0)*pp))));
j0eval[2]=((IKabs(((((-1.0)*py*x1658))+((py*x1659))+(((-17.0)*py)))))+(IKabs(((((-1.0)*px*x1658))+((px*x1659))+(((-17.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1660=((110.0)*pz);
IkReal x1661=((100.0)*pp);
CheckValue<IkReal> x1662=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1662.valid){
continue;
}
CheckValue<IkReal> x1663 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1661))+((py*x1660))+(((-21.25)*py)))),(((px*x1660))+(((-1.0)*px*x1661))+(((-21.25)*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x1663.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1662.value)))+(x1663.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1664=IKcos(j0);
IkReal x1665=IKsin(j0);
IkReal x1666=((1.0)*py);
IkReal x1667=(px*x1664);
evalcond[0]=(((px*x1665))+(((-1.0)*x1664*x1666)));
evalcond[1]=((((-1.0)*x1667))+(((-1.0)*x1665*x1666)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*py*x1665))+(((1.1)*pz))+(((0.09)*x1667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1668=pz*pz;
IkReal x1669=((80.0)*pp);
IkReal x1670=((88.0)*pz);
j0eval[0]=((((-1.0)*x1668))+pp);
j0eval[1]=IKsign(((((9.0)*pp))+(((-9.0)*x1668))));
j0eval[2]=((IKabs(((((-1.0)*px*x1669))+((px*x1670))+(((-17.0)*px)))))+(IKabs(((((-1.0)*py*x1669))+((py*x1670))+(((-17.0)*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1671=((110.0)*pz);
IkReal x1672=((100.0)*pp);
CheckValue<IkReal> x1673 = IKatan2WithCheck(IkReal((((py*x1671))+(((-1.0)*py*x1672))+(((-21.25)*py)))),((((-1.0)*px*x1672))+((px*x1671))+(((-21.25)*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x1673.valid){
continue;
}
CheckValue<IkReal> x1674=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1674.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1673.value)+(((1.5707963267949)*(x1674.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1675=IKsin(j0);
IkReal x1676=IKcos(j0);
IkReal x1677=(px*x1676);
IkReal x1678=(py*x1675);
evalcond[0]=(x1678+x1677);
evalcond[1]=(((px*x1675))+(((-1.0)*py*x1676)));
evalcond[2]=((-0.2125)+(((-0.09)*x1678))+(((-0.09)*x1677))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1679=(cj2*py);
IkReal x1680=(pp*px);
IkReal x1681=((1.1)*pz);
IkReal x1682=(py*sj2);
IkReal x1683=(px*sj2);
IkReal x1684=(cj2*px);
CheckValue<IkReal> x1685=IKPowWithIntegerCheck(IKsign(((((-0.09)*(pz*pz)))+(((0.09)*pp)))),-1);
if(!x1685.valid){
continue;
}
CheckValue<IkReal> x1686 = IKatan2WithCheck(IkReal((((x1681*x1683))+((pp*x1679))+(((-0.2125)*x1683))+(((-1.0)*x1679*x1681))+(((0.2125)*x1679))+(((-1.0)*sj2*x1680)))),((((0.2125)*x1682))+(((0.2125)*x1684))+(((-1.0)*x1681*x1684))+(((-1.0)*x1681*x1682))+((pp*x1682))+((cj2*x1680))),IKFAST_ATAN2_MAGTHRESH);
if(!x1686.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1685.value)))+(x1686.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1687=IKcos(j0);
IkReal x1688=IKsin(j0);
IkReal x1689=((0.09)*py);
IkReal x1690=(cj2*px);
IkReal x1691=(px*x1688);
IkReal x1692=((1.0)*x1687);
IkReal x1693=(sj2*x1687);
IkReal x1694=(py*x1688);
evalcond[0]=((((-1.0)*py*x1692))+x1691);
evalcond[1]=((((-1.0)*x1694))+(((-1.0)*px*x1692)));
evalcond[2]=(((sj2*x1694))+(((-1.0)*cj2*py*x1692))+((px*x1693))+((x1688*x1690)));
evalcond[3]=(((sj2*x1691))+(((-1.0)*py*sj2*x1692))+(((-1.0)*x1690*x1692))+(((-1.0)*cj2*x1694)));
evalcond[4]=((-0.2125)+(((0.09)*x1687*x1690))+((x1689*x1693))+(((-1.0)*pp))+(((1.1)*pz))+((cj2*x1688*x1689))+(((-0.09)*sj2*x1691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1695=((1.1)*pz);
IkReal x1696=((1.0)*pp);
IkReal x1697=((0.09)*cj2);
CheckValue<IkReal> x1698 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1696))+(((-0.2125)*py))+((py*x1695)))),((((-0.2125)*px))+((px*x1695))+(((-1.0)*px*x1696))),IKFAST_ATAN2_MAGTHRESH);
if(!x1698.valid){
continue;
}
CheckValue<IkReal> x1699=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*x1697))+((x1697*(pz*pz))))),-1);
if(!x1699.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1698.value)+(((1.5707963267949)*(x1699.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1700=IKcos(j0);
IkReal x1701=IKsin(j0);
IkReal x1702=((0.09)*py);
IkReal x1703=(cj2*px);
IkReal x1704=(px*x1701);
IkReal x1705=((1.0)*x1700);
IkReal x1706=(sj2*x1700);
IkReal x1707=(py*x1701);
evalcond[0]=((((-1.0)*py*x1705))+x1704);
evalcond[1]=((((-1.0)*px*x1705))+(((-1.0)*x1707)));
evalcond[2]=(((px*x1706))+((x1701*x1703))+(((-1.0)*cj2*py*x1705))+((sj2*x1707)));
evalcond[3]=((((-1.0)*cj2*x1707))+(((-1.0)*py*sj2*x1705))+(((-1.0)*x1703*x1705))+((sj2*x1704)));
evalcond[4]=((-0.2125)+(((0.09)*x1700*x1703))+(((-1.0)*pp))+(((1.1)*pz))+((x1702*x1706))+(((-0.09)*sj2*x1704))+((cj2*x1701*x1702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1708=((0.09)*sj2);
IkReal x1709=((1.1)*pz);
CheckValue<IkReal> x1710 = IKatan2WithCheck(IkReal(((((-1.0)*pp*px))+(((-0.2125)*px))+((px*x1709)))),((((-1.0)*py*x1709))+(((0.2125)*py))+((pp*py))),IKFAST_ATAN2_MAGTHRESH);
if(!x1710.valid){
continue;
}
CheckValue<IkReal> x1711=IKPowWithIntegerCheck(IKsign((((pp*x1708))+(((-1.0)*x1708*(pz*pz))))),-1);
if(!x1711.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1710.value)+(((1.5707963267949)*(x1711.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1712=IKcos(j0);
IkReal x1713=IKsin(j0);
IkReal x1714=((0.09)*py);
IkReal x1715=(cj2*px);
IkReal x1716=(px*x1713);
IkReal x1717=((1.0)*x1712);
IkReal x1718=(sj2*x1712);
IkReal x1719=(py*x1713);
evalcond[0]=(x1716+(((-1.0)*py*x1717)));
evalcond[1]=((((-1.0)*px*x1717))+(((-1.0)*x1719)));
evalcond[2]=(((x1713*x1715))+(((-1.0)*cj2*py*x1717))+((sj2*x1719))+((px*x1718)));
evalcond[3]=(((sj2*x1716))+(((-1.0)*py*sj2*x1717))+(((-1.0)*x1715*x1717))+(((-1.0)*cj2*x1719)));
evalcond[4]=((-0.2125)+((x1714*x1718))+(((0.09)*x1712*x1715))+((cj2*x1713*x1714))+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*sj2*x1716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1720=((0.045)*cj2);
IkReal x1721=((0.3)*sj3);
IkReal x1722=((0.045)*cj3);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((((0.045)*sj2))+((sj2*x1721))+(((-1.0)*sj2*x1722)));
evalcond[2]=0;
evalcond[3]=((0.045)+x1721+(((-1.0)*x1722)));
evalcond[4]=(((cj2*x1721))+x1720+(((-1.0)*cj3*x1720)));
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1723=cj2*cj2;
IkReal x1724=((0.045)*px);
IkReal x1725=((0.045)*py);
IkReal x1726=(cj2*sj2);
IkReal x1727=(cj3*x1726);
IkReal x1728=(cj3*x1723);
IkReal x1729=((0.3)*py*sj3);
IkReal x1730=((0.3)*px*sj3);
CheckValue<IkReal> x1731 = IKatan2WithCheck(IkReal((((x1723*x1725))+((x1723*x1729))+((x1724*x1727))+(((-1.0)*x1726*x1730))+(((-1.0)*x1725*x1728))+(((-1.0)*x1724*x1726)))),(((x1723*x1730))+((x1723*x1724))+((x1725*x1726))+((x1726*x1729))+(((-1.0)*x1725*x1727))+(((-1.0)*x1724*x1728))),IKFAST_ATAN2_MAGTHRESH);
if(!x1731.valid){
continue;
}
CheckValue<IkReal> x1732=IKPowWithIntegerCheck(IKsign((((cj2*pp))+(((-1.0)*cj2*(pz*pz))))),-1);
if(!x1732.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1731.value)+(((1.5707963267949)*(x1732.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1733=IKcos(j0);
IkReal x1734=IKsin(j0);
IkReal x1735=((0.045)*cj2);
IkReal x1736=((0.09)*sj2);
IkReal x1737=((0.3)*sj3);
IkReal x1738=((0.045)*cj3);
IkReal x1739=((0.09)*cj2);
IkReal x1740=((1.0)*cj2);
IkReal x1741=(px*x1734);
IkReal x1742=(px*x1733);
IkReal x1743=(py*x1733);
IkReal x1744=(py*x1734);
evalcond[0]=(x1741+(((0.045)*sj2))+(((-1.0)*x1743))+(((-1.0)*sj2*x1738))+((sj2*x1737)));
evalcond[1]=(((cj2*x1737))+x1735+(((-1.0)*cj3*x1735))+(((-1.0)*x1742))+(((-1.0)*x1744)));
evalcond[2]=((((-1.0)*x1740*x1743))+((cj2*x1741))+((sj2*x1744))+((sj2*x1742)));
evalcond[3]=((0.045)+x1737+(((-1.0)*x1740*x1744))+(((-1.0)*x1740*x1742))+(((-1.0)*sj2*x1743))+((sj2*x1741))+(((-1.0)*x1738)));
evalcond[4]=((-0.2125)+((x1736*x1743))+((x1739*x1742))+((x1739*x1744))+(((-1.0)*x1736*x1741))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1745=cj2*cj2;
IkReal x1746=((0.045)*px);
IkReal x1747=(cj2*sj2);
IkReal x1748=((0.045)*cj3);
IkReal x1749=((0.3)*sj3);
IkReal x1750=(py*x1745);
CheckValue<IkReal> x1751=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*pp))+((cj2*(pz*pz))))),-1);
if(!x1751.valid){
continue;
}
CheckValue<IkReal> x1752 = IKatan2WithCheck(IkReal((((px*x1747*x1749))+(((-0.045)*x1750))+(((-1.0)*x1749*x1750))+((x1746*x1747))+(((-1.0)*cj3*x1746*x1747))+((x1748*x1750)))),(((py*x1747*x1748))+(((-1.0)*px*x1745*x1749))+(((-0.045)*py*x1747))+((cj3*x1745*x1746))+(((-1.0)*x1745*x1746))+(((-1.0)*py*x1747*x1749))),IKFAST_ATAN2_MAGTHRESH);
if(!x1752.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1751.value)))+(x1752.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1753=IKcos(j0);
IkReal x1754=IKsin(j0);
IkReal x1755=((0.045)*cj2);
IkReal x1756=((0.09)*sj2);
IkReal x1757=((0.3)*sj3);
IkReal x1758=((0.045)*cj3);
IkReal x1759=((0.09)*cj2);
IkReal x1760=((1.0)*cj2);
IkReal x1761=(px*x1754);
IkReal x1762=(px*x1753);
IkReal x1763=(py*x1753);
IkReal x1764=(py*x1754);
evalcond[0]=((((-1.0)*x1763))+x1761+(((0.045)*sj2))+(((-1.0)*sj2*x1758))+((sj2*x1757)));
evalcond[1]=((((-1.0)*x1764))+(((-1.0)*x1762))+x1755+((cj2*x1757))+(((-1.0)*cj3*x1755)));
evalcond[2]=(((sj2*x1762))+((sj2*x1764))+(((-1.0)*x1760*x1763))+((cj2*x1761)));
evalcond[3]=((0.045)+x1757+((sj2*x1761))+(((-1.0)*x1760*x1764))+(((-1.0)*x1760*x1762))+(((-1.0)*x1758))+(((-1.0)*sj2*x1763)));
evalcond[4]=((-0.2125)+((x1759*x1764))+((x1759*x1762))+((x1756*x1763))+(((-1.0)*x1756*x1761))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1765=(px*sj2);
IkReal x1766=((0.3)*sj3);
IkReal x1767=(cj2*py);
IkReal x1768=(py*sj2);
IkReal x1769=((0.045)*cj3*py);
IkReal x1770=((0.045)*cj2*px);
CheckValue<IkReal> x1771 = IKatan2WithCheck(IkReal(((((0.045)*cj3*x1765))+(((0.045)*x1767))+(((-1.0)*x1765*x1766))+((x1766*x1767))+(((-0.045)*cj3*x1767))+(((-0.045)*x1765)))),((((0.045)*x1768))+(((-1.0)*cj3*x1770))+x1770+((cj2*px*x1766))+((x1766*x1768))+(((-0.045)*cj3*x1768))),IKFAST_ATAN2_MAGTHRESH);
if(!x1771.valid){
continue;
}
CheckValue<IkReal> x1772=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1772.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1771.value)+(((1.5707963267949)*(x1772.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1773=IKcos(j0);
IkReal x1774=IKsin(j0);
IkReal x1775=((0.045)*cj2);
IkReal x1776=((0.09)*sj2);
IkReal x1777=((0.3)*sj3);
IkReal x1778=((0.045)*cj3);
IkReal x1779=((0.09)*cj2);
IkReal x1780=((1.0)*cj2);
IkReal x1781=(px*x1774);
IkReal x1782=(px*x1773);
IkReal x1783=(py*x1773);
IkReal x1784=(py*x1774);
evalcond[0]=(x1781+(((-1.0)*sj2*x1778))+(((0.045)*sj2))+(((-1.0)*x1783))+((sj2*x1777)));
evalcond[1]=((((-1.0)*cj3*x1775))+x1775+(((-1.0)*x1784))+(((-1.0)*x1782))+((cj2*x1777)));
evalcond[2]=(((sj2*x1784))+((sj2*x1782))+((cj2*x1781))+(((-1.0)*x1780*x1783)));
evalcond[3]=((0.045)+(((-1.0)*sj2*x1783))+((sj2*x1781))+x1777+(((-1.0)*x1778))+(((-1.0)*x1780*x1784))+(((-1.0)*x1780*x1782)));
evalcond[4]=((-0.2125)+((x1779*x1782))+((x1779*x1784))+(((-1.0)*pp))+(((1.1)*pz))+((x1776*x1783))+(((-1.0)*x1776*x1781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1785=((0.045)*sj3);
IkReal x1786=((0.3)*cj3);
IkReal x1787=(x1785+x1786);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1787))+(((-1.0)*pz)));
evalcond[3]=((0.55)+x1787+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x1788=((0.3)*sj3);
IkReal x1789=(px*sj2);
IkReal x1790=((0.045)*py);
IkReal x1791=(pp+(((-1.0)*(pz*pz))));
IkReal x1792=(cj3*x1790);
IkReal x1793=((0.045)*cj2*px);
j0eval[0]=x1791;
j0eval[1]=((IKabs(((((-1.0)*cj2*py*x1788))+((cj2*x1792))+(((0.045)*cj3*x1789))+(((-1.0)*cj2*x1790))+(((-1.0)*x1788*x1789))+(((-0.045)*x1789)))))+(IKabs(((((-1.0)*sj2*x1792))+(((-1.0)*x1793))+((py*sj2*x1788))+((sj2*x1790))+((cj3*x1793))+(((-1.0)*cj2*px*x1788))))));
j0eval[2]=IKsign(x1791);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x1794=((((-1.0)*cj2*pp))+((cj2*(pz*pz))));
j0eval[0]=x1794;
j0eval[1]=IKsign(x1794);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x1795=((((-1.0)*sj2*(pz*pz)))+((pp*sj2)));
j0eval[0]=x1795;
j0eval[1]=IKsign(x1795);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x1796=((20.0)*sj3);
IkReal x1797=((3.0)*px);
IkReal x1798=((3.0)*py);
IkReal x1799=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x1799;
j0eval[1]=((IKabs((x1797+(((-1.0)*cj3*x1797))+((px*x1796)))))+(IKabs((x1798+((py*x1796))+(((-1.0)*cj3*x1798))))));
j0eval[2]=IKsign(x1799);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x1800=pz*pz;
IkReal x1801=((80.0)*pp);
IkReal x1802=((88.0)*pz);
j0eval[0]=(pp+(((-1.0)*x1800)));
j0eval[1]=IKsign(((((9.0)*pp))+(((-9.0)*x1800))));
j0eval[2]=((IKabs(((((-1.0)*py*x1801))+(((-1.0)*py*x1802))+(((-17.0)*py)))))+(IKabs(((((-17.0)*px))+(((-1.0)*px*x1802))+(((-1.0)*px*x1801))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1803=pz*pz;
IkReal x1804=((80.0)*pp);
IkReal x1805=((88.0)*pz);
j0eval[0]=(pp+(((-1.0)*x1803)));
j0eval[1]=IKsign(((((9.0)*pp))+(((-9.0)*x1803))));
j0eval[2]=((IKabs(((((-17.0)*px))+(((-1.0)*px*x1805))+(((-1.0)*px*x1804)))))+(IKabs(((((-1.0)*py*x1804))+(((-1.0)*py*x1805))+(((-17.0)*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1806=((110.0)*pz);
IkReal x1807=((100.0)*pp);
CheckValue<IkReal> x1808 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1807))+(((-1.0)*py*x1806))+(((-21.25)*py)))),((((-21.25)*px))+(((-1.0)*px*x1807))+(((-1.0)*px*x1806))),IKFAST_ATAN2_MAGTHRESH);
if(!x1808.valid){
continue;
}
CheckValue<IkReal> x1809=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1809.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1808.value)+(((1.5707963267949)*(x1809.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1810=IKsin(j0);
IkReal x1811=IKcos(j0);
IkReal x1812=(px*x1811);
IkReal x1813=(py*x1810);
evalcond[0]=(x1812+x1813);
evalcond[1]=(((px*x1810))+(((-1.0)*py*x1811)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x1813))+(((-0.09)*x1812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1814=((0.045)*cj3);
IkReal x1815=((0.3)*sj3);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((0.045)+(((-1.0)*x1814))+x1815);
evalcond[3]=((-0.045)+(((-1.0)*x1815))+x1814);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1816=((110.0)*pz);
IkReal x1817=((100.0)*pp);
CheckValue<IkReal> x1818 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1816))+(((-1.0)*py*x1817))+(((-21.25)*py)))),((((-21.25)*px))+(((-1.0)*px*x1817))+(((-1.0)*px*x1816))),IKFAST_ATAN2_MAGTHRESH);
if(!x1818.valid){
continue;
}
CheckValue<IkReal> x1819=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1819.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1818.value)+(((1.5707963267949)*(x1819.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1820=IKsin(j0);
IkReal x1821=IKcos(j0);
IkReal x1822=(px*x1821);
IkReal x1823=(py*x1820);
evalcond[0]=((((-1.0)*py*x1821))+((px*x1820)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1823+x1822+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x1822))+(((-0.09)*x1823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1824=((0.3)*sj3);
IkReal x1825=((0.045)*px);
IkReal x1826=((0.045)*py);
CheckValue<IkReal> x1827=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1827.valid){
continue;
}
CheckValue<IkReal> x1828 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x1826))+((py*x1824))+x1826)),((((-1.0)*cj3*x1825))+((px*x1824))+x1825),IKFAST_ATAN2_MAGTHRESH);
if(!x1828.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1827.value)))+(x1828.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1829=IKsin(j0);
IkReal x1830=IKcos(j0);
IkReal x1831=(px*x1830);
IkReal x1832=(py*x1829);
evalcond[0]=(((px*x1829))+(((-1.0)*py*x1830)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1832+x1831+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x1831))+(((-0.09)*x1832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1833=((20.0)*sj3);
IkReal x1834=((3.0)*px);
IkReal x1835=((3.0)*py);
IkReal x1836=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x1836;
j0eval[1]=((IKabs((((px*x1833))+x1834+(((-1.0)*cj3*x1834)))))+(IKabs((x1835+((py*x1833))+(((-1.0)*cj3*x1835))))));
j0eval[2]=IKsign(x1836);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1837=pz*pz;
IkReal x1838=((80.0)*pp);
IkReal x1839=((88.0)*pz);
j0eval[0]=((((-1.0)*pp))+x1837);
j0eval[1]=IKsign(((((-9.0)*pp))+(((9.0)*x1837))));
j0eval[2]=((IKabs(((((-1.0)*px*x1839))+(((-1.0)*px*x1838))+(((-17.0)*px)))))+(IKabs(((((-1.0)*py*x1838))+(((-1.0)*py*x1839))+(((-17.0)*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1840=pz*pz;
IkReal x1841=((80.0)*pp);
IkReal x1842=((88.0)*pz);
j0eval[0]=((((-1.0)*pp))+x1840);
j0eval[1]=IKsign(((((9.0)*x1840))+(((-9.0)*pp))));
j0eval[2]=((IKabs(((((-1.0)*py*x1842))+(((-1.0)*py*x1841))+(((-17.0)*py)))))+(IKabs(((((-1.0)*px*x1841))+(((-1.0)*px*x1842))+(((-17.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1843=((110.0)*pz);
IkReal x1844=((100.0)*pp);
CheckValue<IkReal> x1845=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1845.valid){
continue;
}
CheckValue<IkReal> x1846 = IKatan2WithCheck(IkReal(((((-21.25)*py))+(((-1.0)*py*x1844))+(((-1.0)*py*x1843)))),((((-1.0)*px*x1844))+(((-1.0)*px*x1843))+(((-21.25)*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x1846.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1845.value)))+(x1846.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1847=IKcos(j0);
IkReal x1848=IKsin(j0);
IkReal x1849=((1.0)*py);
IkReal x1850=(px*x1847);
evalcond[0]=(((px*x1848))+(((-1.0)*x1847*x1849)));
evalcond[1]=((((-1.0)*x1850))+(((-1.0)*x1848*x1849)));
evalcond[2]=((-0.2125)+(((0.09)*x1850))+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*py*x1848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1851=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=x1851;
evalcond[3]=x1851;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1852=((110.0)*pz);
IkReal x1853=((100.0)*pp);
CheckValue<IkReal> x1854=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1854.valid){
continue;
}
CheckValue<IkReal> x1855 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1852))+(((-1.0)*py*x1853))+(((-21.25)*py)))),((((-21.25)*px))+(((-1.0)*px*x1853))+(((-1.0)*px*x1852))),IKFAST_ATAN2_MAGTHRESH);
if(!x1855.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1854.value)))+(x1855.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1856=IKcos(j0);
IkReal x1857=IKsin(j0);
IkReal x1858=((1.0)*py);
IkReal x1859=(px*x1856);
evalcond[0]=((((-1.0)*x1856*x1858))+((px*x1857)));
evalcond[1]=((0.045)+(((-1.0)*x1859))+(((-1.0)*x1857*x1858))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1859))+(((0.09)*py*x1857))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1860=((0.3)*sj3);
IkReal x1861=((0.045)*px);
IkReal x1862=((0.045)*py);
CheckValue<IkReal> x1863=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1863.valid){
continue;
}
CheckValue<IkReal> x1864 = IKatan2WithCheck(IkReal((((py*x1860))+x1862+(((-1.0)*cj3*x1862)))),(x1861+(((-1.0)*cj3*x1861))+((px*x1860))),IKFAST_ATAN2_MAGTHRESH);
if(!x1864.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1863.value)))+(x1864.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1865=IKcos(j0);
IkReal x1866=IKsin(j0);
IkReal x1867=((1.0)*py);
IkReal x1868=(px*x1865);
evalcond[0]=((((-1.0)*x1865*x1867))+((px*x1866)));
evalcond[1]=((0.045)+(((-1.0)*x1866*x1867))+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x1868)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1866))+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x1868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1869=((20.0)*sj3);
IkReal x1870=((3.0)*px);
IkReal x1871=((3.0)*py);
IkReal x1872=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x1872;
j0eval[1]=((IKabs(((((-1.0)*cj3*x1870))+x1870+((px*x1869)))))+(IKabs(((((-1.0)*x1871))+((cj3*x1871))+(((-1.0)*py*x1869))))));
j0eval[2]=IKsign(x1872);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1873=pz*pz;
IkReal x1874=((80.0)*pp);
IkReal x1875=((88.0)*pz);
j0eval[0]=(pp+(((-1.0)*x1873)));
j0eval[1]=((IKabs(((((-1.0)*px*x1874))+(((-1.0)*px*x1875))+(((-17.0)*px)))))+(IKabs(((((17.0)*py))+((py*x1874))+((py*x1875))))));
j0eval[2]=IKsign(((((9.0)*pp))+(((-9.0)*x1873))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1876=pz*pz;
IkReal x1877=((80.0)*pp);
IkReal x1878=((88.0)*pz);
j0eval[0]=(pp+(((-1.0)*x1876)));
j0eval[1]=((IKabs(((((-1.0)*px*x1877))+(((-1.0)*px*x1878))+(((-17.0)*px)))))+(IKabs(((((17.0)*py))+((py*x1877))+((py*x1878))))));
j0eval[2]=IKsign(((((9.0)*pp))+(((-9.0)*x1876))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1879=((110.0)*pz);
IkReal x1880=((100.0)*pp);
CheckValue<IkReal> x1881 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1879))+(((-1.0)*px*x1880))+(((-21.25)*px)))),((((21.25)*py))+((py*x1880))+((py*x1879))),IKFAST_ATAN2_MAGTHRESH);
if(!x1881.valid){
continue;
}
CheckValue<IkReal> x1882=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1882.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1881.value)+(((1.5707963267949)*(x1882.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1883=IKcos(j0);
IkReal x1884=IKsin(j0);
IkReal x1885=(px*x1884);
IkReal x1886=((1.0)*x1883);
evalcond[0]=(x1885+(((-1.0)*py*x1886)));
evalcond[1]=((((-1.0)*px*x1886))+(((-1.0)*py*x1884)));
evalcond[2]=((-0.2125)+(((-0.09)*x1885))+(((0.09)*py*x1883))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1887=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=x1887;
evalcond[2]=0;
evalcond[3]=x1887;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1888=((110.0)*pz);
IkReal x1889=((100.0)*pp);
CheckValue<IkReal> x1890 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1888))+(((-1.0)*px*x1889))+(((-21.25)*px)))),((((21.25)*py))+((py*x1888))+((py*x1889))),IKFAST_ATAN2_MAGTHRESH);
if(!x1890.valid){
continue;
}
CheckValue<IkReal> x1891=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1891.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1890.value)+(((1.5707963267949)*(x1891.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1892=IKsin(j0);
IkReal x1893=IKcos(j0);
IkReal x1894=(px*x1892);
IkReal x1895=((1.0)*x1893);
evalcond[0]=((((-1.0)*px*x1895))+(((-1.0)*py*x1892)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1894+(((0.3)*sj3))+(((-1.0)*py*x1895)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1893))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x1894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1896=((0.3)*sj3);
IkReal x1897=((0.045)*px);
IkReal x1898=((0.045)*py);
CheckValue<IkReal> x1899=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1899.valid){
continue;
}
CheckValue<IkReal> x1900 = IKatan2WithCheck(IkReal((((px*x1896))+x1897+(((-1.0)*cj3*x1897)))),(((cj3*x1898))+(((-1.0)*x1898))+(((-1.0)*py*x1896))),IKFAST_ATAN2_MAGTHRESH);
if(!x1900.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1899.value)))+(x1900.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1901=IKsin(j0);
IkReal x1902=IKcos(j0);
IkReal x1903=(px*x1901);
IkReal x1904=((1.0)*x1902);
evalcond[0]=((((-1.0)*px*x1904))+(((-1.0)*py*x1901)));
evalcond[1]=((0.045)+(((-1.0)*py*x1904))+(((-0.045)*cj3))+x1903+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*py*x1902))+(((-0.09)*x1903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1905=((20.0)*sj3);
IkReal x1906=((3.0)*px);
IkReal x1907=((3.0)*py);
IkReal x1908=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x1908;
j0eval[1]=((IKabs(((((-1.0)*px*x1905))+((cj3*x1906))+(((-1.0)*x1906)))))+(IKabs((((py*x1905))+x1907+(((-1.0)*cj3*x1907))))));
j0eval[2]=IKsign(x1908);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1909=pz*pz;
IkReal x1910=((80.0)*pp);
IkReal x1911=((88.0)*pz);
j0eval[0]=((((-1.0)*pp))+x1909);
j0eval[1]=IKsign(((((9.0)*x1909))+(((-9.0)*pp))));
j0eval[2]=((IKabs(((((-1.0)*px*x1910))+(((-1.0)*px*x1911))+(((-17.0)*px)))))+(IKabs((((py*x1910))+((py*x1911))+(((17.0)*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1912=pz*pz;
IkReal x1913=((80.0)*pp);
IkReal x1914=((88.0)*pz);
j0eval[0]=((((-1.0)*pp))+x1912);
j0eval[1]=IKsign(((((-9.0)*pp))+(((9.0)*x1912))));
j0eval[2]=((IKabs((((py*x1914))+((py*x1913))+(((17.0)*py)))))+(IKabs(((((-1.0)*px*x1914))+(((-1.0)*px*x1913))+(((-17.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1915=((110.0)*pz);
IkReal x1916=((100.0)*pp);
CheckValue<IkReal> x1917 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1916))+(((-1.0)*px*x1915))+(((-21.25)*px)))),((((21.25)*py))+((py*x1916))+((py*x1915))),IKFAST_ATAN2_MAGTHRESH);
if(!x1917.valid){
continue;
}
CheckValue<IkReal> x1918=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1918.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1917.value)+(((1.5707963267949)*(x1918.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1919=IKsin(j0);
IkReal x1920=IKcos(j0);
IkReal x1921=(px*x1919);
IkReal x1922=(py*x1920);
evalcond[0]=(((py*x1919))+((px*x1920)));
evalcond[1]=((((-1.0)*x1922))+x1921);
evalcond[2]=((-0.2125)+(((0.09)*x1921))+(((-0.09)*x1922))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1923=((0.3)*sj3);
IkReal x1924=((0.045)*cj3);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.045)+(((-1.0)*x1923))+x1924);
evalcond[2]=0;
evalcond[3]=((0.045)+(((-1.0)*x1924))+x1923);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1925=((110.0)*pz);
IkReal x1926=((100.0)*pp);
CheckValue<IkReal> x1927=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1927.valid){
continue;
}
CheckValue<IkReal> x1928 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1926))+(((-1.0)*px*x1925))+(((-21.25)*px)))),((((21.25)*py))+((py*x1926))+((py*x1925))),IKFAST_ATAN2_MAGTHRESH);
if(!x1928.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1927.value)))+(x1928.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1929=IKsin(j0);
IkReal x1930=IKcos(j0);
IkReal x1931=(px*x1929);
IkReal x1932=(py*x1930);
evalcond[0]=(((px*x1930))+((py*x1929)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1932))+x1931+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1931))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x1932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1933=((0.3)*sj3);
IkReal x1934=((0.045)*px);
IkReal x1935=((0.045)*py);
CheckValue<IkReal> x1936 = IKatan2WithCheck(IkReal((((cj3*x1934))+(((-1.0)*px*x1933))+(((-1.0)*x1934)))),(((py*x1933))+x1935+(((-1.0)*cj3*x1935))),IKFAST_ATAN2_MAGTHRESH);
if(!x1936.valid){
continue;
}
CheckValue<IkReal> x1937=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1937.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1936.value)+(((1.5707963267949)*(x1937.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1938=IKsin(j0);
IkReal x1939=IKcos(j0);
IkReal x1940=(px*x1938);
IkReal x1941=(py*x1939);
evalcond[0]=(((px*x1939))+((py*x1938)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1940+(((-1.0)*x1941))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x1940))+(((-0.09)*x1941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1942=pz*pz;
IkReal x1943=(pp*sj2);
IkReal x1944=((80.0)*pp);
IkReal x1945=((88.0)*pz);
IkReal x1946=(sj2*x1942);
j0eval[0]=(x1943+(((-1.0)*x1946)));
j0eval[1]=IKsign(((((0.09)*x1943))+(((-0.09)*x1946))));
j0eval[2]=((IKabs((((py*x1945))+((py*x1944))+(((17.0)*py)))))+(IKabs(((((-1.0)*px*x1945))+(((-1.0)*px*x1944))+(((-17.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1947=pz*pz;
IkReal x1948=((80.0)*pp);
IkReal x1949=(cj2*pp);
IkReal x1950=((88.0)*pz);
IkReal x1951=(cj2*x1947);
j0eval[0]=(x1949+(((-1.0)*x1951)));
j0eval[1]=((IKabs(((((-1.0)*px*x1950))+(((-1.0)*px*x1948))+(((-17.0)*px)))))+(IKabs(((((-1.0)*py*x1950))+(((-1.0)*py*x1948))+(((-17.0)*py))))));
j0eval[2]=IKsign(((((-0.09)*x1951))+(((0.09)*x1949))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1952=pz*pz;
IkReal x1953=(cj2*py);
IkReal x1954=(pp*px);
IkReal x1955=((1.1)*pz);
IkReal x1956=(px*sj2);
IkReal x1957=((1.0)*pp);
IkReal x1958=(py*sj2);
IkReal x1959=(cj2*px);
j0eval[0]=((((-1.0)*x1957))+x1952);
j0eval[1]=((IKabs((((sj2*x1954))+((x1955*x1956))+((pp*x1953))+((x1953*x1955))+(((0.2125)*x1956))+(((0.2125)*x1953)))))+(IKabs(((((-1.0)*x1957*x1958))+((cj2*x1954))+((x1955*x1959))+(((-1.0)*x1955*x1958))+(((0.2125)*x1959))+(((-0.2125)*x1958))))));
j0eval[2]=IKsign(((((-0.09)*pp))+(((0.09)*x1952))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1960=(cj2*py);
IkReal x1961=(pp*px);
IkReal x1962=((1.1)*pz);
IkReal x1963=(px*sj2);
IkReal x1964=(py*sj2);
IkReal x1965=(cj2*px);
CheckValue<IkReal> x1966=IKPowWithIntegerCheck(IKsign(((((-0.09)*pp))+(((0.09)*(pz*pz))))),-1);
if(!x1966.valid){
continue;
}
CheckValue<IkReal> x1967 = IKatan2WithCheck(IkReal((((sj2*x1961))+((pp*x1960))+(((0.2125)*x1960))+(((0.2125)*x1963))+((x1960*x1962))+((x1962*x1963)))),(((cj2*x1961))+(((0.2125)*x1965))+(((-1.0)*pp*x1964))+((x1962*x1965))+(((-1.0)*x1962*x1964))+(((-0.2125)*x1964))),IKFAST_ATAN2_MAGTHRESH);
if(!x1967.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1966.value)))+(x1967.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1968=IKcos(j0);
IkReal x1969=IKsin(j0);
IkReal x1970=(py*sj2);
IkReal x1971=(cj2*px);
IkReal x1972=(px*x1969);
IkReal x1973=((1.0)*x1968);
IkReal x1974=((0.09)*x1968);
IkReal x1975=(py*x1969);
evalcond[0]=(x1972+(((-1.0)*py*x1973)));
evalcond[1]=((((-1.0)*x1975))+(((-1.0)*px*x1973)));
evalcond[2]=(((sj2*x1972))+((cj2*x1975))+(((-1.0)*x1970*x1973))+((x1968*x1971)));
evalcond[3]=(((x1969*x1971))+(((-1.0)*cj2*py*x1973))+(((-1.0)*x1969*x1970))+(((-1.0)*px*sj2*x1973)));
evalcond[4]=((-0.2125)+(((-0.09)*sj2*x1972))+((x1970*x1974))+(((-1.0)*x1971*x1974))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*cj2*x1975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1976=((1.1)*pz);
IkReal x1977=((1.0)*pp);
IkReal x1978=((0.09)*cj2);
CheckValue<IkReal> x1979=IKPowWithIntegerCheck(IKsign((((pp*x1978))+(((-1.0)*x1978*(pz*pz))))),-1);
if(!x1979.valid){
continue;
}
CheckValue<IkReal> x1980 = IKatan2WithCheck(IkReal(((((-0.2125)*py))+(((-1.0)*py*x1977))+(((-1.0)*py*x1976)))),((((-0.2125)*px))+(((-1.0)*px*x1976))+(((-1.0)*px*x1977))),IKFAST_ATAN2_MAGTHRESH);
if(!x1980.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1979.value)))+(x1980.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1981=IKcos(j0);
IkReal x1982=IKsin(j0);
IkReal x1983=(py*sj2);
IkReal x1984=(cj2*px);
IkReal x1985=(px*x1982);
IkReal x1986=((1.0)*x1981);
IkReal x1987=((0.09)*x1981);
IkReal x1988=(py*x1982);
evalcond[0]=(x1985+(((-1.0)*py*x1986)));
evalcond[1]=((((-1.0)*px*x1986))+(((-1.0)*x1988)));
evalcond[2]=(((sj2*x1985))+((cj2*x1988))+(((-1.0)*x1983*x1986))+((x1981*x1984)));
evalcond[3]=((((-1.0)*cj2*py*x1986))+((x1982*x1984))+(((-1.0)*px*sj2*x1986))+(((-1.0)*x1982*x1983)));
evalcond[4]=((-0.2125)+(((-0.09)*sj2*x1985))+(((-1.0)*x1984*x1987))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*cj2*x1988))+((x1983*x1987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1989=((0.09)*sj2);
IkReal x1990=((1.1)*pz);
CheckValue<IkReal> x1991 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1990))+(((-1.0)*pp*px))+(((-0.2125)*px)))),((((0.2125)*py))+((py*x1990))+((pp*py))),IKFAST_ATAN2_MAGTHRESH);
if(!x1991.valid){
continue;
}
CheckValue<IkReal> x1992=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1989*(pz*pz)))+((pp*x1989)))),-1);
if(!x1992.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1991.value)+(((1.5707963267949)*(x1992.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1993=IKcos(j0);
IkReal x1994=IKsin(j0);
IkReal x1995=(py*sj2);
IkReal x1996=(cj2*px);
IkReal x1997=(px*x1994);
IkReal x1998=((1.0)*x1993);
IkReal x1999=((0.09)*x1993);
IkReal x2000=(py*x1994);
evalcond[0]=(x1997+(((-1.0)*py*x1998)));
evalcond[1]=((((-1.0)*px*x1998))+(((-1.0)*x2000)));
evalcond[2]=(((sj2*x1997))+(((-1.0)*x1995*x1998))+((cj2*x2000))+((x1993*x1996)));
evalcond[3]=((((-1.0)*px*sj2*x1998))+(((-1.0)*cj2*py*x1998))+((x1994*x1996))+(((-1.0)*x1994*x1995)));
evalcond[4]=((-0.2125)+(((-1.0)*x1996*x1999))+(((-0.09)*sj2*x1997))+((x1995*x1999))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*cj2*x2000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2001=((0.045)*cj2);
IkReal x2002=((0.3)*sj3);
IkReal x2003=((0.045)*cj3);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=(((sj2*x2002))+(((0.045)*sj2))+(((-1.0)*sj2*x2003)));
evalcond[2]=0;
evalcond[3]=((0.045)+x2002+(((-1.0)*x2003)));
evalcond[4]=((((-1.0)*x2001))+((cj3*x2001))+(((-1.0)*cj2*x2002)));
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2004=cj2*cj2;
IkReal x2005=((0.045)*px);
IkReal x2006=(cj2*sj2);
IkReal x2007=((0.3)*sj3);
IkReal x2008=((0.045)*py);
IkReal x2009=(cj3*x2008);
IkReal x2010=(py*x2004);
CheckValue<IkReal> x2011 = IKatan2WithCheck(IkReal(((((-1.0)*x2006*x2008))+(((-1.0)*py*x2006*x2007))+(((-1.0)*px*x2007))+(((-1.0)*cj3*x2004*x2005))+((px*x2004*x2007))+(((-1.0)*x2005))+((x2006*x2009))+((cj3*x2005))+((x2004*x2005)))),((((-1.0)*x2005*x2006))+(((-1.0)*x2004*x2008))+x2008+(((-1.0)*x2007*x2010))+((py*x2007))+(((-1.0)*x2009))+((cj3*x2005*x2006))+(((-1.0)*px*x2006*x2007))+((x2004*x2009))),IKFAST_ATAN2_MAGTHRESH);
if(!x2011.valid){
continue;
}
CheckValue<IkReal> x2012=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj2*(pz*pz)))+((pp*sj2)))),-1);
if(!x2012.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2011.value)+(((1.5707963267949)*(x2012.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2013=IKcos(j0);
IkReal x2014=IKsin(j0);
IkReal x2015=((0.045)*cj2);
IkReal x2016=((0.09)*sj2);
IkReal x2017=((0.3)*sj3);
IkReal x2018=((0.045)*cj3);
IkReal x2019=((1.0)*sj2);
IkReal x2020=((0.09)*cj2);
IkReal x2021=(px*x2014);
IkReal x2022=(px*x2013);
IkReal x2023=(py*x2013);
IkReal x2024=(py*x2014);
evalcond[0]=(x2021+(((0.045)*sj2))+(((-1.0)*x2023))+((sj2*x2017))+(((-1.0)*sj2*x2018)));
evalcond[1]=((((-1.0)*x2015))+((cj3*x2015))+(((-1.0)*x2022))+(((-1.0)*x2024))+(((-1.0)*cj2*x2017)));
evalcond[2]=((((-1.0)*cj2*x2023))+(((-1.0)*x2019*x2024))+(((-1.0)*x2019*x2022))+((cj2*x2021)));
evalcond[3]=((0.045)+(((-1.0)*x2018))+x2017+((sj2*x2021))+(((-1.0)*x2019*x2023))+((cj2*x2022))+((cj2*x2024)));
evalcond[4]=((-0.2125)+(((-1.0)*x2016*x2021))+(((-1.0)*pp))+(((-1.1)*pz))+((x2016*x2023))+(((-1.0)*x2020*x2024))+(((-1.0)*x2020*x2022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2025=cj2*cj2;
IkReal x2026=((0.045)*px);
IkReal x2027=((0.045)*py);
IkReal x2028=(cj2*sj2);
IkReal x2029=(cj3*x2028);
IkReal x2030=(cj3*x2025);
IkReal x2031=((0.3)*py*sj3);
IkReal x2032=((0.3)*px*sj3);
CheckValue<IkReal> x2033=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*pp))+((cj2*(pz*pz))))),-1);
if(!x2033.valid){
continue;
}
CheckValue<IkReal> x2034 = IKatan2WithCheck(IkReal((((x2025*x2031))+((x2026*x2028))+((x2025*x2027))+((x2028*x2032))+(((-1.0)*x2026*x2029))+(((-1.0)*x2027*x2030)))),(((x2025*x2032))+((x2025*x2026))+(((-1.0)*x2026*x2030))+((x2027*x2029))+(((-1.0)*x2028*x2031))+(((-1.0)*x2027*x2028))),IKFAST_ATAN2_MAGTHRESH);
if(!x2034.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2033.value)))+(x2034.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2035=IKcos(j0);
IkReal x2036=IKsin(j0);
IkReal x2037=((0.045)*cj2);
IkReal x2038=((0.09)*sj2);
IkReal x2039=((0.3)*sj3);
IkReal x2040=((0.045)*cj3);
IkReal x2041=((1.0)*sj2);
IkReal x2042=((0.09)*cj2);
IkReal x2043=(px*x2036);
IkReal x2044=(px*x2035);
IkReal x2045=(py*x2035);
IkReal x2046=(py*x2036);
evalcond[0]=(((sj2*x2039))+x2043+(((-1.0)*sj2*x2040))+(((0.045)*sj2))+(((-1.0)*x2045)));
evalcond[1]=((((-1.0)*x2044))+(((-1.0)*x2046))+((cj3*x2037))+(((-1.0)*x2037))+(((-1.0)*cj2*x2039)));
evalcond[2]=((((-1.0)*x2041*x2044))+(((-1.0)*x2041*x2046))+(((-1.0)*cj2*x2045))+((cj2*x2043)));
evalcond[3]=((0.045)+(((-1.0)*x2040))+x2039+(((-1.0)*x2041*x2045))+((cj2*x2044))+((cj2*x2046))+((sj2*x2043)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*x2042*x2044))+(((-1.0)*x2042*x2046))+(((-1.0)*x2038*x2043))+((x2038*x2045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2047=(px*sj2);
IkReal x2048=((0.3)*sj3);
IkReal x2049=(cj2*py);
IkReal x2050=(py*sj2);
IkReal x2051=((0.045)*cj3*py);
IkReal x2052=((0.045)*cj2*px);
CheckValue<IkReal> x2053=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x2053.valid){
continue;
}
CheckValue<IkReal> x2054 = IKatan2WithCheck(IkReal(((((0.045)*cj3*x2049))+(((0.045)*cj3*x2047))+(((-1.0)*x2047*x2048))+(((-0.045)*x2049))+(((-0.045)*x2047))+(((-1.0)*x2048*x2049)))),((((-0.045)*cj3*x2050))+(((-1.0)*cj2*px*x2048))+((x2048*x2050))+(((0.045)*x2050))+((cj3*x2052))+(((-1.0)*x2052))),IKFAST_ATAN2_MAGTHRESH);
if(!x2054.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2053.value)))+(x2054.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2055=IKcos(j0);
IkReal x2056=IKsin(j0);
IkReal x2057=((0.045)*cj2);
IkReal x2058=((0.09)*sj2);
IkReal x2059=((0.3)*sj3);
IkReal x2060=((0.045)*cj3);
IkReal x2061=((1.0)*sj2);
IkReal x2062=((0.09)*cj2);
IkReal x2063=(px*x2056);
IkReal x2064=(px*x2055);
IkReal x2065=(py*x2055);
IkReal x2066=(py*x2056);
evalcond[0]=(x2063+((sj2*x2059))+(((0.045)*sj2))+(((-1.0)*sj2*x2060))+(((-1.0)*x2065)));
evalcond[1]=((((-1.0)*cj2*x2059))+(((-1.0)*x2066))+(((-1.0)*x2064))+((cj3*x2057))+(((-1.0)*x2057)));
evalcond[2]=((((-1.0)*x2061*x2064))+(((-1.0)*x2061*x2066))+(((-1.0)*cj2*x2065))+((cj2*x2063)));
evalcond[3]=((0.045)+((sj2*x2063))+x2059+(((-1.0)*x2060))+(((-1.0)*x2061*x2065))+((cj2*x2066))+((cj2*x2064)));
evalcond[4]=((-0.2125)+(((-1.0)*x2058*x2063))+(((-1.0)*pp))+(((-1.1)*pz))+((x2058*x2065))+(((-1.0)*x2062*x2066))+(((-1.0)*x2062*x2064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2067=(cj3*py);
IkReal x2068=((0.3)*sj1);
IkReal x2069=((0.045)*sj2);
IkReal x2070=(cj3*px);
IkReal x2071=(px*sj1);
IkReal x2072=((0.3)*sj3);
IkReal x2073=((0.045)*sj3);
IkReal x2074=(py*sj1);
IkReal x2075=(cj1*cj2);
IkReal x2076=((0.045)*x2075);
CheckValue<IkReal> x2077=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x2077.valid){
continue;
}
CheckValue<IkReal> x2078 = IKatan2WithCheck(IkReal((((x2067*x2068))+(((-1.0)*px*sj2*x2072))+(((-1.0)*px*x2069))+((x2069*x2070))+((py*x2076))+(((0.55)*x2074))+(((-1.0)*x2067*x2076))+((x2073*x2074))+((py*x2072*x2075)))),(((py*sj2*x2072))+(((-1.0)*x2070*x2076))+((x2068*x2070))+((x2071*x2073))+((px*x2076))+((px*x2072*x2075))+(((0.55)*x2071))+((py*x2069))+(((-1.0)*x2067*x2069))),IKFAST_ATAN2_MAGTHRESH);
if(!x2078.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2077.value)))+(x2078.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2079=IKsin(j0);
IkReal x2080=IKcos(j0);
IkReal x2081=(cj1*sj2);
IkReal x2082=((0.09)*sj2);
IkReal x2083=((0.3)*sj3);
IkReal x2084=((0.045)*cj3);
IkReal x2085=((1.1)*sj1);
IkReal x2086=((0.3)*cj3);
IkReal x2087=(cj1*cj2);
IkReal x2088=((0.045)*sj3);
IkReal x2089=((1.0)*sj2);
IkReal x2090=(cj1*pz);
IkReal x2091=(px*x2079);
IkReal x2092=(px*x2080);
IkReal x2093=(py*x2080);
IkReal x2094=(py*x2079);
IkReal x2095=(cj2*pz*sj1);
evalcond[0]=((-0.55)+((sj1*x2092))+((sj1*x2094))+x2090+(((-1.0)*x2086))+(((-1.0)*x2088)));
evalcond[1]=((((-1.0)*sj2*x2084))+x2091+(((0.045)*sj2))+(((-1.0)*x2093))+((sj2*x2083)));
evalcond[2]=((((-1.0)*cj2*x2093))+(((-1.0)*pz*sj1*x2089))+((cj2*x2091))+((x2081*x2094))+((x2081*x2092)));
evalcond[3]=((((0.045)*x2087))+(((-1.0)*x2084*x2087))+((sj1*x2086))+((sj1*x2088))+((x2083*x2087))+(((0.55)*sj1))+(((-1.0)*x2092))+(((-1.0)*x2094)));
evalcond[4]=((0.045)+x2095+x2083+(((-1.0)*x2084))+(((-1.0)*x2089*x2093))+((sj2*x2091))+(((-1.0)*x2087*x2094))+(((-1.0)*x2087*x2092)));
evalcond[5]=((-0.2125)+(((-0.09)*x2095))+(((1.1)*x2090))+((x2082*x2093))+(((-1.0)*pp))+(((0.09)*x2087*x2094))+(((0.09)*x2087*x2092))+(((-1.0)*x2082*x2091))+((x2085*x2092))+((x2085*x2094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2096=((0.55)*cj2);
IkReal x2097=(cj2*sj1);
IkReal x2098=(py*sj2);
IkReal x2099=((0.045)*sj3);
IkReal x2100=(px*pz);
IkReal x2101=(cj2*px);
IkReal x2102=(cj1*cj2);
IkReal x2103=(cj2*py);
IkReal x2104=((0.3)*cj3);
IkReal x2105=((0.55)*cj1*sj2);
IkReal x2106=(cj1*px*sj2);
CheckValue<IkReal> x2107 = IKatan2WithCheck(IkReal((((px*x2105))+(((-1.0)*py*x2096))+((x2099*x2106))+(((-1.0)*x2103*x2104))+((x2104*x2106))+(((-1.0)*sj2*x2100))+(((-1.0)*x2099*x2103))+((py*pz*x2102)))),((((-1.0)*cj1*x2098*x2104))+(((-1.0)*x2101*x2104))+(((-1.0)*x2099*x2101))+((x2100*x2102))+(((-1.0)*px*x2096))+(((-0.55)*cj1*x2098))+(((-1.0)*cj1*x2098*x2099))+((pz*x2098))),IKFAST_ATAN2_MAGTHRESH);
if(!x2107.valid){
continue;
}
CheckValue<IkReal> x2108=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*x2097))+((x2097*(pz*pz))))),-1);
if(!x2108.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2107.value)+(((1.5707963267949)*(x2108.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2109=IKsin(j0);
IkReal x2110=IKcos(j0);
IkReal x2111=(cj1*sj2);
IkReal x2112=((0.09)*sj2);
IkReal x2113=((0.3)*sj3);
IkReal x2114=((0.045)*cj3);
IkReal x2115=((1.1)*sj1);
IkReal x2116=((0.3)*cj3);
IkReal x2117=(cj1*cj2);
IkReal x2118=((0.045)*sj3);
IkReal x2119=((1.0)*sj2);
IkReal x2120=(cj1*pz);
IkReal x2121=(px*x2109);
IkReal x2122=(px*x2110);
IkReal x2123=(py*x2110);
IkReal x2124=(py*x2109);
IkReal x2125=(cj2*pz*sj1);
evalcond[0]=((-0.55)+((sj1*x2124))+((sj1*x2122))+x2120+(((-1.0)*x2118))+(((-1.0)*x2116)));
evalcond[1]=((((-1.0)*sj2*x2114))+((sj2*x2113))+x2121+(((0.045)*sj2))+(((-1.0)*x2123)));
evalcond[2]=((((-1.0)*pz*sj1*x2119))+(((-1.0)*cj2*x2123))+((cj2*x2121))+((x2111*x2124))+((x2111*x2122)));
evalcond[3]=((((-1.0)*x2114*x2117))+((sj1*x2116))+((sj1*x2118))+(((-1.0)*x2124))+(((-1.0)*x2122))+(((0.55)*sj1))+((x2113*x2117))+(((0.045)*x2117)));
evalcond[4]=((0.045)+((sj2*x2121))+(((-1.0)*x2119*x2123))+x2125+x2113+(((-1.0)*x2114))+(((-1.0)*x2117*x2122))+(((-1.0)*x2117*x2124)));
evalcond[5]=((-0.2125)+(((0.09)*x2117*x2122))+(((0.09)*x2117*x2124))+((x2112*x2123))+(((-1.0)*x2112*x2121))+((x2115*x2124))+((x2115*x2122))+(((-0.09)*x2125))+(((-1.0)*pp))+(((1.1)*x2120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2126=((0.045)*px);
IkReal x2127=((0.3)*sj3);
IkReal x2128=(sj1*sj2);
IkReal x2129=((0.3)*cj3);
IkReal x2130=(py*x2128);
IkReal x2131=((1.0)*cj1*pz);
CheckValue<IkReal> x2132=IKPowWithIntegerCheck(IKsign((((pp*sj1))+(((-1.0)*sj1*(pz*pz))))),-1);
if(!x2132.valid){
continue;
}
CheckValue<IkReal> x2133 = IKatan2WithCheck(IkReal((((cj3*x2126*x2128))+(((0.045)*py*sj3))+((py*x2129))+(((-1.0)*px*x2127*x2128))+(((-1.0)*py*x2131))+(((0.55)*py))+(((-1.0)*x2126*x2128)))),(((sj3*x2126))+(((0.045)*x2130))+(((-0.045)*cj3*x2130))+(((-1.0)*px*x2131))+((px*x2129))+((x2127*x2130))+(((0.55)*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x2133.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2132.value)))+(x2133.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2134=IKsin(j0);
IkReal x2135=IKcos(j0);
IkReal x2136=(cj1*sj2);
IkReal x2137=((0.09)*sj2);
IkReal x2138=((0.3)*sj3);
IkReal x2139=((0.045)*cj3);
IkReal x2140=((1.1)*sj1);
IkReal x2141=((0.3)*cj3);
IkReal x2142=(cj1*cj2);
IkReal x2143=((0.045)*sj3);
IkReal x2144=((1.0)*sj2);
IkReal x2145=(cj1*pz);
IkReal x2146=(px*x2134);
IkReal x2147=(px*x2135);
IkReal x2148=(py*x2135);
IkReal x2149=(py*x2134);
IkReal x2150=(cj2*pz*sj1);
evalcond[0]=((-0.55)+x2145+(((-1.0)*x2143))+(((-1.0)*x2141))+((sj1*x2149))+((sj1*x2147)));
evalcond[1]=((((-1.0)*x2148))+(((-1.0)*sj2*x2139))+x2146+(((0.045)*sj2))+((sj2*x2138)));
evalcond[2]=((((-1.0)*pz*sj1*x2144))+(((-1.0)*cj2*x2148))+((cj2*x2146))+((x2136*x2149))+((x2136*x2147)));
evalcond[3]=(((x2138*x2142))+(((-1.0)*x2149))+(((-1.0)*x2147))+((sj1*x2141))+((sj1*x2143))+(((0.55)*sj1))+(((0.045)*x2142))+(((-1.0)*x2139*x2142)));
evalcond[4]=((0.045)+(((-1.0)*x2144*x2148))+(((-1.0)*x2139))+x2138+x2150+(((-1.0)*x2142*x2147))+(((-1.0)*x2142*x2149))+((sj2*x2146)));
evalcond[5]=((-0.2125)+(((-0.09)*x2150))+(((0.09)*x2142*x2147))+(((0.09)*x2142*x2149))+(((-1.0)*pp))+((x2140*x2147))+((x2140*x2149))+((x2137*x2148))+(((1.1)*x2145))+(((-1.0)*x2137*x2146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2151=((0.045)*sj2);
CheckValue<IkReal> x2154 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x2154.valid){
continue;
}
IkReal x2152=((1.0)*(x2154.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x2155=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x2155.valid){
continue;
}
if( (((x2155.value)*(((((0.3)*sj2*sj3))+x2151+(((-1.0)*cj3*x2151)))))) < -1-IKFAST_SINCOS_THRESH || (((x2155.value)*(((((0.3)*sj2*sj3))+x2151+(((-1.0)*cj3*x2151)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2153=IKasin(((x2155.value)*(((((0.3)*sj2*sj3))+x2151+(((-1.0)*cj3*x2151))))));
j0array[0]=((((-1.0)*x2152))+(((-1.0)*x2153)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x2153+(((-1.0)*x2152)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[2];
IkReal x2156=(py*sj0);
IkReal x2157=((0.3)*cj3);
IkReal x2158=((0.045)*sj3);
IkReal x2159=(cj2*pz);
IkReal x2160=((6.66666666666667)*cj3);
IkReal x2161=(cj0*px);
IkReal x2162=((1.0)*sj3);
j1eval[0]=((((-6.66666666666667)*sj3*x2159))+(((-1.0)*x2160*x2161))+((cj3*x2159))+(((-1.0)*x2161*x2162))+(((-1.0)*x2156*x2162))+(((-1.0)*x2156*x2160))+(((-12.2222222222222)*x2156))+(((-12.2222222222222)*x2161))+(((-1.0)*x2159)));
j1eval[1]=IKsign(((((-0.3)*sj3*x2159))+(((-0.55)*x2156))+(((-1.0)*x2157*x2161))+(((-1.0)*x2158*x2161))+(((-0.045)*x2159))+(((-0.55)*x2161))+(((0.045)*cj3*x2159))+(((-1.0)*x2156*x2157))+(((-1.0)*x2156*x2158))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2163=cj0*cj0;
IkReal x2164=py*py;
IkReal x2165=(sj2*x2163);
IkReal x2166=(((x2165*(px*px)))+((sj2*x2164))+((sj2*(pz*pz)))+(((2.0)*cj0*px*py*sj0*sj2))+(((-1.0)*x2164*x2165)));
j1eval[0]=x2166;
j1eval[1]=IKsign(x2166);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2167=(pz*sj2);
IkReal x2168=(py*sj0);
IkReal x2169=(cj0*px);
IkReal x2170=(cj2*sj2);
IkReal x2171=((1.0)*cj3);
IkReal x2172=((0.045)*x2170);
IkReal x2173=(sj3*x2170);
IkReal x2174=(x2168*x2173);
j1eval[0]=((((-1.0)*x2168*x2170*x2171))+(((6.66666666666667)*x2169*x2173))+(((-1.0)*sj3*x2167))+(((-1.0)*x2169*x2170*x2171))+(((6.66666666666667)*x2174))+(((-12.2222222222222)*x2167))+((x2168*x2170))+((x2169*x2170))+(((-6.66666666666667)*cj3*x2167)));
j1eval[1]=IKsign(((((0.3)*x2174))+(((-1.0)*cj3*x2168*x2172))+(((0.3)*x2169*x2173))+(((-0.045)*sj3*x2167))+(((-1.0)*cj3*x2169*x2172))+(((-0.55)*x2167))+(((-0.3)*cj3*x2167))+((x2168*x2172))+((x2169*x2172))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x2175=(((px*sj0))+(((-1.0)*cj0*py)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x2175;
evalcond[3]=x2175;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x2176=(cj0*px);
IkReal x2177=((0.310561435803037)*sj3);
IkReal x2178=(pp*pz);
IkReal x2179=(py*sj0);
IkReal x2180=((0.138057984353428)*pp);
IkReal x2181=((12.2222222222222)*sj3);
IkReal x2182=((5.4333061668025)*pp);
IkReal x2183=(pz*sj3);
j1eval[0]=((((7.28153581454315)*pz))+((x2179*x2182))+(((36.2220411120167)*x2178))+(((-1.0)*x2183))+(((-3.92556370551481)*x2179))+(((-3.92556370551481)*x2176))+((x2176*x2182))+(((-1.0)*x2176*x2181))+(((-1.0)*x2179*x2181)));
j1eval[1]=IKsign(((((-1.0)*x2176*x2177))+((x2179*x2180))+(((-0.0254095720202485)*x2183))+(((0.185020708697653)*pz))+((x2176*x2180))+(((-0.099746893695352)*x2176))+(((-0.099746893695352)*x2179))+(((0.92038656235619)*x2178))+(((-1.0)*x2177*x2179))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x2184=(cj0*px);
IkReal x2185=(py*sj0);
IkReal x2186=((0.3)*sj3);
IkReal x2187=((0.045)*cj3);
IkReal x2188=(pz*sj3);
IkReal x2189=((6.66666666666667)*sj3);
IkReal x2190=((1.0)*cj3);
IkReal x2191=(cj3*pz);
j1eval[0]=(x2185+x2184+(((-6.66666666666667)*x2191))+(((-1.0)*x2188))+(((-1.0)*x2185*x2190))+(((-1.0)*x2184*x2190))+(((-12.2222222222222)*pz))+((x2184*x2189))+((x2185*x2189)));
j1eval[1]=IKsign(((((-0.55)*pz))+(((-1.0)*x2185*x2187))+(((-0.045)*x2188))+(((-1.0)*x2184*x2187))+(((0.045)*x2184))+(((0.045)*x2185))+((x2184*x2186))+(((-0.3)*x2191))+((x2185*x2186))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x2192=(py*sj0);
IkReal x2193=(cj0*px);
IkReal x2194=(pp*pz);
IkReal x2195=((0.92038656235619)*pp);
IkReal x2196=(pz*sj3);
IkReal x2197=((36.2220411120167)*pp);
IkReal x2198=((0.0254095720202485)*sj3);
j1eval[0]=((((-12.2222222222222)*x2196))+((sj3*x2193))+((sj3*x2192))+(((-1.0)*x2193*x2197))+(((-1.0)*x2192*x2197))+(((-7.28153581454315)*x2193))+(((-7.28153581454315)*x2192))+(((-3.92556370551481)*pz))+(((5.4333061668025)*x2194)));
j1eval[1]=IKsign((((x2193*x2198))+((x2192*x2198))+(((-0.099746893695352)*pz))+(((-1.0)*x2193*x2195))+(((-1.0)*x2192*x2195))+(((-0.185020708697653)*x2192))+(((-0.185020708697653)*x2193))+(((0.138057984353428)*x2194))+(((-0.310561435803037)*x2196))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2199=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2199);
rxp0_1=(px*r20);
rxp1_0=(r21*x2199);
rxp1_1=(px*r21);
rxp2_0=(r22*x2199);
rxp2_1=(px*r22);
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2200=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2200);
rxp0_1=(px*r20);
rxp1_0=(r21*x2200);
rxp1_1=(px*r21);
rxp2_0=(r22*x2200);
rxp2_1=(px*r22);
j1eval[0]=((-1.0)+(((-4.97450565850019)*(py*py)))+(((-4.97450565850019)*(px*px))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2201=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2201);
rxp0_1=(px*r20);
rxp1_0=(r21*x2201);
rxp1_1=(px*r21);
rxp2_0=(r22*x2201);
rxp2_1=(px*r22);
IkReal x2202=(cj0*px);
IkReal x2203=((4.97450565850019)*sj0);
IkReal x2204=(py*sj0);
j1eval[0]=(x2202+x2204);
j1eval[1]=((((-1.0)*x2204))+(((-1.0)*x2202))+(((-1.0)*x2203*(py*py*py)))+(((-1.0)*py*x2203*(px*px)))+(((-4.97450565850019)*x2202*(px*px)))+(((-4.97450565850019)*x2202*(py*py))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=-0.2125;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
j1array[0]=1.07635079860369;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=4.21794345219348;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((0.85)*(IKsin(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2205=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x2205);
rxp0_1=0;
rxp1_0=(r21*x2205);
rxp1_1=0;
rxp2_0=(r22*x2205);
rxp2_1=0;
px=0;
j0=0;
sj0=0;
cj0=1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=((1.0)+(((7.0852086999355)*(py*py)))+(((19.6045757079702)*(py*py*py*py))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2206=py*py;
CheckValue<IkReal> x2208 = IKatan2WithCheck(IkReal(((-0.185020708697653)+(((-0.92038656235619)*x2206)))),((0.099746893695352)+(((-0.138057984353428)*x2206))),IKFAST_ATAN2_MAGTHRESH);
if(!x2208.valid){
continue;
}
IkReal x2207=x2208.value;
j1array[0]=((-1.0)*x2207);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2207)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((0.85)*(IKsin(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2209=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x2209);
rxp0_1=0;
rxp1_0=(r21*x2209);
rxp1_1=0;
rxp2_0=(r22*x2209);
rxp2_1=0;
px=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=((1.0)+(((7.0852086999355)*(py*py)))+(((19.6045757079702)*(py*py*py*py))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2210=py*py;
CheckValue<IkReal> x2212 = IKatan2WithCheck(IkReal(((-0.185020708697653)+(((-0.92038656235619)*x2210)))),((0.099746893695352)+(((-0.138057984353428)*x2210))),IKFAST_ATAN2_MAGTHRESH);
if(!x2212.valid){
continue;
}
IkReal x2211=x2212.value;
j1array[0]=((-1.0)*x2211);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2211)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((0.85)*(IKsin(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*(px*px))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2213=((-1.0)*px);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
rxp0_2=(r10*x2213);
rxp1_2=(r11*x2213);
rxp2_2=(r12*x2213);
j1eval[0]=((1.0)+(((7.0852086999355)*(px*px)))+(((19.6045757079702)*(px*px*px*px))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2214=px*px;
CheckValue<IkReal> x2216 = IKatan2WithCheck(IkReal(((-0.185020708697653)+(((-0.92038656235619)*x2214)))),((0.099746893695352)+(((-0.138057984353428)*x2214))),IKFAST_ATAN2_MAGTHRESH);
if(!x2216.valid){
continue;
}
IkReal x2215=x2216.value;
j1array[0]=((-1.0)*x2215);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2215)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((0.85)*(IKsin(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*(px*px))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2217=((-1.0)*px);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
rxp0_2=(r10*x2217);
rxp1_2=(r11*x2217);
rxp2_2=(r12*x2217);
j1eval[0]=((1.0)+(((7.0852086999355)*(px*px)))+(((19.6045757079702)*(px*px*px*px))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2218=px*px;
CheckValue<IkReal> x2220 = IKatan2WithCheck(IkReal(((-0.185020708697653)+(((-0.92038656235619)*x2218)))),((0.099746893695352)+(((-0.138057984353428)*x2218))),IKFAST_ATAN2_MAGTHRESH);
if(!x2220.valid){
continue;
}
IkReal x2219=x2220.value;
j1array[0]=((-1.0)*x2219);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2219)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((0.85)*(IKsin(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2221=px*px;
IkReal x2222=py*py;
IkReal x2223=((18.4077312471238)*sj0);
IkReal x2224=((18.4077312471238)*cj0);
IkReal x2225=(py*sj0);
IkReal x2226=(cj0*px);
CheckValue<IkReal> x2227=IKPowWithIntegerCheck(((((20.0)*x2226))+(((20.0)*x2225))),-1);
if(!x2227.valid){
continue;
}
CheckValue<IkReal> x2228=IKPowWithIntegerCheck(((((-1.0)*x2224*(px*px*px)))+(((-3.70041417395306)*x2226))+(((-3.70041417395306)*x2225))+(((-1.0)*x2223*(py*py*py)))+(((-1.0)*py*x2221*x2223))+(((-1.0)*px*x2222*x2224))),-1);
if(!x2228.valid){
continue;
}
if( IKabs(((17.0)*(x2227.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2228.value)*(((-1.69569719282098)+(((2.34698573400828)*x2222))+(((2.34698573400828)*x2221)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x2227.value)))+IKsqr(((x2228.value)*(((-1.69569719282098)+(((2.34698573400828)*x2222))+(((2.34698573400828)*x2221))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x2227.value)), ((x2228.value)*(((-1.69569719282098)+(((2.34698573400828)*x2222))+(((2.34698573400828)*x2221))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2229=IKsin(j1);
IkReal x2230=IKcos(j1);
IkReal x2231=py*py;
IkReal x2232=px*px;
IkReal x2233=(py*sj0);
IkReal x2234=(cj0*px);
IkReal x2235=((0.09)*x2230);
IkReal x2236=((1.0)*x2230);
IkReal x2237=((0.138057984353428)*x2229);
IkReal x2238=((0.92038656235619)*x2230);
IkReal x2239=((1.1)*x2229);
evalcond[0]=((-0.85)+((x2229*x2234))+((x2229*x2233)));
evalcond[1]=((((-1.0)*x2233))+(((-1.0)*x2234))+(((0.85)*x2229)));
evalcond[2]=((((-1.0)*x2234*x2236))+(((-1.0)*x2233*x2236)));
evalcond[3]=((((0.099746893695352)*x2229))+(((-1.0)*x2232*x2237))+(((-1.0)*x2232*x2238))+(((-1.0)*x2231*x2237))+(((-1.0)*x2231*x2238))+(((-0.185020708697653)*x2230)));
evalcond[4]=((-0.2125)+((x2233*x2235))+((x2233*x2239))+(((-1.0)*x2231))+(((-1.0)*x2232))+((x2234*x2235))+((x2234*x2239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2240=px*px;
IkReal x2241=py*py;
IkReal x2242=(cj0*px);
IkReal x2243=((2.76115968706857)*sj0);
IkReal x2244=(py*sj0);
CheckValue<IkReal> x2245=IKPowWithIntegerCheck(((-3.1453520478601)+(((-15.6465715600552)*x2241))+(((-15.6465715600552)*x2240))),-1);
if(!x2245.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x2242))+(((1.17647058823529)*x2244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2245.value)*((((py*x2240*x2243))+(((2.76115968706857)*x2242*(px*px)))+((x2243*(py*py*py)))+(((-1.99493787390704)*x2242))+(((-1.99493787390704)*x2244))+(((2.76115968706857)*x2241*x2242)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x2242))+(((1.17647058823529)*x2244))))+IKsqr(((x2245.value)*((((py*x2240*x2243))+(((2.76115968706857)*x2242*(px*px)))+((x2243*(py*py*py)))+(((-1.99493787390704)*x2242))+(((-1.99493787390704)*x2244))+(((2.76115968706857)*x2241*x2242))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x2242))+(((1.17647058823529)*x2244))), ((x2245.value)*((((py*x2240*x2243))+(((2.76115968706857)*x2242*(px*px)))+((x2243*(py*py*py)))+(((-1.99493787390704)*x2242))+(((-1.99493787390704)*x2244))+(((2.76115968706857)*x2241*x2242))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2246=IKsin(j1);
IkReal x2247=IKcos(j1);
IkReal x2248=py*py;
IkReal x2249=px*px;
IkReal x2250=(py*sj0);
IkReal x2251=(cj0*px);
IkReal x2252=((0.09)*x2247);
IkReal x2253=((1.0)*x2247);
IkReal x2254=((0.138057984353428)*x2246);
IkReal x2255=((0.92038656235619)*x2247);
IkReal x2256=((1.1)*x2246);
evalcond[0]=((-0.85)+((x2246*x2251))+((x2246*x2250)));
evalcond[1]=((((-1.0)*x2251))+(((-1.0)*x2250))+(((0.85)*x2246)));
evalcond[2]=((((-1.0)*x2251*x2253))+(((-1.0)*x2250*x2253)));
evalcond[3]=((((-1.0)*x2249*x2255))+(((-1.0)*x2249*x2254))+(((-0.185020708697653)*x2247))+(((-1.0)*x2248*x2254))+(((-1.0)*x2248*x2255))+(((0.099746893695352)*x2246)));
evalcond[4]=((-0.2125)+(((-1.0)*x2249))+(((-1.0)*x2248))+((x2251*x2256))+((x2251*x2252))+((x2250*x2256))+((x2250*x2252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2257=cj0*cj0;
IkReal x2258=px*px;
IkReal x2259=py*py;
IkReal x2260=(cj0*px);
IkReal x2261=(py*sj0);
IkReal x2262=((22.0)*x2257);
CheckValue<IkReal> x2263=IKPowWithIntegerCheck(((((1.53)*x2261))+(((1.53)*x2260))),-1);
if(!x2263.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x2261))+(((1.17647058823529)*x2260)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2263.value)*(((3.6125)+(((-44.0)*x2260*x2261))+((x2259*x2262))+(((17.0)*x2258))+(((-1.0)*x2258*x2262))+(((-5.0)*x2259)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x2261))+(((1.17647058823529)*x2260))))+IKsqr(((x2263.value)*(((3.6125)+(((-44.0)*x2260*x2261))+((x2259*x2262))+(((17.0)*x2258))+(((-1.0)*x2258*x2262))+(((-5.0)*x2259))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x2261))+(((1.17647058823529)*x2260))), ((x2263.value)*(((3.6125)+(((-44.0)*x2260*x2261))+((x2259*x2262))+(((17.0)*x2258))+(((-1.0)*x2258*x2262))+(((-5.0)*x2259))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2264=IKsin(j1);
IkReal x2265=IKcos(j1);
IkReal x2266=py*py;
IkReal x2267=px*px;
IkReal x2268=(py*sj0);
IkReal x2269=(cj0*px);
IkReal x2270=((0.09)*x2265);
IkReal x2271=((1.0)*x2265);
IkReal x2272=((0.138057984353428)*x2264);
IkReal x2273=((0.92038656235619)*x2265);
IkReal x2274=((1.1)*x2264);
evalcond[0]=((-0.85)+((x2264*x2269))+((x2264*x2268)));
evalcond[1]=((((0.85)*x2264))+(((-1.0)*x2268))+(((-1.0)*x2269)));
evalcond[2]=((((-1.0)*x2269*x2271))+(((-1.0)*x2268*x2271)));
evalcond[3]=((((-1.0)*x2266*x2272))+(((-1.0)*x2266*x2273))+(((0.099746893695352)*x2264))+(((-0.185020708697653)*x2265))+(((-1.0)*x2267*x2273))+(((-1.0)*x2267*x2272)));
evalcond[4]=((-0.2125)+((x2269*x2274))+((x2269*x2270))+((x2268*x2270))+((x2268*x2274))+(((-1.0)*x2266))+(((-1.0)*x2267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2275=cj3*cj3;
IkReal x2276=(cj3*sj3);
IkReal x2277=(cj0*px);
IkReal x2278=((0.92038656235619)*pp);
IkReal x2279=((0.0254095720202485)*sj3);
IkReal x2280=(py*sj0);
IkReal x2281=(pp*sj3);
IkReal x2282=((1.0)*pz);
IkReal x2283=(cj3*pp);
CheckValue<IkReal> x2284 = IKatan2WithCheck(IkReal(((-0.100617959042798)+(((-0.0414173953060285)*x2281))+(pz*pz)+(((-0.276115968706857)*x2283))+(((-0.506212609295904)*pp))+(((0.00762287160607455)*x2276))+(((0.00564933271974229)*sj3))+(((-0.0555062126092959)*cj3))+(((-0.00114343074091118)*x2275)))),((-0.0688360561435803)+(((0.00621260929590428)*x2281))+(((-1.0)*x2280*x2282))+(((-1.0)*x2277*x2282))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*x2283))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*x2276))+(((0.0139752646111367)*x2275))),IKFAST_ATAN2_MAGTHRESH);
if(!x2284.valid){
continue;
}
CheckValue<IkReal> x2285=IKPowWithIntegerCheck(IKsign(((((-0.185020708697653)*x2280))+(((-0.099746893695352)*pz))+(((-0.310561435803037)*pz*sj3))+(((-1.0)*x2278*x2280))+((x2279*x2280))+(((-0.185020708697653)*x2277))+(((0.138057984353428)*pp*pz))+(((-1.0)*x2277*x2278))+((x2277*x2279)))),-1);
if(!x2285.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2284.value)+(((1.5707963267949)*(x2285.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2286=IKsin(j1);
IkReal x2287=IKcos(j1);
IkReal x2288=((0.045)*sj3);
IkReal x2289=((0.3)*cj3);
IkReal x2290=((0.045)*cj3);
IkReal x2291=(cj0*px);
IkReal x2292=(py*sj0);
IkReal x2293=((1.0)*x2287);
IkReal x2294=(sj3*x2287);
IkReal x2295=(pz*x2286);
IkReal x2296=(pz*x2287);
IkReal x2297=((0.09)*x2287);
IkReal x2298=((1.1)*x2286);
evalcond[0]=((-0.55)+x2296+(((-1.0)*x2289))+(((-1.0)*x2288))+((x2286*x2291))+((x2286*x2292)));
evalcond[1]=((0.045)+x2295+(((-1.0)*x2292*x2293))+(((-1.0)*x2291*x2293))+(((0.3)*sj3))+(((-1.0)*x2290)));
evalcond[2]=((((0.099746893695352)*x2286))+(((-0.185020708697653)*x2287))+(((0.310561435803037)*sj3*x2286))+pz+(((-0.138057984353428)*pp*x2286))+(((0.0254095720202485)*x2294))+(((-0.92038656235619)*pp*x2287)));
evalcond[3]=((((0.045)*x2287))+(((0.3)*x2294))+(((-1.0)*x2291))+(((-1.0)*x2292))+(((-1.0)*x2287*x2290))+(((0.55)*x2286))+((x2286*x2288))+((x2286*x2289)));
evalcond[4]=((-0.2125)+((x2291*x2297))+((x2291*x2298))+(((1.1)*x2296))+(((-1.0)*pp))+((x2292*x2297))+((x2292*x2298))+(((-0.09)*x2295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2299=cj0*cj0;
IkReal x2300=py*py;
IkReal x2301=cj3*cj3;
IkReal x2302=(py*sj0);
IkReal x2303=((0.3)*sj3);
IkReal x2304=((0.045)*cj3);
IkReal x2305=(cj0*px);
IkReal x2306=(cj3*sj3);
IkReal x2307=((1.0)*pz);
CheckValue<IkReal> x2308=IKPowWithIntegerCheck(IKsign(((((-0.55)*pz))+(((-0.3)*cj3*pz))+((x2303*x2305))+(((-0.045)*pz*sj3))+(((-1.0)*x2304*x2305))+(((-1.0)*x2302*x2304))+(((0.045)*x2305))+(((0.045)*x2302))+((x2302*x2303)))),-1);
if(!x2308.valid){
continue;
}
CheckValue<IkReal> x2309 = IKatan2WithCheck(IkReal(((0.03825)+(((-0.01125)*cj3))+(((0.087975)*x2306))+(((-0.027)*x2301))+(((0.167025)*sj3))+(((-1.0)*x2302*x2307))+(((-1.0)*x2305*x2307)))),((-0.304525)+x2300+(((-0.087975)*x2301))+(((-0.0495)*sj3))+(((-1.0)*x2299*x2300))+(((2.0)*x2302*x2305))+(((-0.027)*x2306))+((x2299*(px*px)))+(((-0.33)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2309.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2308.value)))+(x2309.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2310=IKsin(j1);
IkReal x2311=IKcos(j1);
IkReal x2312=((0.045)*sj3);
IkReal x2313=((0.3)*cj3);
IkReal x2314=((0.045)*cj3);
IkReal x2315=(cj0*px);
IkReal x2316=(py*sj0);
IkReal x2317=((1.0)*x2311);
IkReal x2318=(sj3*x2311);
IkReal x2319=(pz*x2310);
IkReal x2320=(pz*x2311);
IkReal x2321=((0.09)*x2311);
IkReal x2322=((1.1)*x2310);
evalcond[0]=((-0.55)+x2320+((x2310*x2316))+((x2310*x2315))+(((-1.0)*x2313))+(((-1.0)*x2312)));
evalcond[1]=((0.045)+x2319+(((-1.0)*x2315*x2317))+(((0.3)*sj3))+(((-1.0)*x2316*x2317))+(((-1.0)*x2314)));
evalcond[2]=((((0.099746893695352)*x2310))+(((-0.185020708697653)*x2311))+pz+(((-0.138057984353428)*pp*x2310))+(((0.0254095720202485)*x2318))+(((-0.92038656235619)*pp*x2311))+(((0.310561435803037)*sj3*x2310)));
evalcond[3]=((((-1.0)*x2315))+(((-1.0)*x2316))+(((0.3)*x2318))+(((-1.0)*x2311*x2314))+(((0.045)*x2311))+(((0.55)*x2310))+((x2310*x2313))+((x2310*x2312)));
evalcond[4]=((-0.2125)+((x2315*x2322))+((x2315*x2321))+((x2316*x2321))+((x2316*x2322))+(((-0.09)*x2319))+(((1.1)*x2320))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2323=cj3*cj3;
IkReal x2324=(cj0*px);
IkReal x2325=((0.00621260929590428)*pp);
IkReal x2326=(cj3*sj3);
IkReal x2327=(py*sj0);
IkReal x2328=((0.138057984353428)*pp);
IkReal x2329=((0.0414173953060285)*pp);
IkReal x2330=((0.310561435803037)*sj3);
CheckValue<IkReal> x2331 = IKatan2WithCheck(IkReal(((-0.000703060285319834)+((cj3*x2329))+(((-0.00114343074091118)*x2326))+(((-0.276115968706857)*pp*sj3))+((pz*x2324))+((pz*x2327))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-0.00762287160607455)*x2323))+(((-1.0)*x2329)))),((-0.097657040957202)+((sj3*x2329))+x2325+(((-1.0)*cj3*x2325))+(((0.0139752646111367)*x2326))+(pz*pz)+(((0.00448861021629084)*cj3))+(((0.0931684307409112)*x2323))+(((-0.0438993327197423)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2331.valid){
continue;
}
CheckValue<IkReal> x2332=IKPowWithIntegerCheck(IKsign(((((-0.0254095720202485)*pz*sj3))+((x2327*x2328))+(((0.185020708697653)*pz))+(((0.92038656235619)*pp*pz))+((x2324*x2328))+(((-1.0)*x2327*x2330))+(((-0.099746893695352)*x2324))+(((-0.099746893695352)*x2327))+(((-1.0)*x2324*x2330)))),-1);
if(!x2332.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2331.value)+(((1.5707963267949)*(x2332.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2333=IKsin(j1);
IkReal x2334=IKcos(j1);
IkReal x2335=((0.045)*sj3);
IkReal x2336=((0.3)*cj3);
IkReal x2337=((0.045)*cj3);
IkReal x2338=(cj0*px);
IkReal x2339=(py*sj0);
IkReal x2340=((1.0)*x2334);
IkReal x2341=(sj3*x2334);
IkReal x2342=(pz*x2333);
IkReal x2343=(pz*x2334);
IkReal x2344=((0.09)*x2334);
IkReal x2345=((1.1)*x2333);
evalcond[0]=((-0.55)+(((-1.0)*x2336))+(((-1.0)*x2335))+x2343+((x2333*x2338))+((x2333*x2339)));
evalcond[1]=((0.045)+(((-1.0)*x2337))+(((-1.0)*x2339*x2340))+x2342+(((0.3)*sj3))+(((-1.0)*x2338*x2340)));
evalcond[2]=((((-0.185020708697653)*x2334))+(((0.0254095720202485)*x2341))+pz+(((0.310561435803037)*sj3*x2333))+(((-0.138057984353428)*pp*x2333))+(((0.099746893695352)*x2333))+(((-0.92038656235619)*pp*x2334)));
evalcond[3]=((((0.045)*x2334))+((x2333*x2336))+((x2333*x2335))+(((0.55)*x2333))+(((-1.0)*x2334*x2337))+(((-1.0)*x2338))+(((-1.0)*x2339))+(((0.3)*x2341)));
evalcond[4]=((-0.2125)+(((-0.09)*x2342))+(((-1.0)*pp))+((x2338*x2345))+((x2338*x2344))+(((1.1)*x2343))+((x2339*x2345))+((x2339*x2344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2346=(px*sj0);
IkReal x2347=(cj0*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=(x2346+(((-1.0)*x2347)));
evalcond[3]=(x2347+(((-1.0)*x2346)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2348=cj0*cj0;
IkReal x2349=py*py;
IkReal x2350=(x2349+(pz*pz)+(((-1.0)*x2348*x2349))+((x2348*(px*px)))+(((2.0)*cj0*px*py*sj0)));
j1eval[0]=x2350;
j1eval[1]=IKsign(x2350);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2351=(py*sj0);
IkReal x2352=((0.3)*sj3);
IkReal x2353=(cj0*px);
IkReal x2354=((6.66666666666667)*sj3);
IkReal x2355=(pz*sj3);
IkReal x2356=(cj3*pz);
IkReal x2357=((0.045)*x2353);
j1eval[0]=((((-1.0)*x2355))+(((-1.0)*x2353))+(((-1.0)*x2351))+((cj3*x2353))+((cj3*x2351))+(((-1.0)*x2353*x2354))+(((-12.2222222222222)*pz))+(((-1.0)*x2351*x2354))+(((-6.66666666666667)*x2356)));
j1eval[1]=IKsign(((((-0.55)*pz))+(((-0.045)*x2351))+(((-0.045)*x2355))+(((0.045)*cj3*x2351))+((cj3*x2357))+(((-1.0)*x2352*x2353))+(((-0.3)*x2356))+(((-1.0)*x2351*x2352))+(((-1.0)*x2357))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2358=(py*sj0);
IkReal x2359=(cj0*px);
IkReal x2360=(pp*pz);
IkReal x2361=((0.92038656235619)*pp);
IkReal x2362=(pz*sj3);
IkReal x2363=((36.2220411120167)*pp);
IkReal x2364=((0.0254095720202485)*sj3);
j1eval[0]=((((-1.0)*x2358*x2363))+(((-1.0)*x2359*x2363))+(((-5.4333061668025)*x2360))+(((3.92556370551481)*pz))+(((-7.28153581454315)*x2359))+(((-7.28153581454315)*x2358))+(((12.2222222222222)*x2362))+((sj3*x2359))+((sj3*x2358)));
j1eval[1]=IKsign(((((-0.185020708697653)*x2358))+(((-0.185020708697653)*x2359))+((x2359*x2364))+(((-0.138057984353428)*x2360))+((x2358*x2364))+(((-1.0)*x2358*x2361))+(((-1.0)*x2359*x2361))+(((0.099746893695352)*pz))+(((0.310561435803037)*x2362))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2365=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2365);
rxp0_1=(px*r20);
rxp1_0=(r21*x2365);
rxp1_1=(px*r21);
rxp2_0=(r22*x2365);
rxp2_1=(px*r22);
j1eval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2366=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2366);
rxp0_1=(px*r20);
rxp1_0=(r21*x2366);
rxp1_1=(px*r21);
rxp2_0=(r22*x2366);
rxp2_1=(px*r22);
j1eval[0]=((-1.0)+(((-4.97450565850019)*(py*py)))+(((-4.97450565850019)*(px*px))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2367=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2367);
rxp0_1=(px*r20);
rxp1_0=(r21*x2367);
rxp1_1=(px*r21);
rxp2_0=(r22*x2367);
rxp2_1=(px*r22);
IkReal x2368=(cj0*px);
IkReal x2369=((4.97450565850019)*sj0);
IkReal x2370=(py*sj0);
j1eval[0]=(x2370+x2368);
j1eval[1]=((((-1.0)*x2369*(py*py*py)))+(((-4.97450565850019)*x2368*(px*px)))+(((-1.0)*x2370))+(((-1.0)*x2368))+(((-4.97450565850019)*x2368*(py*py)))+(((-1.0)*py*x2369*(px*px))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=-0.2125;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
j1array[0]=2.06524185498611;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=5.2068345085759;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((0.85)*(IKsin(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2371=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x2371);
rxp0_1=0;
rxp1_0=(r21*x2371);
rxp1_1=0;
rxp2_0=(r22*x2371);
rxp2_1=0;
px=0;
j0=0;
sj0=0;
cj0=1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=((1.0)+(((7.0852086999355)*(py*py)))+(((19.6045757079702)*(py*py*py*py))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2372=py*py;
CheckValue<IkReal> x2374 = IKatan2WithCheck(IkReal(((-0.185020708697653)+(((-0.92038656235619)*x2372)))),((-0.099746893695352)+(((0.138057984353428)*x2372))),IKFAST_ATAN2_MAGTHRESH);
if(!x2374.valid){
continue;
}
IkReal x2373=x2374.value;
j1array[0]=((-1.0)*x2373);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2373)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((0.85)*(IKsin(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2375=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x2375);
rxp0_1=0;
rxp1_0=(r21*x2375);
rxp1_1=0;
rxp2_0=(r22*x2375);
rxp2_1=0;
px=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=((1.0)+(((7.0852086999355)*(py*py)))+(((19.6045757079702)*(py*py*py*py))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2376=py*py;
CheckValue<IkReal> x2378 = IKatan2WithCheck(IkReal(((-0.185020708697653)+(((-0.92038656235619)*x2376)))),((-0.099746893695352)+(((0.138057984353428)*x2376))),IKFAST_ATAN2_MAGTHRESH);
if(!x2378.valid){
continue;
}
IkReal x2377=x2378.value;
j1array[0]=((-1.0)*x2377);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2377)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((0.85)*(IKsin(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*(px*px))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2379=((-1.0)*px);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
rxp0_2=(r10*x2379);
rxp1_2=(r11*x2379);
rxp2_2=(r12*x2379);
j1eval[0]=((1.0)+(((7.0852086999355)*(px*px)))+(((19.6045757079702)*(px*px*px*px))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2380=px*px;
CheckValue<IkReal> x2382 = IKatan2WithCheck(IkReal(((-0.185020708697653)+(((-0.92038656235619)*x2380)))),((-0.099746893695352)+(((0.138057984353428)*x2380))),IKFAST_ATAN2_MAGTHRESH);
if(!x2382.valid){
continue;
}
IkReal x2381=x2382.value;
j1array[0]=((-1.0)*x2381);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2381)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((0.85)*(IKsin(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=-0.85;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*(px*px))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2383=((-1.0)*px);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
rxp0_2=(r10*x2383);
rxp1_2=(r11*x2383);
rxp2_2=(r12*x2383);
j1eval[0]=((1.0)+(((7.0852086999355)*(px*px)))+(((19.6045757079702)*(px*px*px*px))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2384=px*px;
CheckValue<IkReal> x2386 = IKatan2WithCheck(IkReal(((-0.185020708697653)+(((-0.92038656235619)*x2384)))),((-0.099746893695352)+(((0.138057984353428)*x2384))),IKFAST_ATAN2_MAGTHRESH);
if(!x2386.valid){
continue;
}
IkReal x2385=x2386.value;
j1array[0]=((-1.0)*x2385);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2385)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
evalcond[0]=((0.85)*(IKsin(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2387=px*px;
IkReal x2388=py*py;
IkReal x2389=((18.4077312471238)*sj0);
IkReal x2390=((18.4077312471238)*cj0);
IkReal x2391=(py*sj0);
IkReal x2392=(cj0*px);
CheckValue<IkReal> x2393=IKPowWithIntegerCheck(((((20.0)*x2391))+(((20.0)*x2392))),-1);
if(!x2393.valid){
continue;
}
CheckValue<IkReal> x2394=IKPowWithIntegerCheck(((((-1.0)*py*x2387*x2389))+(((-3.70041417395306)*x2392))+(((-3.70041417395306)*x2391))+(((-1.0)*x2390*(px*px*px)))+(((-1.0)*px*x2388*x2390))+(((-1.0)*x2389*(py*py*py)))),-1);
if(!x2394.valid){
continue;
}
if( IKabs(((17.0)*(x2393.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2394.value)*(((1.69569719282098)+(((-2.34698573400828)*x2387))+(((-2.34698573400828)*x2388)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x2393.value)))+IKsqr(((x2394.value)*(((1.69569719282098)+(((-2.34698573400828)*x2387))+(((-2.34698573400828)*x2388))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x2393.value)), ((x2394.value)*(((1.69569719282098)+(((-2.34698573400828)*x2387))+(((-2.34698573400828)*x2388))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2395=IKcos(j1);
IkReal x2396=IKsin(j1);
IkReal x2397=px*px;
IkReal x2398=py*py;
IkReal x2399=(py*sj0);
IkReal x2400=(cj0*px);
IkReal x2401=((0.09)*x2395);
IkReal x2402=((0.138057984353428)*x2396);
IkReal x2403=((1.1)*x2396);
IkReal x2404=((0.92038656235619)*x2395);
evalcond[0]=(((x2395*x2399))+((x2395*x2400)));
evalcond[1]=((-0.85)+((x2396*x2400))+((x2396*x2399)));
evalcond[2]=((((0.85)*x2396))+(((-1.0)*x2400))+(((-1.0)*x2399)));
evalcond[3]=((((-1.0)*x2397*x2404))+((x2398*x2402))+(((-0.099746893695352)*x2396))+(((-0.185020708697653)*x2395))+((x2397*x2402))+(((-1.0)*x2398*x2404)));
evalcond[4]=((-0.2125)+(((-1.0)*x2399*x2401))+(((-1.0)*x2400*x2401))+((x2399*x2403))+(((-1.0)*x2398))+(((-1.0)*x2397))+((x2400*x2403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2405=px*px;
IkReal x2406=py*py;
IkReal x2407=(cj0*px);
IkReal x2408=((2.76115968706857)*sj0);
IkReal x2409=(py*sj0);
CheckValue<IkReal> x2410=IKPowWithIntegerCheck(((-3.1453520478601)+(((-15.6465715600552)*x2406))+(((-15.6465715600552)*x2405))),-1);
if(!x2410.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x2409))+(((1.17647058823529)*x2407)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2410.value)*(((((-1.0)*py*x2405*x2408))+(((-2.76115968706857)*x2407*(px*px)))+(((-2.76115968706857)*x2406*x2407))+(((-1.0)*x2408*(py*py*py)))+(((1.99493787390704)*x2409))+(((1.99493787390704)*x2407)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x2409))+(((1.17647058823529)*x2407))))+IKsqr(((x2410.value)*(((((-1.0)*py*x2405*x2408))+(((-2.76115968706857)*x2407*(px*px)))+(((-2.76115968706857)*x2406*x2407))+(((-1.0)*x2408*(py*py*py)))+(((1.99493787390704)*x2409))+(((1.99493787390704)*x2407))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x2409))+(((1.17647058823529)*x2407))), ((x2410.value)*(((((-1.0)*py*x2405*x2408))+(((-2.76115968706857)*x2407*(px*px)))+(((-2.76115968706857)*x2406*x2407))+(((-1.0)*x2408*(py*py*py)))+(((1.99493787390704)*x2409))+(((1.99493787390704)*x2407))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2411=IKcos(j1);
IkReal x2412=IKsin(j1);
IkReal x2413=px*px;
IkReal x2414=py*py;
IkReal x2415=(py*sj0);
IkReal x2416=(cj0*px);
IkReal x2417=((0.09)*x2411);
IkReal x2418=((0.138057984353428)*x2412);
IkReal x2419=((1.1)*x2412);
IkReal x2420=((0.92038656235619)*x2411);
evalcond[0]=(((x2411*x2415))+((x2411*x2416)));
evalcond[1]=((-0.85)+((x2412*x2416))+((x2412*x2415)));
evalcond[2]=((((-1.0)*x2415))+(((-1.0)*x2416))+(((0.85)*x2412)));
evalcond[3]=(((x2413*x2418))+((x2414*x2418))+(((-1.0)*x2413*x2420))+(((-0.099746893695352)*x2412))+(((-0.185020708697653)*x2411))+(((-1.0)*x2414*x2420)));
evalcond[4]=((-0.2125)+(((-1.0)*x2413))+(((-1.0)*x2414))+(((-1.0)*x2416*x2417))+(((-1.0)*x2415*x2417))+((x2415*x2419))+((x2416*x2419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2421=cj0*cj0;
IkReal x2422=px*px;
IkReal x2423=py*py;
IkReal x2424=(cj0*px);
IkReal x2425=(py*sj0);
IkReal x2426=((22.0)*x2421);
CheckValue<IkReal> x2427=IKPowWithIntegerCheck(((((-1.53)*x2424))+(((-1.53)*x2425))),-1);
if(!x2427.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x2425))+(((1.17647058823529)*x2424)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2427.value)*(((3.6125)+((x2423*x2426))+(((-1.0)*x2422*x2426))+(((-44.0)*x2424*x2425))+(((17.0)*x2422))+(((-5.0)*x2423)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x2425))+(((1.17647058823529)*x2424))))+IKsqr(((x2427.value)*(((3.6125)+((x2423*x2426))+(((-1.0)*x2422*x2426))+(((-44.0)*x2424*x2425))+(((17.0)*x2422))+(((-5.0)*x2423))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x2425))+(((1.17647058823529)*x2424))), ((x2427.value)*(((3.6125)+((x2423*x2426))+(((-1.0)*x2422*x2426))+(((-44.0)*x2424*x2425))+(((17.0)*x2422))+(((-5.0)*x2423))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2428=IKcos(j1);
IkReal x2429=IKsin(j1);
IkReal x2430=px*px;
IkReal x2431=py*py;
IkReal x2432=(py*sj0);
IkReal x2433=(cj0*px);
IkReal x2434=((0.09)*x2428);
IkReal x2435=((0.138057984353428)*x2429);
IkReal x2436=((1.1)*x2429);
IkReal x2437=((0.92038656235619)*x2428);
evalcond[0]=(((x2428*x2433))+((x2428*x2432)));
evalcond[1]=((-0.85)+((x2429*x2433))+((x2429*x2432)));
evalcond[2]=((((-1.0)*x2433))+(((-1.0)*x2432))+(((0.85)*x2429)));
evalcond[3]=((((-1.0)*x2431*x2437))+(((-0.185020708697653)*x2428))+(((-1.0)*x2430*x2437))+((x2431*x2435))+(((-0.099746893695352)*x2429))+((x2430*x2435)));
evalcond[4]=((-0.2125)+(((-1.0)*x2433*x2434))+(((-1.0)*x2431))+(((-1.0)*x2430))+((x2432*x2436))+(((-1.0)*x2432*x2434))+((x2433*x2436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2438=cj3*cj3;
IkReal x2439=(cj3*sj3);
IkReal x2440=(cj0*px);
IkReal x2441=((0.92038656235619)*pp);
IkReal x2442=((0.0254095720202485)*sj3);
IkReal x2443=(py*sj0);
IkReal x2444=((0.0414173953060285)*pp);
IkReal x2445=((1.0)*pz);
CheckValue<IkReal> x2446=IKPowWithIntegerCheck(IKsign((((x2442*x2443))+(((-0.138057984353428)*pp*pz))+(((0.310561435803037)*pz*sj3))+((x2440*x2442))+(((-1.0)*x2441*x2443))+(((-0.185020708697653)*x2443))+(((-0.185020708697653)*x2440))+(((0.099746893695352)*pz))+(((-1.0)*x2440*x2441)))),-1);
if(!x2446.valid){
continue;
}
CheckValue<IkReal> x2447 = IKatan2WithCheck(IkReal(((-0.100617959042798)+(((0.00762287160607455)*x2439))+(((-0.00114343074091118)*x2438))+(((-0.276115968706857)*cj3*pp))+(pz*pz)+(((-0.506212609295904)*pp))+(((0.00564933271974229)*sj3))+(((-0.0555062126092959)*cj3))+(((-1.0)*sj3*x2444)))),((0.0688360561435803)+(((-1.0)*x2443*x2445))+(((0.175297399907961)*sj3))+(((-0.00621260929590428)*pp*sj3))+(((0.0931684307409112)*x2439))+(((-0.0139752646111367)*x2438))+(((-1.0)*cj3*x2444))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))+(((-1.0)*x2440*x2445))),IKFAST_ATAN2_MAGTHRESH);
if(!x2447.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2446.value)))+(x2447.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2448=IKsin(j1);
IkReal x2449=IKcos(j1);
IkReal x2450=((0.045)*sj3);
IkReal x2451=((0.3)*cj3);
IkReal x2452=((0.045)*cj3);
IkReal x2453=(cj0*px);
IkReal x2454=(py*sj0);
IkReal x2455=(sj3*x2449);
IkReal x2456=(pz*x2448);
IkReal x2457=(pz*x2449);
IkReal x2458=((0.09)*x2449);
IkReal x2459=((1.1)*x2448);
evalcond[0]=((-0.55)+x2457+((x2448*x2454))+((x2448*x2453))+(((-1.0)*x2451))+(((-1.0)*x2450)));
evalcond[1]=((0.045)+((x2449*x2454))+((x2449*x2453))+(((-1.0)*x2456))+(((0.3)*sj3))+(((-1.0)*x2452)));
evalcond[2]=((((0.138057984353428)*pp*x2448))+(((-0.310561435803037)*sj3*x2448))+(((0.0254095720202485)*x2455))+(((-0.185020708697653)*x2449))+pz+(((-0.92038656235619)*pp*x2449))+(((-0.099746893695352)*x2448)));
evalcond[3]=((((0.55)*x2448))+(((-0.045)*x2449))+((x2449*x2452))+(((-0.3)*x2455))+(((-1.0)*x2453))+(((-1.0)*x2454))+((x2448*x2451))+((x2448*x2450)));
evalcond[4]=((-0.2125)+(((-1.0)*x2453*x2458))+(((0.09)*x2456))+(((-1.0)*x2454*x2458))+((x2453*x2459))+(((1.1)*x2457))+((x2454*x2459))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2460=cj0*cj0;
IkReal x2461=py*py;
IkReal x2462=cj3*cj3;
IkReal x2463=(py*sj0);
IkReal x2464=((0.3)*sj3);
IkReal x2465=((0.045)*cj3);
IkReal x2466=(cj0*px);
IkReal x2467=(cj3*sj3);
IkReal x2468=((1.0)*pz);
CheckValue<IkReal> x2469=IKPowWithIntegerCheck(IKsign(((((-0.55)*pz))+(((-1.0)*x2464*x2466))+(((-0.3)*cj3*pz))+(((-0.045)*pz*sj3))+(((-0.045)*x2463))+(((-0.045)*x2466))+(((-1.0)*x2463*x2464))+((x2465*x2466))+((x2463*x2465)))),-1);
if(!x2469.valid){
continue;
}
CheckValue<IkReal> x2470 = IKatan2WithCheck(IkReal(((-0.03825)+(((0.01125)*cj3))+(((-1.0)*x2466*x2468))+(((-0.087975)*x2467))+(((-1.0)*x2463*x2468))+(((-0.167025)*sj3))+(((0.027)*x2462)))),((-0.304525)+(((-1.0)*x2460*x2461))+x2461+((x2460*(px*px)))+(((-0.087975)*x2462))+(((-0.0495)*sj3))+(((2.0)*x2463*x2466))+(((-0.027)*x2467))+(((-0.33)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2470.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2469.value)))+(x2470.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2471=IKsin(j1);
IkReal x2472=IKcos(j1);
IkReal x2473=((0.045)*sj3);
IkReal x2474=((0.3)*cj3);
IkReal x2475=((0.045)*cj3);
IkReal x2476=(cj0*px);
IkReal x2477=(py*sj0);
IkReal x2478=(sj3*x2472);
IkReal x2479=(pz*x2471);
IkReal x2480=(pz*x2472);
IkReal x2481=((0.09)*x2472);
IkReal x2482=((1.1)*x2471);
evalcond[0]=((-0.55)+((x2471*x2477))+((x2471*x2476))+x2480+(((-1.0)*x2473))+(((-1.0)*x2474)));
evalcond[1]=((0.045)+(((-1.0)*x2479))+(((-1.0)*x2475))+(((0.3)*sj3))+((x2472*x2476))+((x2472*x2477)));
evalcond[2]=((((-0.310561435803037)*sj3*x2471))+(((0.138057984353428)*pp*x2471))+(((-0.099746893695352)*x2471))+(((-0.92038656235619)*pp*x2472))+(((-0.185020708697653)*x2472))+pz+(((0.0254095720202485)*x2478)));
evalcond[3]=(((x2471*x2474))+((x2471*x2473))+(((-0.045)*x2472))+(((-1.0)*x2477))+(((-1.0)*x2476))+(((0.55)*x2471))+((x2472*x2475))+(((-0.3)*x2478)));
evalcond[4]=((-0.2125)+((x2476*x2482))+(((-1.0)*x2476*x2481))+(((-1.0)*x2477*x2481))+(((1.1)*x2480))+((x2477*x2482))+(((-1.0)*pp))+(((0.09)*x2479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2483=cj0*cj0;
IkReal x2484=py*py;
IkReal x2485=(pz*sj3);
IkReal x2486=(py*sj0);
IkReal x2487=((0.3)*cj3);
IkReal x2488=((0.045)*sj3);
IkReal x2489=((0.045)*cj3);
IkReal x2490=(cj0*px);
IkReal x2491=((0.3)*sj3);
CheckValue<IkReal> x2492 = IKatan2WithCheck(IkReal(((((0.55)*x2486))+(((0.55)*x2490))+((x2488*x2490))+(((-1.0)*pz*x2489))+(((0.045)*pz))+((x2487*x2490))+(((0.3)*x2485))+((x2486*x2487))+((x2486*x2488)))),((((-0.045)*x2490))+(((-0.045)*x2486))+(((-1.0)*x2490*x2491))+(((0.045)*x2485))+(((-1.0)*x2486*x2491))+((x2486*x2489))+((pz*x2487))+(((0.55)*pz))+((x2489*x2490))),IKFAST_ATAN2_MAGTHRESH);
if(!x2492.valid){
continue;
}
CheckValue<IkReal> x2493=IKPowWithIntegerCheck(IKsign((x2484+(pz*pz)+(((-1.0)*x2483*x2484))+(((2.0)*x2486*x2490))+((x2483*(px*px))))),-1);
if(!x2493.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2492.value)+(((1.5707963267949)*(x2493.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2494=IKsin(j1);
IkReal x2495=IKcos(j1);
IkReal x2496=((0.045)*sj3);
IkReal x2497=((0.3)*cj3);
IkReal x2498=((0.045)*cj3);
IkReal x2499=(cj0*px);
IkReal x2500=(py*sj0);
IkReal x2501=(sj3*x2495);
IkReal x2502=(pz*x2494);
IkReal x2503=(pz*x2495);
IkReal x2504=((0.09)*x2495);
IkReal x2505=((1.1)*x2494);
evalcond[0]=((-0.55)+x2503+((x2494*x2499))+((x2494*x2500))+(((-1.0)*x2496))+(((-1.0)*x2497)));
evalcond[1]=((0.045)+((x2495*x2499))+(((-1.0)*x2498))+((x2495*x2500))+(((-1.0)*x2502))+(((0.3)*sj3)));
evalcond[2]=((((-0.099746893695352)*x2494))+(((0.0254095720202485)*x2501))+(((-0.310561435803037)*sj3*x2494))+(((0.138057984353428)*pp*x2494))+pz+(((-0.185020708697653)*x2495))+(((-0.92038656235619)*pp*x2495)));
evalcond[3]=((((-0.045)*x2495))+(((-0.3)*x2501))+(((0.55)*x2494))+((x2494*x2496))+((x2494*x2497))+((x2495*x2498))+(((-1.0)*x2499))+(((-1.0)*x2500)));
evalcond[4]=((-0.2125)+((x2500*x2505))+(((0.09)*x2502))+((x2499*x2505))+(((-1.0)*pp))+(((1.1)*x2503))+(((-1.0)*x2500*x2504))+(((-1.0)*x2499*x2504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2506=cj2*cj2;
IkReal x2507=((0.045)*px);
IkReal x2508=(sj0*sj2);
IkReal x2509=(pz*sj2);
IkReal x2510=(cj0*cj3);
IkReal x2511=((0.55)*cj2);
IkReal x2512=(px*sj0);
IkReal x2513=(cj0*py);
IkReal x2514=((0.3)*cj3);
IkReal x2515=((0.3)*sj3);
IkReal x2516=((0.045)*sj3);
IkReal x2517=(sj0*x2506);
IkReal x2518=(cj0*cj2*sj2);
IkReal x2519=((0.3)*cj2*py);
IkReal x2520=((0.045)*x2506);
IkReal x2521=((0.045)*cj2*py);
CheckValue<IkReal> x2522=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj2*x2507*x2510))+(((-0.55)*x2509))+((x2508*x2521))+((cj2*py*x2508*x2515))+(((-1.0)*x2509*x2516))+(((-1.0)*x2509*x2514))+((x2507*x2518))+((px*x2515*x2518))+(((-1.0)*cj3*x2508*x2521)))),-1);
if(!x2522.valid){
continue;
}
CheckValue<IkReal> x2523 = IKatan2WithCheck(IkReal((((x2511*x2513))+((x2510*x2519))+(((-1.0)*cj0*px*x2509))+(((-1.0)*cj2*sj0*sj3*x2507))+(((-1.0)*cj2*x2512*x2514))+((cj2*x2513*x2516))+(((-1.0)*x2511*x2512))+(((-1.0)*py*pz*x2508)))),((((-1.0)*pz*x2509))+(((-1.0)*py*x2510*x2520))+((cj3*x2507*x2517))+((x2506*x2513*x2515))+(((-1.0)*x2507*x2517))+(((-1.0)*x2506*x2512*x2515))+((x2513*x2520))),IKFAST_ATAN2_MAGTHRESH);
if(!x2523.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2522.value)))+(x2523.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2524=IKsin(j1);
IkReal x2525=IKcos(j1);
IkReal x2526=(px*sj2);
IkReal x2527=((0.3)*sj3);
IkReal x2528=((0.09)*sj0);
IkReal x2529=(cj2*px);
IkReal x2530=((0.045)*cj3);
IkReal x2531=((0.045)*cj2);
IkReal x2532=(py*sj0);
IkReal x2533=((0.045)*sj3);
IkReal x2534=((1.0)*cj0);
IkReal x2535=((0.3)*cj3);
IkReal x2536=(py*sj2);
IkReal x2537=(cj0*x2525);
IkReal x2538=(cj3*x2524);
IkReal x2539=(cj2*x2525);
IkReal x2540=(cj2*x2524);
IkReal x2541=(pz*x2525);
IkReal x2542=(cj0*px*x2524);
evalcond[0]=((-0.55)+x2542+x2541+(((-1.0)*x2535))+(((-1.0)*x2533))+((x2524*x2532)));
evalcond[1]=((((-1.0)*cj2*py*x2534))+((x2526*x2537))+(((-1.0)*pz*sj2*x2524))+((sj0*x2529))+((sj2*x2525*x2532)));
evalcond[2]=((((-1.0)*x2530*x2540))+(((-1.0)*x2525*x2533))+(((-1.0)*x2525*x2535))+((x2524*x2531))+pz+((x2527*x2540))+(((-0.55)*x2525)));
evalcond[3]=((0.045)+x2527+(((-1.0)*x2532*x2539))+(((-1.0)*x2530))+(((-1.0)*x2534*x2536))+((pz*x2540))+((sj0*x2526))+(((-1.0)*x2525*x2529*x2534)));
evalcond[4]=(((x2525*x2531))+(((-1.0)*x2530*x2539))+(((-1.0)*px*x2534))+((x2524*x2533))+((x2524*x2535))+(((0.55)*x2524))+((x2527*x2539))+(((-1.0)*x2532)));
evalcond[5]=((-0.2125)+(((0.09)*cj0*x2536))+((py*x2528*x2539))+(((-1.0)*pp))+(((0.09)*x2529*x2537))+(((1.1)*x2541))+(((1.1)*x2542))+(((-0.09)*pz*x2540))+(((1.1)*x2524*x2532))+(((-1.0)*x2526*x2528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2543=cj0*cj0;
IkReal x2544=py*py;
IkReal x2545=px*px;
IkReal x2546=(px*py);
IkReal x2547=((1.0)*cj2);
IkReal x2548=(cj0*sj2);
IkReal x2549=(cj2*sj0);
IkReal x2550=((0.3)*cj3);
IkReal x2551=(pz*sj2);
IkReal x2552=((0.045)*sj3);
IkReal x2553=(sj2*x2544);
IkReal x2554=(py*sj0*sj2);
CheckValue<IkReal> x2555=IKPowWithIntegerCheck(IKsign((x2553+((sj2*x2543*x2545))+(((-1.0)*x2543*x2553))+(((2.0)*sj0*x2546*x2548))+((pz*x2551)))),-1);
if(!x2555.valid){
continue;
}
CheckValue<IkReal> x2556 = IKatan2WithCheck(IkReal((((px*x2548*x2552))+((px*x2548*x2550))+(((0.55)*px*x2548))+((x2550*x2554))+((px*pz*x2549))+(((0.55)*x2554))+(((-1.0)*cj0*py*pz*x2547))+((x2552*x2554)))),((((-1.0)*cj0*sj0*x2545*x2547))+((cj0*x2544*x2549))+(((2.0)*cj2*x2543*x2546))+((x2551*x2552))+((x2550*x2551))+(((0.55)*x2551))+(((-1.0)*x2546*x2547))),IKFAST_ATAN2_MAGTHRESH);
if(!x2556.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2555.value)))+(x2556.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2557=IKsin(j1);
IkReal x2558=IKcos(j1);
IkReal x2559=(px*sj2);
IkReal x2560=((0.3)*sj3);
IkReal x2561=((0.09)*sj0);
IkReal x2562=(cj2*px);
IkReal x2563=((0.045)*cj3);
IkReal x2564=((0.045)*cj2);
IkReal x2565=(py*sj0);
IkReal x2566=((0.045)*sj3);
IkReal x2567=((1.0)*cj0);
IkReal x2568=((0.3)*cj3);
IkReal x2569=(py*sj2);
IkReal x2570=(cj0*x2558);
IkReal x2571=(cj3*x2557);
IkReal x2572=(cj2*x2558);
IkReal x2573=(cj2*x2557);
IkReal x2574=(pz*x2558);
IkReal x2575=(cj0*px*x2557);
evalcond[0]=((-0.55)+x2574+x2575+((x2557*x2565))+(((-1.0)*x2566))+(((-1.0)*x2568)));
evalcond[1]=(((sj2*x2558*x2565))+(((-1.0)*cj2*py*x2567))+((x2559*x2570))+(((-1.0)*pz*sj2*x2557))+((sj0*x2562)));
evalcond[2]=((((-0.55)*x2558))+((x2560*x2573))+(((-1.0)*x2563*x2573))+((x2557*x2564))+(((-1.0)*x2558*x2566))+(((-1.0)*x2558*x2568))+pz);
evalcond[3]=((0.045)+x2560+(((-1.0)*x2563))+(((-1.0)*x2565*x2572))+((sj0*x2559))+((pz*x2573))+(((-1.0)*x2567*x2569))+(((-1.0)*x2558*x2562*x2567)));
evalcond[4]=((((-1.0)*x2565))+((x2560*x2572))+(((-1.0)*x2563*x2572))+((x2557*x2566))+((x2557*x2568))+((x2558*x2564))+(((0.55)*x2557))+(((-1.0)*px*x2567)));
evalcond[5]=((-0.2125)+(((0.09)*x2562*x2570))+(((1.1)*x2557*x2565))+((py*x2561*x2572))+(((-1.0)*pp))+(((-1.0)*x2559*x2561))+(((0.09)*cj0*x2569))+(((-0.09)*pz*x2573))+(((1.1)*x2574))+(((1.1)*x2575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2576=cj3*cj3;
IkReal x2577=(cj2*sj3);
IkReal x2578=(py*sj0);
IkReal x2579=((0.3)*cj3);
IkReal x2580=((0.045)*sj3);
IkReal x2581=(cj0*px);
IkReal x2582=(cj2*cj3);
IkReal x2583=((0.045)*pz);
IkReal x2584=((1.0)*pz);
CheckValue<IkReal> x2585=IKPowWithIntegerCheck(IKsign(((((-0.55)*x2578))+(((-1.0)*x2579*x2581))+(((-0.3)*pz*x2577))+(((-1.0)*cj2*x2583))+(((-1.0)*x2578*x2580))+(((-1.0)*x2578*x2579))+((x2582*x2583))+(((-0.55)*x2581))+(((-1.0)*x2580*x2581)))),-1);
if(!x2585.valid){
continue;
}
CheckValue<IkReal> x2586 = IKatan2WithCheck(IkReal(((-0.304525)+(((-0.0495)*sj3))+(((-0.087975)*x2576))+(((-0.027)*cj3*sj3))+(pz*pz)+(((-0.33)*cj3)))),((((-0.087975)*cj3*x2577))+(((0.01125)*x2582))+(((0.027)*cj2*x2576))+(((-1.0)*x2578*x2584))+(((-0.167025)*x2577))+(((-0.03825)*cj2))+(((-1.0)*x2581*x2584))),IKFAST_ATAN2_MAGTHRESH);
if(!x2586.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2585.value)))+(x2586.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2587=IKsin(j1);
IkReal x2588=IKcos(j1);
IkReal x2589=(px*sj2);
IkReal x2590=((0.3)*sj3);
IkReal x2591=((0.09)*sj0);
IkReal x2592=(cj2*px);
IkReal x2593=((0.045)*cj3);
IkReal x2594=((0.045)*cj2);
IkReal x2595=(py*sj0);
IkReal x2596=((0.045)*sj3);
IkReal x2597=((1.0)*cj0);
IkReal x2598=((0.3)*cj3);
IkReal x2599=(py*sj2);
IkReal x2600=(cj0*x2588);
IkReal x2601=(cj3*x2587);
IkReal x2602=(cj2*x2588);
IkReal x2603=(cj2*x2587);
IkReal x2604=(pz*x2588);
IkReal x2605=(cj0*px*x2587);
evalcond[0]=((-0.55)+(((-1.0)*x2598))+(((-1.0)*x2596))+x2604+x2605+((x2587*x2595)));
evalcond[1]=(((x2589*x2600))+(((-1.0)*cj2*py*x2597))+((sj0*x2592))+((sj2*x2588*x2595))+(((-1.0)*pz*sj2*x2587)));
evalcond[2]=((((-1.0)*x2593*x2603))+((x2590*x2603))+(((-1.0)*x2588*x2596))+(((-1.0)*x2588*x2598))+pz+(((-0.55)*x2588))+((x2587*x2594)));
evalcond[3]=((0.045)+x2590+((pz*x2603))+(((-1.0)*x2595*x2602))+(((-1.0)*x2593))+(((-1.0)*x2597*x2599))+((sj0*x2589))+(((-1.0)*x2588*x2592*x2597)));
evalcond[4]=((((-1.0)*x2593*x2602))+(((-1.0)*x2595))+(((0.55)*x2587))+((x2590*x2602))+((x2588*x2594))+((x2587*x2598))+((x2587*x2596))+(((-1.0)*px*x2597)));
evalcond[5]=((-0.2125)+(((0.09)*x2592*x2600))+(((1.1)*x2604))+(((1.1)*x2605))+((py*x2591*x2602))+(((-1.0)*x2589*x2591))+(((-1.0)*pp))+(((0.09)*cj0*x2599))+(((-0.09)*pz*x2603))+(((1.1)*x2587*x2595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x161=((1.0)*cj3);
IkReal x162=(sj0*sj2);
IkReal x163=(cj2*sj1);
IkReal x164=((1.0)*sj3);
IkReal x165=(cj1*cj2);
IkReal x166=(sj1*sj2);
IkReal x167=(cj0*sj2);
IkReal x168=((1.0)*cj1);
IkReal x169=(((cj3*x165))+(((-1.0)*sj1*x164)));
IkReal x170=(((cj0*cj2))+(((-1.0)*x162*x168)));
IkReal x171=(((sj3*x165))+((cj3*sj1)));
IkReal x172=((((-1.0)*x163*x164))+((cj1*cj3)));
IkReal x173=(cj0*x169);
IkReal x174=((((-1.0)*x161*x163))+(((-1.0)*cj1*x164)));
IkReal x175=((((-1.0)*cj2*sj0))+(((-1.0)*x167*x168)));
IkReal x176=(((sj0*x169))+((cj3*x167)));
IkReal x177=(((cj0*x171))+(((-1.0)*x162*x164)));
IkReal x178=(((sj3*x167))+((sj0*x171)));
IkReal x179=((((-1.0)*cj3*x162))+x173);
new_r00=(((r00*(((((-1.0)*x161*x162))+x173))))+((r20*x174))+((r10*x176)));
new_r01=(((r01*x179))+((r21*x174))+((r11*x176)));
new_r02=(((r22*x174))+((r12*x176))+((r02*x179)));
new_r10=(((r00*x175))+((r20*x166))+((r10*x170)));
new_r11=(((r01*x175))+((r21*x166))+((r11*x170)));
new_r12=(((r22*x166))+((r12*x170))+((r02*x175)));
new_r20=(((r00*x177))+((r20*x172))+((r10*x178)));
new_r21=(((r01*x177))+((r21*x172))+((r11*x178)));
new_r22=(((r22*x172))+((r12*x178))+((r02*x177)));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x180=((1.0)*cj3);
IkReal x181=(sj0*sj2);
IkReal x182=(cj2*sj1);
IkReal x183=((1.0)*sj3);
IkReal x184=(cj1*cj2);
IkReal x185=(sj1*sj2);
IkReal x186=(cj0*sj2);
IkReal x187=((1.0)*cj1);
IkReal x188=x169;
IkReal x189=x170;
IkReal x190=x171;
IkReal x191=x172;
IkReal x192=(cj0*x188);
IkReal x193=x174;
IkReal x194=x175;
IkReal x195=(((sj0*x188))+((cj3*x186)));
IkReal x196=(((cj0*x190))+(((-1.0)*x181*x183)));
IkReal x197=(((sj3*x186))+((sj0*x190)));
IkReal x198=((((-1.0)*cj3*x181))+x192);
new_r00=(((r20*x193))+((r00*(((((-1.0)*x180*x181))+x192))))+((r10*x195)));
new_r01=(((r01*x198))+((r21*x193))+((r11*x195)));
new_r02=(((r12*x195))+((r22*x193))+((r02*x198)));
new_r10=(((r00*x194))+((r20*x185))+((r10*x189)));
new_r11=(((r01*x194))+((r21*x185))+((r11*x189)));
new_r12=(((r12*x189))+((r02*x194))+((r22*x185)));
new_r20=(((r00*x196))+((r20*x191))+((r10*x197)));
new_r21=(((r01*x196))+((r21*x191))+((r11*x197)));
new_r22=(((r12*x197))+((r22*x191))+((r02*x196)));
j4eval[0]=sj5;
j4eval[1]=IKsign(sj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x199=((1.0)*cj3);
IkReal x200=(sj0*sj2);
IkReal x201=(cj2*sj1);
IkReal x202=((1.0)*sj3);
IkReal x203=(cj1*cj2);
IkReal x204=(sj1*sj2);
IkReal x205=(cj0*sj2);
IkReal x206=((1.0)*cj1);
IkReal x207=x169;
IkReal x208=x170;
IkReal x209=x171;
IkReal x210=x172;
IkReal x211=(cj0*x207);
IkReal x212=x174;
IkReal x213=x175;
IkReal x214=(((sj0*x207))+((cj3*x205)));
IkReal x215=((((-1.0)*x200*x202))+((cj0*x209)));
IkReal x216=(((sj3*x205))+((sj0*x209)));
IkReal x217=(x211+(((-1.0)*cj3*x200)));
new_r00=(((r00*((x211+(((-1.0)*x199*x200))))))+((r10*x214))+((r20*x212)));
new_r01=(((r21*x212))+((r11*x214))+((r01*x217)));
new_r02=(((r12*x214))+((r02*x217))+((r22*x212)));
new_r10=(((r10*x208))+((r20*x204))+((r00*x213)));
new_r11=(((r11*x208))+((r21*x204))+((r01*x213)));
new_r12=(((r22*x204))+((r02*x213))+((r12*x208)));
new_r20=(((r00*x215))+((r10*x216))+((r20*x210)));
new_r21=(((r21*x210))+((r11*x216))+((r01*x215)));
new_r22=(((r12*x216))+((r02*x215))+((r22*x210)));
j4eval[0]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x219 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x219.valid){
continue;
}
IkReal x218=x219.value;
j4array[0]=((-1.0)*x218);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x218)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(((new_r12*(IKcos(j4))))+(((-1.0)*new_r02*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x220=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x220))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r00))+(((-1.0)*sj4*x220)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x220))+(((-1.0)*new_r00*sj4))))+IKsqr((((cj4*new_r00))+(((-1.0)*sj4*x220))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x220))+(((-1.0)*new_r00*sj4))), (((cj4*new_r00))+(((-1.0)*sj4*x220))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x221=IKsin(j6);
IkReal x222=IKcos(j6);
IkReal x223=((1.0)*sj4);
IkReal x224=((1.0)*x222);
IkReal x225=(sj4*x221);
IkReal x226=(sj4*x222);
IkReal x227=(cj4*x221);
IkReal x228=(cj4*x224);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x221);
evalcond[1]=(x227+x226+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x224)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x223))+(((-1.0)*x221)));
evalcond[4]=((((-1.0)*new_r01*x223))+((cj4*new_r11))+(((-1.0)*x224)));
evalcond[5]=(x225+new_r00+(((-1.0)*x228)));
evalcond[6]=(x225+new_r11+(((-1.0)*x228)));
evalcond[7]=((((-1.0)*x222*x223))+new_r10+(((-1.0)*x227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x230 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x230.valid){
continue;
}
IkReal x229=x230.value;
j4array[0]=((-1.0)*x229);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x229)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(((new_r12*(IKcos(j4))))+(((-1.0)*new_r02*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x231=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj4*x231))+((cj4*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x231))+((cj4*new_r01))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x231))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*sj4*x231))+((cj4*new_r01))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x231))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x232=IKcos(j6);
IkReal x233=IKsin(j6);
IkReal x234=((1.0)*sj4);
IkReal x235=((1.0)*x233);
IkReal x236=(sj4*x232);
IkReal x237=((1.0)*x232);
IkReal x238=(cj4*x235);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x232);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x235)));
evalcond[2]=(((sj4*x233))+((cj4*x232))+new_r00);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x235))+(((-1.0)*new_r00*x234)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x237))+(((-1.0)*new_r01*x234)));
evalcond[5]=((((-1.0)*x238))+x236+new_r01);
evalcond[6]=((((-1.0)*x238))+x236+new_r10);
evalcond[7]=((((-1.0)*x233*x234))+(((-1.0)*cj4*x237))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x240=IKPowWithIntegerCheck(sj5,-1);
if(!x240.valid){
continue;
}
IkReal x239=x240.value;
CheckValue<IkReal> x241=IKPowWithIntegerCheck(new_r12,-1);
if(!x241.valid){
continue;
}
if( IKabs((x239*(x241.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x239)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x239*(x241.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5)))))))+IKsqr((new_r02*x239))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x239*(x241.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5)))))), (new_r02*x239));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x242=IKcos(j4);
IkReal x243=IKsin(j4);
IkReal x244=((1.0)*sj5);
IkReal x245=((1.0)*cj5);
IkReal x246=(new_r12*x243);
IkReal x247=(new_r02*x242);
evalcond[0]=((((-1.0)*x242*x244))+new_r02);
evalcond[1]=((((-1.0)*x243*x244))+new_r12);
evalcond[2]=(((new_r12*x242))+(((-1.0)*new_r02*x243)));
evalcond[3]=(x247+x246+(((-1.0)*x244)));
evalcond[4]=(((cj5*x246))+((cj5*x247))+(((-1.0)*new_r22*x244)));
evalcond[5]=((((-1.0)*new_r10*x243*x244))+(((-1.0)*new_r00*x242*x244))+(((-1.0)*new_r20*x245)));
evalcond[6]=((((-1.0)*new_r21*x245))+(((-1.0)*new_r11*x243*x244))+(((-1.0)*new_r01*x242*x244)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x245))+(((-1.0)*x244*x247))+(((-1.0)*x244*x246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[2];
IkReal x248=((1.0)*cj3);
IkReal x249=(sj0*sj2);
IkReal x250=(cj2*sj1);
IkReal x251=((1.0)*sj3);
IkReal x252=(cj1*cj2);
IkReal x253=(sj1*sj2);
IkReal x254=(cj0*sj2);
IkReal x255=((1.0)*cj1);
IkReal x256=x169;
IkReal x257=x170;
IkReal x258=x171;
IkReal x259=x172;
IkReal x260=(cj0*x256);
IkReal x261=x174;
IkReal x262=x175;
IkReal x263=(((cj3*x254))+((sj0*x256)));
IkReal x264=(((cj0*x258))+(((-1.0)*x249*x251)));
IkReal x265=(((sj0*x258))+((sj3*x254)));
IkReal x266=(x260+(((-1.0)*cj3*x249)));
new_r00=(((r00*(((((-1.0)*x248*x249))+x260))))+((r10*x263))+((r20*x261)));
new_r01=(((r21*x261))+((r11*x263))+((r01*x266)));
new_r02=(((r22*x261))+((r02*x266))+((r12*x263)));
new_r10=(((r20*x253))+((r10*x257))+((r00*x262)));
new_r11=(((r21*x253))+((r11*x257))+((r01*x262)));
new_r12=(((r02*x262))+((r12*x257))+((r22*x253)));
new_r20=(((r20*x259))+((r00*x264))+((r10*x265)));
new_r21=(((r21*x259))+((r11*x265))+((r01*x264)));
new_r22=(((r02*x264))+((r12*x265))+((r22*x259)));
j6eval[0]=sj5;
j6eval[1]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x267=((1.0)*cj3);
IkReal x268=(sj0*sj2);
IkReal x269=(cj2*sj1);
IkReal x270=((1.0)*sj3);
IkReal x271=(cj1*cj2);
IkReal x272=(sj1*sj2);
IkReal x273=(cj0*sj2);
IkReal x274=((1.0)*cj1);
IkReal x275=x169;
IkReal x276=x170;
IkReal x277=x171;
IkReal x278=x172;
IkReal x279=(cj0*x275);
IkReal x280=x174;
IkReal x281=x175;
IkReal x282=(((sj0*x275))+((cj3*x273)));
IkReal x283=((((-1.0)*x268*x270))+((cj0*x277)));
IkReal x284=(((sj3*x273))+((sj0*x277)));
IkReal x285=((((-1.0)*cj3*x268))+x279);
new_r00=(((r10*x282))+((r00*((x279+(((-1.0)*x267*x268))))))+((r20*x280)));
new_r01=(((r01*x285))+((r21*x280))+((r11*x282)));
new_r02=(((r02*x285))+((r22*x280))+((r12*x282)));
new_r10=(((r00*x281))+((r10*x276))+((r20*x272)));
new_r11=(((r01*x281))+((r21*x272))+((r11*x276)));
new_r12=(((r22*x272))+((r02*x281))+((r12*x276)));
new_r20=(((r00*x283))+((r10*x284))+((r20*x278)));
new_r21=(((r01*x283))+((r11*x284))+((r21*x278)));
new_r22=(((r22*x278))+((r02*x283))+((r12*x284)));
j6eval[0]=sj4;
j6eval[1]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x286=((1.0)*cj3);
IkReal x287=(sj0*sj2);
IkReal x288=(cj2*sj1);
IkReal x289=((1.0)*sj3);
IkReal x290=(cj1*cj2);
IkReal x291=(sj1*sj2);
IkReal x292=(cj0*sj2);
IkReal x293=((1.0)*cj1);
IkReal x294=x169;
IkReal x295=x170;
IkReal x296=x171;
IkReal x297=x172;
IkReal x298=(cj0*x294);
IkReal x299=x174;
IkReal x300=x175;
IkReal x301=(((cj3*x292))+((sj0*x294)));
IkReal x302=((((-1.0)*x287*x289))+((cj0*x296)));
IkReal x303=(((sj0*x296))+((sj3*x292)));
IkReal x304=((((-1.0)*cj3*x287))+x298);
new_r00=(((r20*x299))+((r00*((x298+(((-1.0)*x286*x287))))))+((r10*x301)));
new_r01=(((r11*x301))+((r01*x304))+((r21*x299)));
new_r02=(((r02*x304))+((r22*x299))+((r12*x301)));
new_r10=(((r20*x291))+((r10*x295))+((r00*x300)));
new_r11=(((r01*x300))+((r21*x291))+((r11*x295)));
new_r12=(((r12*x295))+((r02*x300))+((r22*x291)));
new_r20=(((r20*x297))+((r10*x303))+((r00*x302)));
new_r21=(((r11*x303))+((r01*x302))+((r21*x297)));
new_r22=(((r02*x302))+((r22*x297))+((r12*x303)));
j6eval[0]=cj4;
j6eval[1]=cj5;
j6eval[2]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x305=(new_r22+(((-1.0)*cj5)));
IkReal x306=((((-1.0)*sj5))+new_r12);
IkReal x307=((1.0)*cj5);
IkReal x308=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x305;
evalcond[2]=x305;
evalcond[3]=new_r02;
evalcond[4]=x306;
evalcond[5]=x306;
evalcond[6]=((((-1.0)*new_r22*x308))+((cj5*new_r12)));
evalcond[7]=((((-1.0)*new_r20*x307))+(((-1.0)*new_r10*x308)));
evalcond[8]=((((-1.0)*new_r21*x307))+(((-1.0)*new_r11*x308)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x307))+(((-1.0)*new_r12*x308)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x309 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x309.valid){
continue;
}
CheckValue<IkReal> x310=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x310.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x309.value)+(((1.5707963267949)*(x310.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x311=IKsin(j6);
IkReal x312=IKcos(j6);
IkReal x313=((1.0)*new_r12);
IkReal x314=((1.0)*x312);
evalcond[0]=(((new_r12*x312))+new_r20);
evalcond[1]=(new_r11+((new_r22*x311)));
evalcond[2]=(new_r21+(((-1.0)*x311*x313)));
evalcond[3]=((((-1.0)*new_r22*x314))+new_r10);
evalcond[4]=((((-1.0)*x311))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x314))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x313))+x311+((new_r11*new_r22)));
evalcond[7]=((((-1.0)*new_r20*x313))+(((-1.0)*x314))+((new_r10*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x315=(new_r22+(((-1.0)*cj5)));
IkReal x316=((1.0)*cj5);
IkReal x317=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x315;
evalcond[2]=x315;
evalcond[3]=new_r02;
evalcond[4]=(sj5+new_r12);
evalcond[5]=((((-1.0)*x317))+(((-1.0)*new_r12)));
evalcond[6]=((((-1.0)*new_r22*x317))+(((-1.0)*new_r12*x316)));
evalcond[7]=(((new_r10*sj5))+(((-1.0)*new_r20*x316)));
evalcond[8]=((((-1.0)*new_r21*x316))+((new_r11*sj5)));
evalcond[9]=((1.0)+((new_r12*sj5))+(((-1.0)*new_r22*x316)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x318=IKsin(j6);
IkReal x319=IKcos(j6);
IkReal x320=((1.0)*new_r22);
IkReal x321=((1.0)*x319);
evalcond[0]=(((new_r12*x318))+new_r21);
evalcond[1]=((((-1.0)*x318))+new_r00);
evalcond[2]=((((-1.0)*x321))+new_r01);
evalcond[3]=((((-1.0)*new_r12*x321))+new_r20);
evalcond[4]=((((-1.0)*new_r11))+((new_r22*x318)));
evalcond[5]=((((-1.0)*x319*x320))+(((-1.0)*new_r10)));
evalcond[6]=(x318+((new_r12*new_r21))+(((-1.0)*new_r11*x320)));
evalcond[7]=((((-1.0)*x321))+((new_r12*new_r20))+(((-1.0)*new_r10*x320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x322=((1.0)*cj4);
IkReal x323=((1.0)*sj4);
IkReal x324=(((cj4*new_r12))+(((-1.0)*new_r02*x323)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x322))+new_r02);
evalcond[3]=((((-1.0)*x323))+new_r12);
evalcond[4]=x324;
evalcond[5]=x324;
evalcond[6]=((-1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[7]=(((cj4*new_r01))+((new_r11*sj4)));
evalcond[8]=(((cj4*new_r00))+((new_r10*sj4)));
evalcond[9]=((((-1.0)*new_r00*x322))+(((-1.0)*new_r10*x323)));
evalcond[10]=((((-1.0)*new_r01*x322))+(((-1.0)*new_r11*x323)));
evalcond[11]=((1.0)+(((-1.0)*new_r12*x323))+(((-1.0)*new_r02*x322)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x325=IKcos(j6);
IkReal x326=IKsin(j6);
IkReal x327=((1.0)*new_r12);
IkReal x328=((1.0)*x326);
IkReal x329=((1.0)*x325);
evalcond[0]=(x325+new_r20);
evalcond[1]=((((-1.0)*x328))+new_r21);
evalcond[2]=(((new_r12*x325))+new_r01);
evalcond[3]=(((new_r12*x326))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x329))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x328))+new_r10);
evalcond[6]=((((-1.0)*x328))+(((-1.0)*new_r00*x327))+((new_r02*new_r10)));
evalcond[7]=((((-1.0)*x329))+(((-1.0)*new_r01*x327))+((new_r02*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x330=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x331=(((cj4*new_r00))+((new_r10*sj4)));
IkReal x332=(((cj4*new_r01))+((new_r11*sj4)));
IkReal x333=((1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj4+new_r02);
evalcond[3]=(sj4+new_r12);
evalcond[4]=x330;
evalcond[5]=x330;
evalcond[6]=x333;
evalcond[7]=x332;
evalcond[8]=x331;
evalcond[9]=x331;
evalcond[10]=x332;
evalcond[11]=x333;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x334=IKcos(j6);
IkReal x335=IKsin(j6);
IkReal x336=((1.0)*new_r02);
IkReal x337=((1.0)*new_r12);
IkReal x338=((1.0)*x334);
evalcond[0]=(x335+new_r21);
evalcond[1]=((((-1.0)*x338))+new_r20);
evalcond[2]=(((new_r02*x334))+new_r11);
evalcond[3]=(((new_r02*x335))+new_r10);
evalcond[4]=(new_r01+(((-1.0)*x334*x337)));
evalcond[5]=(new_r00+(((-1.0)*x335*x337)));
evalcond[6]=((((-1.0)*new_r10*x336))+((new_r00*new_r12))+(((-1.0)*x335)));
evalcond[7]=((((-1.0)*new_r11*x336))+((new_r01*new_r12))+(((-1.0)*x338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x339=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x340=(((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x339;
evalcond[7]=x339;
evalcond[8]=x340;
evalcond[9]=x340;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x341=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x341))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r00))+(((-1.0)*sj4*x341)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x341))+(((-1.0)*new_r00*sj4))))+IKsqr((((cj4*new_r00))+(((-1.0)*sj4*x341))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x341))+(((-1.0)*new_r00*sj4))), (((cj4*new_r00))+(((-1.0)*sj4*x341))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x342=IKsin(j6);
IkReal x343=IKcos(j6);
IkReal x344=((1.0)*sj4);
IkReal x345=((1.0)*x343);
IkReal x346=(sj4*x342);
IkReal x347=(sj4*x343);
IkReal x348=(cj4*x342);
IkReal x349=(cj4*x345);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x342);
evalcond[1]=(x347+x348+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x345)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x344))+(((-1.0)*x342)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*new_r01*x344))+(((-1.0)*x345)));
evalcond[5]=(x346+new_r00+(((-1.0)*x349)));
evalcond[6]=(x346+new_r11+(((-1.0)*x349)));
evalcond[7]=((((-1.0)*x343*x344))+new_r10+(((-1.0)*x348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x350=(cj4*new_r02);
IkReal x351=(new_r12*sj4);
IkReal x352=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x352;
evalcond[7]=x352;
evalcond[8]=(x351+x350);
evalcond[9]=((((-1.0)*x351))+(((-1.0)*x350)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x353=((1.0)*new_r00);
if( IKabs((((cj4*new_r01))+(((-1.0)*sj4*x353)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x353)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*new_r01))+(((-1.0)*sj4*x353))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x353))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((cj4*new_r01))+(((-1.0)*sj4*x353))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x353))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x354=IKcos(j6);
IkReal x355=IKsin(j6);
IkReal x356=((1.0)*sj4);
IkReal x357=((1.0)*x355);
IkReal x358=(sj4*x354);
IkReal x359=((1.0)*x354);
IkReal x360=(cj4*x357);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x354);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x357)));
evalcond[2]=(((sj4*x355))+((cj4*x354))+new_r00);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x357))+(((-1.0)*new_r00*x356)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x359))+(((-1.0)*new_r01*x356)));
evalcond[5]=((((-1.0)*x360))+x358+new_r01);
evalcond[6]=((((-1.0)*x360))+x358+new_r10);
evalcond[7]=((((-1.0)*cj4*x359))+new_r11+(((-1.0)*x355*x356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x361=(new_r22+(((-1.0)*cj5)));
IkReal x362=((((-1.0)*sj5))+new_r02);
IkReal x363=((1.0)*cj5);
IkReal x364=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=x361;
evalcond[2]=x361;
evalcond[3]=x362;
evalcond[4]=new_r12;
evalcond[5]=x362;
evalcond[6]=(((cj5*new_r02))+(((-1.0)*new_r22*x364)));
evalcond[7]=((((-1.0)*new_r00*x364))+(((-1.0)*new_r20*x363)));
evalcond[8]=((((-1.0)*new_r01*x364))+(((-1.0)*new_r21*x363)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x363))+(((-1.0)*new_r02*x364)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x365=IKcos(j6);
IkReal x366=IKsin(j6);
IkReal x367=((1.0)*new_r02);
IkReal x368=((1.0)*x365);
evalcond[0]=(new_r20+((new_r02*x365)));
evalcond[1]=((((-1.0)*x366))+new_r10);
evalcond[2]=((((-1.0)*x368))+new_r11);
evalcond[3]=(((new_r22*x366))+new_r01);
evalcond[4]=((((-1.0)*x366*x367))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x368))+new_r00);
evalcond[6]=(((new_r01*new_r22))+x366+(((-1.0)*new_r21*x367)));
evalcond[7]=((((-1.0)*new_r20*x367))+((new_r00*new_r22))+(((-1.0)*x368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x369=(new_r22+(((-1.0)*cj5)));
IkReal x370=((1.0)*cj5);
IkReal x371=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=x369;
evalcond[2]=x369;
evalcond[3]=(sj5+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x371))+(((-1.0)*new_r02)));
evalcond[6]=((((-1.0)*new_r22*x371))+(((-1.0)*new_r02*x370)));
evalcond[7]=((((-1.0)*new_r20*x370))+((new_r00*sj5)));
evalcond[8]=((((-1.0)*new_r21*x370))+((new_r01*sj5)));
evalcond[9]=((1.0)+((new_r02*sj5))+(((-1.0)*new_r22*x370)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x372 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x372.valid){
continue;
}
CheckValue<IkReal> x373=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x373.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x372.value)+(((1.5707963267949)*(x373.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x374=IKsin(j6);
IkReal x375=IKcos(j6);
IkReal x376=((1.0)*new_r01);
IkReal x377=((1.0)*new_r00);
IkReal x378=((1.0)*x375);
evalcond[0]=(new_r21+((new_r02*x374)));
evalcond[1]=(new_r20+(((-1.0)*new_r02*x378)));
evalcond[2]=((((-1.0)*x374))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x378))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x376))+((new_r22*x374)));
evalcond[5]=((((-1.0)*x377))+(((-1.0)*new_r22*x378)));
evalcond[6]=((((-1.0)*new_r22*x376))+x374+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x378))+(((-1.0)*new_r22*x377))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x380=IKPowWithIntegerCheck(sj5,-1);
if(!x380.valid){
continue;
}
IkReal x379=x380.value;
CheckValue<IkReal> x381=IKPowWithIntegerCheck(cj4,-1);
if(!x381.valid){
continue;
}
CheckValue<IkReal> x382=IKPowWithIntegerCheck(cj5,-1);
if(!x382.valid){
continue;
}
if( IKabs((x379*(x381.value)*(x382.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x379)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x379*(x381.value)*(x382.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))))+IKsqr(((-1.0)*new_r20*x379))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x379*(x381.value)*(x382.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))), ((-1.0)*new_r20*x379));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x383=IKsin(j6);
IkReal x384=IKcos(j6);
IkReal x385=((1.0)*sj5);
IkReal x386=((1.0)*sj4);
IkReal x387=(cj5*sj4);
IkReal x388=(cj4*new_r01);
IkReal x389=(cj4*new_r00);
IkReal x390=((1.0)*x384);
IkReal x391=(cj5*x383);
IkReal x392=((1.0)*x383);
evalcond[0]=(((sj5*x384))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x383*x385)));
evalcond[2]=(((new_r11*sj4))+x388+x391);
evalcond[3]=((((-1.0)*x392))+((cj4*new_r10))+(((-1.0)*new_r00*x386)));
evalcond[4]=((((-1.0)*x390))+((cj4*new_r11))+(((-1.0)*new_r01*x386)));
evalcond[5]=(((cj4*x391))+((sj4*x384))+new_r01);
evalcond[6]=((((-1.0)*cj5*x390))+((new_r10*sj4))+x389);
evalcond[7]=((((-1.0)*cj4*cj5*x390))+((sj4*x383))+new_r00);
evalcond[8]=((((-1.0)*cj4*x390))+((x383*x387))+new_r11);
evalcond[9]=((((-1.0)*cj4*x392))+(((-1.0)*cj5*x384*x386))+new_r10);
evalcond[10]=(x383+((new_r11*x387))+(((-1.0)*new_r21*x385))+((cj5*x388)));
evalcond[11]=((((-1.0)*x390))+(((-1.0)*new_r20*x385))+((new_r10*x387))+((cj5*x389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x394=IKPowWithIntegerCheck(sj5,-1);
if(!x394.valid){
continue;
}
IkReal x393=x394.value;
CheckValue<IkReal> x395=IKPowWithIntegerCheck(sj4,-1);
if(!x395.valid){
continue;
}
if( IKabs((x393*(x395.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x393)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x393*(x395.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))))+IKsqr(((-1.0)*new_r20*x393))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x393*(x395.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))), ((-1.0)*new_r20*x393));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x396=IKsin(j6);
IkReal x397=IKcos(j6);
IkReal x398=((1.0)*sj5);
IkReal x399=((1.0)*sj4);
IkReal x400=(cj5*sj4);
IkReal x401=(cj4*new_r01);
IkReal x402=(cj4*new_r00);
IkReal x403=((1.0)*x397);
IkReal x404=(cj5*x396);
IkReal x405=((1.0)*x396);
evalcond[0]=(((sj5*x397))+new_r20);
evalcond[1]=((((-1.0)*x396*x398))+new_r21);
evalcond[2]=(((new_r11*sj4))+x401+x404);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x399))+(((-1.0)*x405)));
evalcond[4]=((((-1.0)*new_r01*x399))+((cj4*new_r11))+(((-1.0)*x403)));
evalcond[5]=(((cj4*x404))+new_r01+((sj4*x397)));
evalcond[6]=(((new_r10*sj4))+x402+(((-1.0)*cj5*x403)));
evalcond[7]=(new_r00+(((-1.0)*cj4*cj5*x403))+((sj4*x396)));
evalcond[8]=(new_r11+(((-1.0)*cj4*x403))+((x396*x400)));
evalcond[9]=((((-1.0)*cj5*x397*x399))+new_r10+(((-1.0)*cj4*x405)));
evalcond[10]=((((-1.0)*new_r21*x398))+((cj5*x401))+x396+((new_r11*x400)));
evalcond[11]=(((cj5*x402))+((new_r10*x400))+(((-1.0)*x403))+(((-1.0)*new_r20*x398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x406=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x406.valid){
continue;
}
CheckValue<IkReal> x407 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x407.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x406.value)))+(x407.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x408=IKsin(j6);
IkReal x409=IKcos(j6);
IkReal x410=((1.0)*sj5);
IkReal x411=((1.0)*sj4);
IkReal x412=(cj5*sj4);
IkReal x413=(cj4*new_r01);
IkReal x414=(cj4*new_r00);
IkReal x415=((1.0)*x409);
IkReal x416=(cj5*x408);
IkReal x417=((1.0)*x408);
evalcond[0]=(((sj5*x409))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x408*x410)));
evalcond[2]=(((new_r11*sj4))+x413+x416);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x411))+(((-1.0)*x417)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x415))+(((-1.0)*new_r01*x411)));
evalcond[5]=(((cj4*x416))+new_r01+((sj4*x409)));
evalcond[6]=(((new_r10*sj4))+x414+(((-1.0)*cj5*x415)));
evalcond[7]=((((-1.0)*cj4*cj5*x415))+new_r00+((sj4*x408)));
evalcond[8]=(((x408*x412))+(((-1.0)*cj4*x415))+new_r11);
evalcond[9]=((((-1.0)*cj5*x409*x411))+(((-1.0)*cj4*x417))+new_r10);
evalcond[10]=(((cj5*x413))+x408+(((-1.0)*new_r21*x410))+((new_r11*x412)));
evalcond[11]=((((-1.0)*new_r20*x410))+((cj5*x414))+((new_r10*x412))+(((-1.0)*x415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x418=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x418.valid){
continue;
}
CheckValue<IkReal> x419 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);
if(!x419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x418.value)))+(x419.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x420=IKcos(j4);
IkReal x421=IKsin(j4);
IkReal x422=((1.0)*sj5);
IkReal x423=((1.0)*cj5);
IkReal x424=(new_r12*x421);
IkReal x425=(new_r02*x420);
evalcond[0]=((((-1.0)*x420*x422))+new_r02);
evalcond[1]=((((-1.0)*x421*x422))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x421))+((new_r12*x420)));
evalcond[3]=((((-1.0)*x422))+x425+x424);
evalcond[4]=((((-1.0)*new_r22*x422))+((cj5*x424))+((cj5*x425)));
evalcond[5]=((((-1.0)*new_r10*x421*x422))+(((-1.0)*new_r00*x420*x422))+(((-1.0)*new_r20*x423)));
evalcond[6]=((((-1.0)*new_r01*x420*x422))+(((-1.0)*new_r21*x423))+(((-1.0)*new_r11*x421*x422)));
evalcond[7]=((1.0)+(((-1.0)*x422*x424))+(((-1.0)*x422*x425))+(((-1.0)*new_r22*x423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[2];
IkReal x426=((1.0)*cj3);
IkReal x427=(sj0*sj2);
IkReal x428=(cj2*sj1);
IkReal x429=((1.0)*sj3);
IkReal x430=(cj1*cj2);
IkReal x431=(sj1*sj2);
IkReal x432=(cj0*sj2);
IkReal x433=((1.0)*cj1);
IkReal x434=x169;
IkReal x435=x170;
IkReal x436=x171;
IkReal x437=x172;
IkReal x438=(cj0*x434);
IkReal x439=x174;
IkReal x440=x175;
IkReal x441=(((sj0*x434))+((cj3*x432)));
IkReal x442=((((-1.0)*x427*x429))+((cj0*x436)));
IkReal x443=(((sj0*x436))+((sj3*x432)));
IkReal x444=((((-1.0)*cj3*x427))+x438);
new_r00=(((r00*(((((-1.0)*x426*x427))+x438))))+((r10*x441))+((r20*x439)));
new_r01=(((r21*x439))+((r01*x444))+((r11*x441)));
new_r02=(((r02*x444))+((r22*x439))+((r12*x441)));
new_r10=(((r00*x440))+((r10*x435))+((r20*x431)));
new_r11=(((r21*x431))+((r01*x440))+((r11*x435)));
new_r12=(((r12*x435))+((r02*x440))+((r22*x431)));
new_r20=(((r00*x442))+((r10*x443))+((r20*x437)));
new_r21=(((r21*x437))+((r01*x442))+((r11*x443)));
new_r22=(((r02*x442))+((r22*x437))+((r12*x443)));
j6eval[0]=sj5;
j6eval[1]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x445=((1.0)*cj3);
IkReal x446=(sj0*sj2);
IkReal x447=(cj2*sj1);
IkReal x448=((1.0)*sj3);
IkReal x449=(cj1*cj2);
IkReal x450=(sj1*sj2);
IkReal x451=(cj0*sj2);
IkReal x452=((1.0)*cj1);
IkReal x453=x169;
IkReal x454=x170;
IkReal x455=x171;
IkReal x456=x172;
IkReal x457=(cj0*x453);
IkReal x458=x174;
IkReal x459=x175;
IkReal x460=(((cj3*x451))+((sj0*x453)));
IkReal x461=(((cj0*x455))+(((-1.0)*x446*x448)));
IkReal x462=(((sj3*x451))+((sj0*x455)));
IkReal x463=((((-1.0)*cj3*x446))+x457);
new_r00=(((r00*(((((-1.0)*x445*x446))+x457))))+((r20*x458))+((r10*x460)));
new_r01=(((r11*x460))+((r01*x463))+((r21*x458)));
new_r02=(((r12*x460))+((r02*x463))+((r22*x458)));
new_r10=(((r20*x450))+((r00*x459))+((r10*x454)));
new_r11=(((r11*x454))+((r01*x459))+((r21*x450)));
new_r12=(((r12*x454))+((r02*x459))+((r22*x450)));
new_r20=(((r20*x456))+((r00*x461))+((r10*x462)));
new_r21=(((r11*x462))+((r01*x461))+((r21*x456)));
new_r22=(((r12*x462))+((r02*x461))+((r22*x456)));
j6eval[0]=sj4;
j6eval[1]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x464=((1.0)*cj3);
IkReal x465=(sj0*sj2);
IkReal x466=(cj2*sj1);
IkReal x467=((1.0)*sj3);
IkReal x468=(cj1*cj2);
IkReal x469=(sj1*sj2);
IkReal x470=(cj0*sj2);
IkReal x471=((1.0)*cj1);
IkReal x472=x169;
IkReal x473=x170;
IkReal x474=x171;
IkReal x475=x172;
IkReal x476=(cj0*x472);
IkReal x477=x174;
IkReal x478=x175;
IkReal x479=(((cj3*x470))+((sj0*x472)));
IkReal x480=((((-1.0)*x465*x467))+((cj0*x474)));
IkReal x481=(((sj0*x474))+((sj3*x470)));
IkReal x482=(x476+(((-1.0)*cj3*x465)));
new_r00=(((r10*x479))+((r20*x477))+((r00*(((((-1.0)*x464*x465))+x476)))));
new_r01=(((r21*x477))+((r11*x479))+((r01*x482)));
new_r02=(((r02*x482))+((r12*x479))+((r22*x477)));
new_r10=(((r10*x473))+((r20*x469))+((r00*x478)));
new_r11=(((r11*x473))+((r21*x469))+((r01*x478)));
new_r12=(((r22*x469))+((r02*x478))+((r12*x473)));
new_r20=(((r20*x475))+((r10*x481))+((r00*x480)));
new_r21=(((r21*x475))+((r11*x481))+((r01*x480)));
new_r22=(((r02*x480))+((r12*x481))+((r22*x475)));
j6eval[0]=cj4;
j6eval[1]=cj5;
j6eval[2]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x483=(new_r22+(((-1.0)*cj5)));
IkReal x484=((((-1.0)*sj5))+new_r12);
IkReal x485=((1.0)*cj5);
IkReal x486=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x483;
evalcond[2]=x483;
evalcond[3]=new_r02;
evalcond[4]=x484;
evalcond[5]=x484;
evalcond[6]=(((cj5*new_r12))+(((-1.0)*new_r22*x486)));
evalcond[7]=((((-1.0)*new_r10*x486))+(((-1.0)*new_r20*x485)));
evalcond[8]=((((-1.0)*new_r21*x485))+(((-1.0)*new_r11*x486)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x485))+(((-1.0)*new_r12*x486)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x487 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x487.valid){
continue;
}
CheckValue<IkReal> x488=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x488.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x487.value)+(((1.5707963267949)*(x488.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x489=IKsin(j6);
IkReal x490=IKcos(j6);
IkReal x491=((1.0)*new_r12);
IkReal x492=((1.0)*x490);
evalcond[0]=(((new_r12*x490))+new_r20);
evalcond[1]=(new_r11+((new_r22*x489)));
evalcond[2]=((((-1.0)*x489*x491))+new_r21);
evalcond[3]=((((-1.0)*new_r22*x492))+new_r10);
evalcond[4]=((((-1.0)*x489))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x492))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x491))+x489+((new_r11*new_r22)));
evalcond[7]=((((-1.0)*new_r20*x491))+(((-1.0)*x492))+((new_r10*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x493=(new_r22+(((-1.0)*cj5)));
IkReal x494=((1.0)*cj5);
IkReal x495=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x493;
evalcond[2]=x493;
evalcond[3]=new_r02;
evalcond[4]=(sj5+new_r12);
evalcond[5]=((((-1.0)*x495))+(((-1.0)*new_r12)));
evalcond[6]=((((-1.0)*new_r22*x495))+(((-1.0)*new_r12*x494)));
evalcond[7]=((((-1.0)*new_r20*x494))+((new_r10*sj5)));
evalcond[8]=(((new_r11*sj5))+(((-1.0)*new_r21*x494)));
evalcond[9]=((1.0)+((new_r12*sj5))+(((-1.0)*new_r22*x494)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x496=IKsin(j6);
IkReal x497=IKcos(j6);
IkReal x498=((1.0)*new_r22);
IkReal x499=((1.0)*x497);
evalcond[0]=(((new_r12*x496))+new_r21);
evalcond[1]=((((-1.0)*x496))+new_r00);
evalcond[2]=((((-1.0)*x499))+new_r01);
evalcond[3]=(new_r20+(((-1.0)*new_r12*x499)));
evalcond[4]=((((-1.0)*new_r11))+((new_r22*x496)));
evalcond[5]=((((-1.0)*x497*x498))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r11*x498))+((new_r12*new_r21))+x496);
evalcond[7]=((((-1.0)*x499))+(((-1.0)*new_r10*x498))+((new_r12*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x500=((1.0)*cj4);
IkReal x501=((1.0)*sj4);
IkReal x502=((((-1.0)*new_r02*x501))+((cj4*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x500))+new_r02);
evalcond[3]=((((-1.0)*x501))+new_r12);
evalcond[4]=x502;
evalcond[5]=x502;
evalcond[6]=((-1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[7]=(((cj4*new_r01))+((new_r11*sj4)));
evalcond[8]=(((cj4*new_r00))+((new_r10*sj4)));
evalcond[9]=((((-1.0)*new_r00*x500))+(((-1.0)*new_r10*x501)));
evalcond[10]=((((-1.0)*new_r01*x500))+(((-1.0)*new_r11*x501)));
evalcond[11]=((1.0)+(((-1.0)*new_r02*x500))+(((-1.0)*new_r12*x501)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x503=IKcos(j6);
IkReal x504=IKsin(j6);
IkReal x505=((1.0)*new_r12);
IkReal x506=((1.0)*x504);
IkReal x507=((1.0)*x503);
evalcond[0]=(x503+new_r20);
evalcond[1]=((((-1.0)*x506))+new_r21);
evalcond[2]=(((new_r12*x503))+new_r01);
evalcond[3]=(((new_r12*x504))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x507))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x506))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x505))+(((-1.0)*x506))+((new_r02*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x505))+(((-1.0)*x507))+((new_r02*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x508=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x509=(((cj4*new_r00))+((new_r10*sj4)));
IkReal x510=(((cj4*new_r01))+((new_r11*sj4)));
IkReal x511=((1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj4+new_r02);
evalcond[3]=(sj4+new_r12);
evalcond[4]=x508;
evalcond[5]=x508;
evalcond[6]=x511;
evalcond[7]=x510;
evalcond[8]=x509;
evalcond[9]=x509;
evalcond[10]=x510;
evalcond[11]=x511;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x512=IKcos(j6);
IkReal x513=IKsin(j6);
IkReal x514=((1.0)*new_r02);
IkReal x515=((1.0)*new_r12);
IkReal x516=((1.0)*x512);
evalcond[0]=(x513+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x516)));
evalcond[2]=(((new_r02*x512))+new_r11);
evalcond[3]=(((new_r02*x513))+new_r10);
evalcond[4]=((((-1.0)*x512*x515))+new_r01);
evalcond[5]=((((-1.0)*x513*x515))+new_r00);
evalcond[6]=((((-1.0)*new_r10*x514))+(((-1.0)*x513))+((new_r00*new_r12)));
evalcond[7]=((((-1.0)*new_r11*x514))+((new_r01*new_r12))+(((-1.0)*x516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x517=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x518=(((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x517;
evalcond[7]=x517;
evalcond[8]=x518;
evalcond[9]=x518;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x519=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x519))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r00))+(((-1.0)*sj4*x519)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x519))+(((-1.0)*new_r00*sj4))))+IKsqr((((cj4*new_r00))+(((-1.0)*sj4*x519))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x519))+(((-1.0)*new_r00*sj4))), (((cj4*new_r00))+(((-1.0)*sj4*x519))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x520=IKsin(j6);
IkReal x521=IKcos(j6);
IkReal x522=((1.0)*sj4);
IkReal x523=((1.0)*x521);
IkReal x524=(sj4*x520);
IkReal x525=(sj4*x521);
IkReal x526=(cj4*x520);
IkReal x527=(cj4*x523);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x520);
evalcond[1]=(x526+x525+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x523)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x520))+(((-1.0)*new_r00*x522)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x523))+(((-1.0)*new_r01*x522)));
evalcond[5]=((((-1.0)*x527))+x524+new_r00);
evalcond[6]=((((-1.0)*x527))+x524+new_r11);
evalcond[7]=((((-1.0)*x521*x522))+(((-1.0)*x526))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x528=(cj4*new_r02);
IkReal x529=(new_r12*sj4);
IkReal x530=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x530;
evalcond[7]=x530;
evalcond[8]=(x528+x529);
evalcond[9]=((((-1.0)*x528))+(((-1.0)*x529)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x531=((1.0)*new_r00);
if( IKabs((((cj4*new_r01))+(((-1.0)*sj4*x531)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x531)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*new_r01))+(((-1.0)*sj4*x531))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x531))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((cj4*new_r01))+(((-1.0)*sj4*x531))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x531))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x532=IKcos(j6);
IkReal x533=IKsin(j6);
IkReal x534=((1.0)*sj4);
IkReal x535=((1.0)*x533);
IkReal x536=(sj4*x532);
IkReal x537=((1.0)*x532);
IkReal x538=(cj4*x535);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x532);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x535)));
evalcond[2]=(((cj4*x532))+new_r00+((sj4*x533)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x534))+(((-1.0)*x535)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x537))+(((-1.0)*new_r01*x534)));
evalcond[5]=((((-1.0)*x538))+x536+new_r01);
evalcond[6]=((((-1.0)*x538))+x536+new_r10);
evalcond[7]=((((-1.0)*x533*x534))+new_r11+(((-1.0)*cj4*x537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x539=(new_r22+(((-1.0)*cj5)));
IkReal x540=((((-1.0)*sj5))+new_r02);
IkReal x541=((1.0)*cj5);
IkReal x542=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=x539;
evalcond[2]=x539;
evalcond[3]=x540;
evalcond[4]=new_r12;
evalcond[5]=x540;
evalcond[6]=((((-1.0)*new_r22*x542))+((cj5*new_r02)));
evalcond[7]=((((-1.0)*new_r00*x542))+(((-1.0)*new_r20*x541)));
evalcond[8]=((((-1.0)*new_r01*x542))+(((-1.0)*new_r21*x541)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x541))+(((-1.0)*new_r02*x542)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x543=IKcos(j6);
IkReal x544=IKsin(j6);
IkReal x545=((1.0)*new_r02);
IkReal x546=((1.0)*x543);
evalcond[0]=(((new_r02*x543))+new_r20);
evalcond[1]=((((-1.0)*x544))+new_r10);
evalcond[2]=((((-1.0)*x546))+new_r11);
evalcond[3]=(((new_r22*x544))+new_r01);
evalcond[4]=((((-1.0)*x544*x545))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x546))+new_r00);
evalcond[6]=(((new_r01*new_r22))+(((-1.0)*new_r21*x545))+x544);
evalcond[7]=(((new_r00*new_r22))+(((-1.0)*new_r20*x545))+(((-1.0)*x546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x547=(new_r22+(((-1.0)*cj5)));
IkReal x548=((1.0)*cj5);
IkReal x549=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=x547;
evalcond[2]=x547;
evalcond[3]=(sj5+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x549))+(((-1.0)*new_r02)));
evalcond[6]=((((-1.0)*new_r22*x549))+(((-1.0)*new_r02*x548)));
evalcond[7]=((((-1.0)*new_r20*x548))+((new_r00*sj5)));
evalcond[8]=(((new_r01*sj5))+(((-1.0)*new_r21*x548)));
evalcond[9]=((1.0)+((new_r02*sj5))+(((-1.0)*new_r22*x548)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x550 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x550.valid){
continue;
}
CheckValue<IkReal> x551=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x551.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x550.value)+(((1.5707963267949)*(x551.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x552=IKsin(j6);
IkReal x553=IKcos(j6);
IkReal x554=((1.0)*new_r01);
IkReal x555=((1.0)*new_r00);
IkReal x556=((1.0)*x553);
evalcond[0]=(((new_r02*x552))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*new_r02*x556)));
evalcond[2]=((((-1.0)*x552))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x556))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x554))+((new_r22*x552)));
evalcond[5]=((((-1.0)*new_r22*x556))+(((-1.0)*x555)));
evalcond[6]=((((-1.0)*new_r22*x554))+x552+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*new_r22*x555))+(((-1.0)*x556))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x558=IKPowWithIntegerCheck(sj5,-1);
if(!x558.valid){
continue;
}
IkReal x557=x558.value;
CheckValue<IkReal> x559=IKPowWithIntegerCheck(cj4,-1);
if(!x559.valid){
continue;
}
CheckValue<IkReal> x560=IKPowWithIntegerCheck(cj5,-1);
if(!x560.valid){
continue;
}
if( IKabs((x557*(x559.value)*(x560.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x557)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x557*(x559.value)*(x560.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))))+IKsqr(((-1.0)*new_r20*x557))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x557*(x559.value)*(x560.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))), ((-1.0)*new_r20*x557));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x561=IKsin(j6);
IkReal x562=IKcos(j6);
IkReal x563=((1.0)*sj5);
IkReal x564=((1.0)*sj4);
IkReal x565=(cj5*sj4);
IkReal x566=(cj4*new_r01);
IkReal x567=(cj4*new_r00);
IkReal x568=((1.0)*x562);
IkReal x569=(cj5*x561);
IkReal x570=((1.0)*x561);
evalcond[0]=(new_r20+((sj5*x562)));
evalcond[1]=(new_r21+(((-1.0)*x561*x563)));
evalcond[2]=(((new_r11*sj4))+x569+x566);
evalcond[3]=((((-1.0)*new_r00*x564))+((cj4*new_r10))+(((-1.0)*x570)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x568))+(((-1.0)*new_r01*x564)));
evalcond[5]=(((sj4*x562))+new_r01+((cj4*x569)));
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x568))+x567);
evalcond[7]=((((-1.0)*cj4*cj5*x568))+((sj4*x561))+new_r00);
evalcond[8]=((((-1.0)*cj4*x568))+((x561*x565))+new_r11);
evalcond[9]=((((-1.0)*cj4*x570))+(((-1.0)*cj5*x562*x564))+new_r10);
evalcond[10]=(x561+((new_r11*x565))+((cj5*x566))+(((-1.0)*new_r21*x563)));
evalcond[11]=((((-1.0)*new_r20*x563))+((new_r10*x565))+((cj5*x567))+(((-1.0)*x568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x572=IKPowWithIntegerCheck(sj5,-1);
if(!x572.valid){
continue;
}
IkReal x571=x572.value;
CheckValue<IkReal> x573=IKPowWithIntegerCheck(sj4,-1);
if(!x573.valid){
continue;
}
if( IKabs((x571*(x573.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x571)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x571*(x573.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))))+IKsqr(((-1.0)*new_r20*x571))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x571*(x573.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))), ((-1.0)*new_r20*x571));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x574=IKsin(j6);
IkReal x575=IKcos(j6);
IkReal x576=((1.0)*sj5);
IkReal x577=((1.0)*sj4);
IkReal x578=(cj5*sj4);
IkReal x579=(cj4*new_r01);
IkReal x580=(cj4*new_r00);
IkReal x581=((1.0)*x575);
IkReal x582=(cj5*x574);
IkReal x583=((1.0)*x574);
evalcond[0]=(((sj5*x575))+new_r20);
evalcond[1]=((((-1.0)*x574*x576))+new_r21);
evalcond[2]=(((new_r11*sj4))+x579+x582);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x577))+(((-1.0)*x583)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*new_r01*x577))+(((-1.0)*x581)));
evalcond[5]=(((sj4*x575))+((cj4*x582))+new_r01);
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x581))+x580);
evalcond[7]=(((sj4*x574))+(((-1.0)*cj4*cj5*x581))+new_r00);
evalcond[8]=((((-1.0)*cj4*x581))+((x574*x578))+new_r11);
evalcond[9]=((((-1.0)*cj5*x575*x577))+(((-1.0)*cj4*x583))+new_r10);
evalcond[10]=(((cj5*x579))+((new_r11*x578))+x574+(((-1.0)*new_r21*x576)));
evalcond[11]=(((new_r10*x578))+((cj5*x580))+(((-1.0)*new_r20*x576))+(((-1.0)*x581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x584=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x584.valid){
continue;
}
CheckValue<IkReal> x585 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x585.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x584.value)))+(x585.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x586=IKsin(j6);
IkReal x587=IKcos(j6);
IkReal x588=((1.0)*sj5);
IkReal x589=((1.0)*sj4);
IkReal x590=(cj5*sj4);
IkReal x591=(cj4*new_r01);
IkReal x592=(cj4*new_r00);
IkReal x593=((1.0)*x587);
IkReal x594=(cj5*x586);
IkReal x595=((1.0)*x586);
evalcond[0]=(((sj5*x587))+new_r20);
evalcond[1]=((((-1.0)*x586*x588))+new_r21);
evalcond[2]=(((new_r11*sj4))+x594+x591);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x595))+(((-1.0)*new_r00*x589)));
evalcond[4]=((((-1.0)*new_r01*x589))+((cj4*new_r11))+(((-1.0)*x593)));
evalcond[5]=(((sj4*x587))+new_r01+((cj4*x594)));
evalcond[6]=((((-1.0)*cj5*x593))+((new_r10*sj4))+x592);
evalcond[7]=((((-1.0)*cj4*cj5*x593))+((sj4*x586))+new_r00);
evalcond[8]=((((-1.0)*cj4*x593))+new_r11+((x586*x590)));
evalcond[9]=((((-1.0)*cj4*x595))+(((-1.0)*cj5*x587*x589))+new_r10);
evalcond[10]=(((new_r11*x590))+(((-1.0)*new_r21*x588))+x586+((cj5*x591)));
evalcond[11]=(((new_r10*x590))+(((-1.0)*new_r20*x588))+(((-1.0)*x593))+((cj5*x592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "2ac375a0aaf420715f482953e36187a5"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
