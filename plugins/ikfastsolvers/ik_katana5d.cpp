#define IKFAST_NAMESPACE ik_katana5d
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 71 generated on 2014-04-13 19:48:33.494988
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==71);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((0.139)*x3);
x11=((0.273)*x0);
x12=((0.273)*x6);
x13=((1.0)*x5);
x14=((1.0)*x7);
x15=((0.19)*x1);
x16=(x0*x2);
x17=(x1*x3);
x18=(x2*x4);
x19=(x1*x4);
x20=(x2*x3);
eetrans[0]=((((0.139)*x0*x19))+((x0*x15))+((x7*((((x11*x20))+((x11*x19))))))+((x5*(((((-1.0)*x11*x18))+((x11*x17))))))+((x10*x16)));
IkReal x21=((1.0)*x6);
IkReal x22=((1.0)*x12);
eetrans[1]=(((x5*(((((-1.0)*x17*x22))+((x12*x18))))))+(((-0.139)*x19*x6))+(((-1.0)*x10*x2*x21))+((x7*(((((-1.0)*x19*x22))+(((-1.0)*x20*x22))))))+(((-1.0)*x15*x21)));
eetrans[2]=((0.2015)+((x7*(((((-0.273)*x17))+(((0.273)*x18))))))+(((-1.0)*x1*x10))+(((0.19)*x2))+(((0.139)*x18))+((x5*(((((0.273)*x20))+(((0.273)*x19)))))));
eerot[0]=(((x9*((((x7*(((((-1.0)*x0*x17))+((x16*x4))))))+((x5*((((x0*x19))+((x16*x3))))))))))+((x6*x8)));
eerot[1]=(((x0*x8))+(((-1.0)*x9*((((x14*((((x18*x6))+(((-1.0)*x17*x6))))))+((x13*((((x19*x6))+((x20*x6)))))))))));
eerot[2]=((-1.0)*x9*((((x13*(((((-1.0)*x18))+x17))))+((x14*((x19+x20)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=((-1.0)*r01);
new_py=((-1.0)*py);
new_r02=((-1.0)*r02);
new_pz=((0.2015)+(((-1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x24 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x24.valid){
continue;
}
IkReal x23=x24.value;
j0array[0]=((-1.0)*x23);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x23)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x25=px*px*px;
IkReal x26=r02*r02;
IkReal x27=r00*r00;
IkReal x28=px*px;
IkReal x29=py*py*py;
IkReal x30=r01*r01;
IkReal x31=pz*pz;
IkReal x32=py*py;
IkReal x33=(py*sj0);
IkReal x34=(r00*r02);
IkReal x35=((3.66144703569545)*px);
IkReal x36=((3.66144703569545)*pz);
IkReal x37=(cj0*pz);
IkReal x38=((19.2707738720813)*pz);
IkReal x39=((19.2707738720813)*px);
IkReal x40=(r01*r02);
IkReal x41=(cj0*px);
IkReal x42=(r00*r01);
IkReal x43=(pz*sj0);
IkReal x44=((0.556443595556348)*x26);
IkReal x45=((9.63538693604066)*x28);
IkReal x46=((9.63538693604066)*x26);
IkReal x47=(cj0*x32);
IkReal x48=(sj0*x29);
IkReal x49=((9.63538693604066)*x31);
IkReal x50=(cj0*x25);
IkReal x51=((9.63538693604066)*x27);
IkReal x52=(sj0*x28);
IkReal x53=((0.272883986123346)*sj0*x40);
IkReal x54=((0.272883986123346)*cj0*x34);
IkReal x55=(cj0*py*x42);
IkReal x56=(px*sj0*x42);
IkReal x57=((0.879787910356)*x30*x33);
IkReal x58=((1.43623150591235)*x34*x37);
IkReal x59=((1.43623150591235)*x40*x43);
IkReal x60=((0.879787910356)*x27*x41);
IkReal x61=((0.879787910356)*x56);
IkReal x62=((0.879787910356)*x55);
IkReal x63=(x41*x44);
IkReal x64=(x33*x44);
IkReal x65=(x27*x35*x37);
IkReal x66=(cj0*py*x35*x40);
IkReal x67=(x50*x51);
IkReal x68=(x26*x35*x37);
IkReal x69=(x46*x50);
IkReal x70=(x35*x42*x43);
IkReal x71=(x33*x34*x35);
IkReal x72=(x36*x55);
IkReal x73=(x46*x48);
IkReal x74=((9.63538693604066)*x30*x48);
IkReal x75=(x26*x33*x36);
IkReal x76=(x30*x33*x36);
IkReal x77=((9.63538693604066)*sj0*x25*x42);
IkReal x78=((3.66144703569545)*x40*x52);
IkReal x79=((3.66144703569545)*x34*x47);
IkReal x80=((9.63538693604066)*cj0*x29*x42);
IkReal x81=(px*x33*x34*x38);
IkReal x82=(x49*x56);
IkReal x83=(x32*x41*x46);
IkReal x84=((19.2707738720813)*x27*x28*x33);
IkReal x85=(x26*x33*x45);
IkReal x86=(x31*x33*x46);
IkReal x87=(x49*x55);
IkReal x88=(x31*x41*x46);
IkReal x89=((28.906160808122)*x32*x56);
IkReal x90=(x30*x33*x49);
IkReal x91=(x27*x41*x49);
IkReal x92=((28.906160808122)*x28*x55);
IkReal x93=(py*x37*x39*x40);
IkReal x94=(x30*x39*x47);
IkReal x95=((19.2707738720813)*x32*x34*x37);
IkReal x96=(x30*x33*x45);
IkReal x97=(x38*x40*x52);
IkReal x98=(x32*x41*x51);
IkReal x99=(x79+x78);
IkReal x100=(x77+x63+x64+x80+x98+x95+x97+x96);
IkReal x101=(x76+x75+x72+x71+x70+x54+x53+x65+x66+x68);
IkReal x102=(x74+x73+x59+x58+x57+x60+x61+x62+x67+x69+x88+x89+x82+x83+x81+x86+x87+x84+x85+x91+x90+x93+x92+x94);
op[0]=((((25.3562814106333)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((14.453080404061)*cj0*py*r00*r02*sj0*(px*px)))+(((-12.6781407053167)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((-4.81769346802033)*py*r01*r02*(px*px)))+(((12.6781407053167)*(py*py)*(pz*pz)*(r02*r02)))+(((25.3562814106333)*px*pz*r00*r02*(py*py)))+(((-4.81769346802033)*r01*r02*(py*py*py)))+(((0.366398266383651)*cj0*px*pz*r01*r02*sj0))+(((-4.81769346802033)*py*r01*r02*(px*px)*(sj0*sj0)))+(((25.3562814106333)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-6.33907035265833)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-1.83072351784773)*px*py*r00*r01))+(((25.3562814106333)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((-0.484507825194381)*px*py*r00*r01*(sj0*sj0)))+(((12.6781407053167)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((4.81769346802033)*(pz*pz*pz)*(r02*r02)))+(((-4.81769346802033)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((-9.63538693604066)*px*py*pz*r00*r01*(sj0*sj0)))+(((-25.3562814106333)*(py*py)*(pz*pz)*(r01*r01)))+(((25.3562814106333)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-4.81769346802033)*pz*(px*px)*(r02*r02)))+(((-9.63538693604066)*px*py*pz*r00*r01*(cj0*cj0)))+(((-14.453080404061)*cj0*px*r01*r02*sj0*(pz*pz)))+(((4.81769346802033)*r01*r02*(py*py*py)*(sj0*sj0)))+(((9.63538693604066)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((0.366398266383651)*px*pz*r00*r02*(cj0*cj0)))+(((-4.81769346802033)*cj0*r01*r02*sj0*(px*px*px)))+(((-76.0688442318999)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-25.3562814106333)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-2.07297743044492)*(pz*pz)*(r02*r02)))+(((25.3562814106333)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((0.366398266383651)*py*pz*r01*r02*(sj0*sj0)))+(((0.439893955178)*pz*(r02*r02)))+(((-0.425453045789016)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-0.183199133191826)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((25.3562814106333)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-4.81769346802033)*pz*(py*py)*(r02*r02)))+(((-25.3562814106333)*px*r00*r02*(pz*pz*pz)))+(((4.81769346802033)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-4.81769346802033)*px*r00*r02*(cj0*cj0)*(py*py)))+(((14.453080404061)*cj0*px*r01*r02*sj0*(py*py)))+(((-0.278221797778174)*pz*(r01*r01)*(sj0*sj0)))+(((-25.3562814106333)*py*r01*r02*(pz*pz*pz)))+(((0.278221797778174)*py*r01*r02*(sj0*sj0)))+(((-50.7125628212666)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-0.556443595556348)*cj0*pz*r00*r01*sj0))+(((-0.850906091578033)*cj0*px*py*sj0*(r02*r02)))+(((25.3562814106333)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((12.6781407053167)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-14.453080404061)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((-9.63538693604066)*cj0*px*py*pz*sj0*(r00*r00)))+(((-0.278221797778174)*pz*(cj0*cj0)*(r00*r00)))+(((12.6781407053167)*(px*px)*(pz*pz)*(r02*r02)))+(((-12.6781407053167)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.242253912597191)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.0528497858676222)*(r02*r02)))+(((-4.81769346802033)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((-50.7125628212666)*px*py*r00*r01*(pz*pz)))+(((9.63538693604066)*px*r00*r02*(py*py)*(sj0*sj0)))+(((4.81769346802033)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((9.63538693604066)*pz*(py*py)*(r01*r01)))+(((0.439893955178)*px*r00*r02))+(((12.6781407053167)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-6.33907035265833)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-0.915361758923863)*(py*py)*(r01*r01)))+(((25.3562814106333)*pz*r00*r02*(px*px*px)))+(((-25.3562814106333)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((-4.81769346802033)*r00*r02*(px*px*px)))+(((-6.33907035265833)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((9.63538693604066)*py*r01*r02*(cj0*cj0)*(px*px)))+(((-4.81769346802033)*px*r00*r02*(py*py)))+(((12.6781407053167)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-25.3562814106333)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((25.3562814106333)*pz*r01*r02*(py*py*py)))+(((19.2707738720813)*px*py*pz*r00*r01))+(((-12.6781407053167)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((0.242253912597191)*(cj0*cj0)*(py*py)*(r00*r00)))+(((14.453080404061)*py*r01*r02*(pz*pz)))+(((0.0153712106632144)*(r01*r01)*(sj0*sj0)))+(((-6.33907035265833)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((25.3562814106333)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((25.3562814106333)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((0.0153712106632144)*(cj0*cj0)*(r00*r00)))+(((-25.3562814106333)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((0.0307424213264288)*cj0*r00*r01*sj0))+(((-25.3562814106333)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-76.0688442318999)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((25.3562814106333)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-6.33907035265833)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-0.183199133191826)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((1.15761567152105)*(px*px)*(r02*r02)))+(((25.3562814106333)*py*pz*r01*r02*(px*px)))+(((-14.453080404061)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((0.366398266383651)*cj0*py*pz*r00*r02*sj0))+(((-4.14595486088983)*py*pz*r01*r02))+(((-25.3562814106333)*(px*px)*(pz*pz)*(r00*r00)))+(((-6.33907035265833)*(px*px*px*px)*(r02*r02)))+(((0.278221797778174)*cj0*px*r01*r02*sj0))+(((-4.81769346802033)*cj0*r00*r02*sj0*(py*py*py)))+(((25.3562814106333)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((-0.425453045789016)*(py*py)*(r02*r02)*(sj0*sj0)))+(((-4.14595486088983)*px*pz*r00*r02))+(((25.3562814106333)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-50.7125628212666)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-25.3562814106333)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((25.3562814106333)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((1.15761567152105)*(py*py)*(r02*r02)))+(((9.63538693604066)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((4.81769346802033)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-25.3562814106333)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((0.242253912597191)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-25.3562814106333)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-76.0688442318999)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-0.484507825194381)*px*py*r00*r01*(cj0*cj0)))+(((-50.7125628212666)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((25.3562814106333)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((-0.242253912597191)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-14.453080404061)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-6.33907035265833)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.278221797778174)*cj0*py*r00*r02*sj0))+(((14.453080404061)*px*r00*r02*(pz*pz)))+(((-12.6781407053167)*(px*px)*(py*py)*(r02*r02)))+(((0.278221797778174)*px*r00*r02*(cj0*cj0)))+(((9.63538693604066)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((-6.33907035265833)*(pz*pz*pz*pz)*(r02*r02)))+(((-6.33907035265833)*(py*py*py*py)*(r02*r02)))+(((25.3562814106333)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((19.2707738720813)*cj0*px*py*pz*sj0*(r02*r02)))+(((25.3562814106333)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((-0.915361758923863)*(px*px)*(r00*r00)))+(((12.6781407053167)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-25.3562814106333)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-0.484507825194381)*cj0*px*py*sj0*(r00*r00)))+(((4.81769346802033)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((-0.366398266383651)*cj0*r00*r01*sj0*(pz*pz)))+(((12.6781407053167)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-25.3562814106333)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-9.63538693604066)*cj0*px*py*pz*sj0*(r01*r01)))+(((-0.484507825194381)*cj0*px*py*sj0*(r01*r01)))+(((4.81769346802033)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((9.63538693604066)*pz*(px*px)*(r00*r00)))+(((0.439893955178)*py*r01*r02)));
op[1]=((((-1.0)*x101))+(((-1.0)*x100))+x102+x99);
op[2]=((((25.3562814106333)*cj0*r00*r01*sj0*(py*py*py*py)))+(((50.7125628212666)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((50.7125628212666)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-50.7125628212666)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-6.5900975386236)*cj0*px*pz*r01*r02*sj0))+(((-50.7125628212666)*py*r01*r02*(pz*pz*pz)))+(((-1.83072351784773)*(py*py)*(r01*r01)))+(((-12.6781407053167)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((-50.7125628212666)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-50.7125628212666)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.242141564796917)*(cj0*cj0)*(r00*r00)))+(((-1.34621569265334)*(px*px)*(r02*r02)))+(((50.7125628212666)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((-12.6781407053167)*(px*px*px*px)*(r02*r02)))+(((-152.1376884638)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-12.6781407053167)*(py*py*py*py)*(r02*r02)))+(((-12.6781407053167)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-12.6781407053167)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((50.7125628212666)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-0.850906091578033)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-152.1376884638)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-0.969015650388763)*py*pz*r01*r02))+(((50.7125628212666)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((6.5900975386236)*cj0*r00*r01*sj0*(pz*pz)))+(((-4.14595486088983)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-101.425125642533)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-0.484507825194381)*(pz*pz)*(r02*r02)))+(((-101.425125642533)*px*py*r00*r01*(pz*pz)))+(((-101.425125642533)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((25.3562814106333)*(py*py)*(pz*pz)*(r02*r02)))+(((50.7125628212666)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-3.66144703569545)*px*py*r00*r01))+(((-0.484283129593835)*cj0*r00*r01*sj0))+(((50.7125628212666)*pz*r01*r02*(py*py*py)))+(((50.7125628212666)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-50.7125628212666)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-4.14595486088983)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.242141564796917)*(r01*r01)*(sj0*sj0)))+(((50.7125628212666)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-1.70181218315607)*cj0*px*py*sj0*(r02*r02)))+(((4.14595486088983)*(px*px)*(r01*r01)*(sj0*sj0)))+(((50.7125628212666)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((50.7125628212666)*pz*r00*r02*(px*px*px)))+(((50.7125628212666)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((3.2950487693118)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((3.2950487693118)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-50.7125628212666)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((25.3562814106333)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-50.7125628212666)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((-12.6781407053167)*(pz*pz*pz*pz)*(r02*r02)))+(((25.3562814106333)*(px*px)*(pz*pz)*(r02*r02)))+(((-25.3562814106333)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-12.6781407053167)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((0.167184414388102)*(r02*r02)))+(((-50.7125628212666)*(py*py)*(pz*pz)*(r01*r01)))+(((-25.3562814106333)*(px*px)*(py*py)*(r02*r02)))+(((-12.6781407053167)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-25.3562814106333)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((-8.29190972177966)*px*py*r00*r01*(sj0*sj0)))+(((25.3562814106333)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-1.83072351784773)*(px*px)*(r00*r00)))+(((-152.1376884638)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-1.34621569265334)*(py*py)*(r02*r02)))+(((-8.29190972177966)*cj0*px*py*sj0*(r01*r01)))+(((-6.5900975386236)*py*pz*r01*r02*(sj0*sj0)))+(((-50.7125628212666)*(px*px)*(pz*pz)*(r00*r00)))+(((-6.5900975386236)*px*pz*r00*r02*(cj0*cj0)))+(((-8.29190972177966)*cj0*px*py*sj0*(r00*r00)))+(((-50.7125628212666)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((50.7125628212666)*px*pz*r00*r02*(py*py)))+(((-50.7125628212666)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-0.969015650388763)*px*pz*r00*r02))+(((25.3562814106333)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((50.7125628212666)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((-101.425125642533)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-8.29190972177966)*px*py*r00*r01*(cj0*cj0)))+(((-6.5900975386236)*cj0*py*pz*r00*r02*sj0))+(((-50.7125628212666)*px*r00*r02*(pz*pz*pz)))+(((50.7125628212666)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((50.7125628212666)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((-25.3562814106333)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((50.7125628212666)*py*pz*r01*r02*(px*px)))+(((25.3562814106333)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-50.7125628212666)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((50.7125628212666)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-12.6781407053167)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((4.14595486088983)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.850906091578033)*(py*py)*(r02*r02)*(sj0*sj0)))+(((50.7125628212666)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((50.7125628212666)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-50.7125628212666)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((25.3562814106333)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00))));
op[3]=((((-1.0)*x100))+x101+x102+(((-1.0)*x99)));
op[4]=((((-4.81769346802033)*(pz*pz*pz)*(r02*r02)))+(((25.3562814106333)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((-9.63538693604066)*pz*(px*px)*(r00*r00)))+(((14.453080404061)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-12.6781407053167)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((12.6781407053167)*(py*py)*(pz*pz)*(r02*r02)))+(((25.3562814106333)*px*pz*r00*r02*(py*py)))+(((0.366398266383651)*cj0*px*pz*r01*r02*sj0))+(((14.453080404061)*cj0*py*r00*r02*sj0*(pz*pz)))+(((25.3562814106333)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-6.33907035265833)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-14.453080404061)*cj0*py*r00*r02*sj0*(px*px)))+(((-14.453080404061)*px*r00*r02*(pz*pz)))+(((-1.83072351784773)*px*py*r00*r01))+(((25.3562814106333)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((-9.63538693604066)*px*r00*r02*(py*py)*(sj0*sj0)))+(((14.453080404061)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((-0.484507825194381)*px*py*r00*r01*(sj0*sj0)))+(((12.6781407053167)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((-4.81769346802033)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-25.3562814106333)*(py*py)*(pz*pz)*(r01*r01)))+(((0.278221797778174)*pz*(r01*r01)*(sj0*sj0)))+(((-9.63538693604066)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((25.3562814106333)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-9.63538693604066)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.366398266383651)*px*pz*r00*r02*(cj0*cj0)))+(((-76.0688442318999)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-25.3562814106333)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-2.07297743044492)*(pz*pz)*(r02*r02)))+(((-4.81769346802033)*r00*r02*(cj0*cj0)*(px*px*px)))+(((25.3562814106333)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((0.366398266383651)*py*pz*r01*r02*(sj0*sj0)))+(((9.63538693604066)*cj0*px*py*pz*sj0*(r00*r00)))+(((14.453080404061)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-0.278221797778174)*cj0*px*r01*r02*sj0))+(((-0.439893955178)*pz*(r02*r02)))+(((4.81769346802033)*pz*(px*px)*(r02*r02)))+(((-0.425453045789016)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-0.183199133191826)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((25.3562814106333)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-25.3562814106333)*px*r00*r02*(pz*pz*pz)))+(((-25.3562814106333)*py*r01*r02*(pz*pz*pz)))+(((-4.81769346802033)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-50.7125628212666)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-0.850906091578033)*cj0*px*py*sj0*(r02*r02)))+(((-0.278221797778174)*px*r00*r02*(cj0*cj0)))+(((25.3562814106333)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((12.6781407053167)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((4.81769346802033)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-19.2707738720813)*px*py*pz*r00*r01))+(((-9.63538693604066)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((12.6781407053167)*(px*px)*(pz*pz)*(r02*r02)))+(((-12.6781407053167)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.242253912597191)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.0528497858676222)*(r02*r02)))+(((9.63538693604066)*cj0*px*py*pz*sj0*(r01*r01)))+(((-50.7125628212666)*px*py*r00*r01*(pz*pz)))+(((9.63538693604066)*px*py*pz*r00*r01*(cj0*cj0)))+(((12.6781407053167)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-6.33907035265833)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-0.439893955178)*py*r01*r02))+(((-19.2707738720813)*cj0*px*py*pz*sj0*(r02*r02)))+(((-0.915361758923863)*(py*py)*(r01*r01)))+(((25.3562814106333)*pz*r00*r02*(px*px*px)))+(((-25.3562814106333)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((-0.439893955178)*px*r00*r02))+(((-6.33907035265833)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-9.63538693604066)*pz*(py*py)*(r01*r01)))+(((4.81769346802033)*cj0*r00*r02*sj0*(py*py*py)))+(((4.81769346802033)*pz*(py*py)*(r02*r02)))+(((0.278221797778174)*pz*(cj0*cj0)*(r00*r00)))+(((12.6781407053167)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-25.3562814106333)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((25.3562814106333)*pz*r01*r02*(py*py*py)))+(((-12.6781407053167)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((0.242253912597191)*(cj0*cj0)*(py*py)*(r00*r00)))+(((9.63538693604066)*px*py*pz*r00*r01*(sj0*sj0)))+(((-4.81769346802033)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-14.453080404061)*py*r01*r02*(pz*pz)))+(((0.0153712106632144)*(r01*r01)*(sj0*sj0)))+(((-6.33907035265833)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((4.81769346802033)*cj0*r01*r02*sj0*(px*px*px)))+(((25.3562814106333)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((25.3562814106333)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((0.0153712106632144)*(cj0*cj0)*(r00*r00)))+(((-25.3562814106333)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((0.0307424213264288)*cj0*r00*r01*sj0))+(((-25.3562814106333)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-76.0688442318999)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((25.3562814106333)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-6.33907035265833)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((4.81769346802033)*r01*r02*(py*py*py)))+(((-0.183199133191826)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((1.15761567152105)*(px*px)*(r02*r02)))+(((25.3562814106333)*py*pz*r01*r02*(px*px)))+(((0.366398266383651)*cj0*py*pz*r00*r02*sj0))+(((4.81769346802033)*py*r01*r02*(px*px)))+(((-4.14595486088983)*py*pz*r01*r02))+(((-25.3562814106333)*(px*px)*(pz*pz)*(r00*r00)))+(((-6.33907035265833)*(px*px*px*px)*(r02*r02)))+(((4.81769346802033)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((25.3562814106333)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((-0.425453045789016)*(py*py)*(r02*r02)*(sj0*sj0)))+(((-4.14595486088983)*px*pz*r00*r02))+(((25.3562814106333)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-50.7125628212666)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-25.3562814106333)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((25.3562814106333)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((1.15761567152105)*(py*py)*(r02*r02)))+(((-25.3562814106333)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((0.242253912597191)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-25.3562814106333)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-4.81769346802033)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-76.0688442318999)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-0.484507825194381)*px*py*r00*r01*(cj0*cj0)))+(((4.81769346802033)*r00*r02*(px*px*px)))+(((0.556443595556348)*cj0*pz*r00*r01*sj0))+(((-0.278221797778174)*py*r01*r02*(sj0*sj0)))+(((-50.7125628212666)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((25.3562814106333)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((-0.242253912597191)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-14.453080404061)*cj0*px*r01*r02*sj0*(py*py)))+(((-6.33907035265833)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.81769346802033)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((-12.6781407053167)*(px*px)*(py*py)*(r02*r02)))+(((-0.278221797778174)*cj0*py*r00*r02*sj0))+(((4.81769346802033)*px*r00*r02*(py*py)))+(((-9.63538693604066)*py*r01*r02*(cj0*cj0)*(px*px)))+(((-6.33907035265833)*(pz*pz*pz*pz)*(r02*r02)))+(((-6.33907035265833)*(py*py*py*py)*(r02*r02)))+(((25.3562814106333)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((25.3562814106333)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((-0.915361758923863)*(px*px)*(r00*r00)))+(((4.81769346802033)*px*r00*r02*(cj0*cj0)*(py*py)))+(((12.6781407053167)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-25.3562814106333)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-0.484507825194381)*cj0*px*py*sj0*(r00*r00)))+(((-0.366398266383651)*cj0*r00*r01*sj0*(pz*pz)))+(((12.6781407053167)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-25.3562814106333)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-0.484507825194381)*cj0*px*py*sj0*(r01*r01)))+(((4.81769346802033)*pz*(cj0*cj0)*(px*px)*(r00*r00))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=(((r00*sj0))+(((-1.0)*cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
bool bgotonextstatement = true;
do
{
IkReal x103=pz*pz;
IkReal x104=py*py;
IkReal x105=px*px;
IkReal x106=(r01*sj0);
IkReal x107=((0.19)*cj1);
IkReal x108=(cj0*r00);
IkReal x109=((1.0)*cj1);
IkReal x110=((1.0)*pz);
IkReal x111=(px*sj0);
IkReal x112=(py*r01);
IkReal x113=(cj1*r02);
IkReal x114=((0.0361)*sj1);
IkReal x115=((1.0)*r02);
IkReal x116=((2.0)*sj1);
IkReal x117=(py*r00);
IkReal x118=((0.19)*sj1);
IkReal x119=(cj0*px);
IkReal x120=((2.0)*cj1);
IkReal x121=(px*r00);
IkReal x122=((0.0361)*cj1);
IkReal x123=((0.38)*pz);
IkReal x124=(sj1*x103);
IkReal x125=(py*r02*sj0);
IkReal x126=(pz*x120);
IkReal x127=(r02*x119);
IkReal x128=(pz*x116);
IkReal x129=(sj1*x105);
IkReal x130=((1.0)*sj1*x104);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x111))+((cj0*py)));
evalcond[2]=((1.0)+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[3]=(((sj1*x106))+((sj1*x108))+(((-1.0)*r02*x109)));
evalcond[4]=((((-1.0)*sj1*x115))+(((-1.0)*x106*x109))+(((-1.0)*x108*x109)));
evalcond[5]=(((x106*x118))+((x108*x118))+(((-1.0)*r02*x107))+(((-1.0)*r02*x110))+(((-1.0)*x121))+(((-1.0)*x112)));
evalcond[6]=((((-1.0)*x107*x108))+(((-1.0)*x106*x107))+x127+x125+(((-1.0)*x108*x110))+(((-1.0)*x106*x110))+(((-1.0)*r02*x118)));
evalcond[7]=(((x112*x126))+((x121*x126))+(((-1.0)*r02*x105*x109))+(((0.0361)*x113))+((r02*x123))+(((-1.0)*x111*x116*x117))+((x106*x129))+((x106*x124))+(((-1.0)*x106*x130))+(((-1.0)*x108*x129))+((x108*x124))+((x103*x113))+(((-1.0)*x108*x114))+(((-1.0)*x106*x114))+(((-1.0)*x112*x116*x119))+(((-1.0)*x125*x128))+((sj1*x104*x108))+(((-1.0)*x127*x128))+(((-1.0)*r02*x104*x109))+(((0.38)*x112))+(((0.38)*x121)));
evalcond[8]=((((-1.0)*x105*x106*x109))+((x112*x128))+((x121*x128))+((r02*x124))+(((-1.0)*x106*x123))+(((-1.0)*x106*x122))+(((-1.0)*x103*x108*x109))+(((-1.0)*x115*x129))+(((2.0)*py*pz*sj0*x113))+(((2.0)*pz*x113*x119))+((cj1*x104*x106))+((cj1*x105*x108))+(((-1.0)*sj1*x104*x115))+(((-1.0)*x103*x106*x109))+(((-1.0)*x108*x122))+(((-1.0)*x108*x123))+(((-1.0)*r02*x114))+((x111*x117*x120))+(((-1.0)*x104*x108*x109))+((x112*x119*x120))+(((0.38)*x125))+(((0.38)*x127)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x131=((5.00698342424961)*sj1);
cj3array[0]=((-0.76092971776425)+(((-1.0)*py*sj0*x131))+(((5.00698342424961)*cj1*pz))+(((13.1762721690779)*(pz*pz)))+(((13.1762721690779)*(px*px)))+(((13.1762721690779)*(py*py)))+(((-1.0)*cj0*px*x131)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x132=px*px;
IkReal x133=pz*pz;
IkReal x134=py*py;
IkReal x135=(px*sj0);
IkReal x136=((2.0)*py);
IkReal x137=(r00*sj0);
IkReal x138=(cj0*r01);
IkReal x139=((0.38)*cj1);
IkReal x140=(pz*r02);
IkReal x141=((0.38)*sj1);
IkReal x142=((1.0)*x134);
evalcond[0]=((0.09385)+(((0.0361)*x138))+(((-1.0)*cj0*py*r02*x139))+(((-1.0)*x137*x142))+(((-1.0)*x138*x142))+(((-0.0361)*x137))+(((2.0)*x135*x140))+(((-1.0)*cj0*x136*x140))+((r01*x135*x136))+((r02*x135*x139))+((pz*x138*x139))+((py*r00*x141))+(((-1.0)*x133*x137))+((x133*x138))+(((-1.0)*cj0*px*r00*x136))+((x132*x138))+((x132*x137))+(((0.075894)*(IKcos(j3))))+(((-1.0)*px*r01*x141))+(((-1.0)*pz*x137*x139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.23659314306796)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-93850.0)+(((-75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((1.23659314306796)+cj3);
j2eval[1]=IKsign(((93850.0)+(((75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x143=(cj1*py);
IkReal x144=(pz*sj1);
IkReal x145=((273000.0)*cj3);
IkReal x146=(py*sj1);
IkReal x147=((139000.0)*sj0);
IkReal x148=((273000.0)*sj3);
IkReal x149=(cj1*pz);
IkReal x150=((139000.0)*cj0);
IkReal x151=(cj0*r02);
IkReal x152=(r00*x148);
IkReal x153=((273000.0)*cj0*r01);
IkReal x154=(cj1*px*r01);
IkReal x155=((273000.0)*cj0*px*sj1);
IkReal x156=(px*r02*sj0*sj1);
CheckValue<IkReal> x157=IKPowWithIntegerCheck(IKsign(((93850.0)+(((75894.0)*cj3)))),-1);
if(!x157.valid){
continue;
}
CheckValue<IkReal> x158 = IKatan2WithCheck(IkReal((((r00*sj0*x144*x145))+((r00*x144*x147))+(((-1.0)*cj0*r01*x144*x145))+((r00*x143*x145))+(((-51870.0)*sj3))+(((-1.0)*r01*x144*x150))+((sj0*x146*x148))+(((-139000.0)*x154))+(((-1.0)*x148*x149))+((cj0*px*sj1*x148))+(((-1.0)*x145*x156))+(((-1.0)*x145*x154))+((x145*x146*x151))+(((-1.0)*px*r02*sj1*x147))+((r02*x146*x150))+(((139000.0)*r00*x143)))),((-26410.0)+(((-1.0)*x143*x152))+((sj0*x145*x146))+(((-1.0)*sj0*x144*x152))+(((-139000.0)*x149))+((cj0*px*sj1*x145))+((x146*x147))+((x148*x154))+((x148*x156))+(((-1.0)*x145*x149))+(((-1.0)*x146*x148*x151))+((px*sj1*x150))+(((-51870.0)*cj3))+((cj0*r01*x144*x148))),IKFAST_ATAN2_MAGTHRESH);
if(!x158.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x157.value)))+(x158.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x159=IKcos(j2);
IkReal x160=IKsin(j2);
IkReal x161=(px*sj1);
IkReal x162=((0.273)*cj3);
IkReal x163=(py*sj1);
IkReal x164=((1.0)*r00);
IkReal x165=(cj1*sj0);
IkReal x166=((1.0)*px);
IkReal x167=((1.0)*pz);
IkReal x168=(cj0*r01);
IkReal x169=(pz*sj1);
IkReal x170=((0.273)*sj3);
IkReal x171=(cj0*cj1);
IkReal x172=((0.139)*x160);
IkReal x173=((0.139)*x159);
IkReal x174=(x160*x162);
IkReal x175=(x159*x170);
IkReal x176=(x160*x170);
IkReal x177=(x159*x162);
IkReal x178=(x172+x174);
IkReal x179=(x173+x177+x176);
evalcond[0]=((-0.19)+((cj0*x161))+((sj0*x163))+(((-1.0)*x179))+(((-1.0)*cj1*x167)));
evalcond[1]=((((-1.0)*x175))+(((-1.0)*py*x165))+x178+(((-1.0)*sj1*x167))+(((-1.0)*x166*x171)));
evalcond[2]=((((-1.0)*x175))+((r02*sj0*x161))+((x168*x169))+(((-1.0)*cj1*py*x164))+(((-1.0)*cj0*r02*x163))+x178+(((-1.0)*sj0*x164*x169))+((cj1*px*r01)));
evalcond[3]=(((r01*x161))+((pz*r00*x165))+(((-1.0)*r02*x165*x166))+(((-1.0)*x163*x164))+(((-0.19)*x168))+x179+((py*r02*x171))+(((-1.0)*cj1*x167*x168))+(((0.19)*r00*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x180=((139000.0)*cj1);
IkReal x181=(py*sj0);
IkReal x182=(cj0*px);
IkReal x183=((273000.0)*cj3);
IkReal x184=((139000.0)*sj1);
IkReal x185=((273000.0)*cj1*sj3);
IkReal x186=((273000.0)*sj1*sj3);
CheckValue<IkReal> x187=IKPowWithIntegerCheck(IKsign(((-93850.0)+(((-75894.0)*cj3)))),-1);
if(!x187.valid){
continue;
}
CheckValue<IkReal> x188 = IKatan2WithCheck(IkReal((((pz*x185))+(((-1.0)*pz*x184))+(((-1.0)*pz*sj1*x183))+(((-1.0)*cj1*x181*x183))+(((-1.0)*x180*x181))+(((-1.0)*x180*x182))+(((51870.0)*sj3))+(((-1.0)*cj1*x182*x183))+(((-1.0)*x182*x186))+(((-1.0)*x181*x186)))),((26410.0)+((pz*x180))+((pz*x186))+(((-1.0)*sj1*x181*x183))+(((-1.0)*sj1*x182*x183))+((cj1*pz*x183))+(((51870.0)*cj3))+(((-1.0)*x182*x184))+((x182*x185))+((x181*x185))+(((-1.0)*x181*x184))),IKFAST_ATAN2_MAGTHRESH);
if(!x188.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x187.value)))+(x188.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x189=IKcos(j2);
IkReal x190=IKsin(j2);
IkReal x191=(px*sj1);
IkReal x192=((0.273)*cj3);
IkReal x193=(py*sj1);
IkReal x194=((1.0)*r00);
IkReal x195=(cj1*sj0);
IkReal x196=((1.0)*px);
IkReal x197=((1.0)*pz);
IkReal x198=(cj0*r01);
IkReal x199=(pz*sj1);
IkReal x200=((0.273)*sj3);
IkReal x201=(cj0*cj1);
IkReal x202=((0.139)*x190);
IkReal x203=((0.139)*x189);
IkReal x204=(x190*x192);
IkReal x205=(x189*x200);
IkReal x206=(x190*x200);
IkReal x207=(x189*x192);
IkReal x208=(x204+x202);
IkReal x209=(x207+x206+x203);
evalcond[0]=((-0.19)+((cj0*x191))+((sj0*x193))+(((-1.0)*x209))+(((-1.0)*cj1*x197)));
evalcond[1]=((((-1.0)*x205))+x208+(((-1.0)*py*x195))+(((-1.0)*sj1*x197))+(((-1.0)*x196*x201)));
evalcond[2]=((((-1.0)*sj0*x194*x199))+((x198*x199))+(((-1.0)*x205))+x208+((r02*sj0*x191))+(((-1.0)*cj0*r02*x193))+((cj1*px*r01))+(((-1.0)*cj1*py*x194)));
evalcond[3]=((((-1.0)*r02*x195*x196))+((r01*x191))+(((-0.19)*x198))+x209+(((0.19)*r00*sj0))+(((-1.0)*cj1*x197*x198))+((py*r02*x201))+(((-1.0)*x193*x194))+((pz*r00*x195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x210=pz*pz;
IkReal x211=py*py;
IkReal x212=px*px;
IkReal x213=(r01*sj0);
IkReal x214=((0.19)*cj1);
IkReal x215=(cj0*r00);
IkReal x216=((1.0)*cj1);
IkReal x217=((1.0)*pz);
IkReal x218=(px*sj0);
IkReal x219=(py*r01);
IkReal x220=(cj1*r02);
IkReal x221=((0.0361)*sj1);
IkReal x222=((1.0)*r02);
IkReal x223=((2.0)*sj1);
IkReal x224=(py*r00);
IkReal x225=((0.19)*sj1);
IkReal x226=(cj0*px);
IkReal x227=((2.0)*cj1);
IkReal x228=(px*r00);
IkReal x229=((0.0361)*cj1);
IkReal x230=((0.38)*pz);
IkReal x231=(sj1*x210);
IkReal x232=(py*r02*sj0);
IkReal x233=(pz*x227);
IkReal x234=(r02*x226);
IkReal x235=(pz*x223);
IkReal x236=(sj1*x212);
IkReal x237=((1.0)*sj1*x211);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x218))+((cj0*py)));
evalcond[2]=((-1.0)+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[3]=(((sj1*x215))+((sj1*x213))+(((-1.0)*r02*x216)));
evalcond[4]=((((-1.0)*sj1*x222))+(((-1.0)*x213*x216))+(((-1.0)*x215*x216)));
evalcond[5]=(((x215*x225))+((x213*x225))+(((-1.0)*x219))+(((-1.0)*r02*x217))+(((-1.0)*r02*x214))+(((-1.0)*x228)));
evalcond[6]=((((-1.0)*r02*x225))+x232+x234+(((-1.0)*x213*x217))+(((-1.0)*x213*x214))+(((-1.0)*x214*x215))+(((-1.0)*x215*x217)));
evalcond[7]=(((r02*x230))+((x210*x220))+(((-1.0)*x213*x237))+(((-1.0)*x215*x221))+((x228*x233))+(((-1.0)*x219*x223*x226))+(((-1.0)*x218*x223*x224))+(((-1.0)*r02*x211*x216))+(((-1.0)*x213*x221))+(((-1.0)*x215*x236))+(((0.38)*x228))+(((0.0361)*x220))+((x219*x233))+((x213*x231))+((x213*x236))+((sj1*x211*x215))+(((-1.0)*r02*x212*x216))+((x215*x231))+(((-1.0)*x234*x235))+(((0.38)*x219))+(((-1.0)*x232*x235)));
evalcond[8]=(((r02*x231))+(((-1.0)*x213*x230))+(((-1.0)*x215*x229))+(((-1.0)*x211*x215*x216))+(((-1.0)*x210*x215*x216))+((cj1*x211*x213))+(((-1.0)*r02*x221))+((x228*x235))+(((-1.0)*x215*x230))+(((2.0)*py*pz*sj0*x220))+(((-1.0)*x210*x213*x216))+(((-1.0)*x212*x213*x216))+(((-1.0)*x213*x229))+((x219*x235))+(((-1.0)*sj1*x211*x222))+(((0.38)*x234))+(((0.38)*x232))+((x219*x226*x227))+((x218*x224*x227))+((cj1*x212*x215))+(((2.0)*pz*x220*x226))+(((-1.0)*x222*x236)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x238=((5.00698342424961)*sj1);
cj3array[0]=((-0.76092971776425)+(((-1.0)*py*sj0*x238))+(((5.00698342424961)*cj1*pz))+(((13.1762721690779)*(pz*pz)))+(((13.1762721690779)*(px*px)))+(((13.1762721690779)*(py*py)))+(((-1.0)*cj0*px*x238)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x239=px*px;
IkReal x240=pz*pz;
IkReal x241=py*py;
IkReal x242=(px*sj0);
IkReal x243=((2.0)*py);
IkReal x244=(r00*sj0);
IkReal x245=(cj0*r01);
IkReal x246=((0.38)*cj1);
IkReal x247=(pz*r02);
IkReal x248=((0.38)*sj1);
IkReal x249=((1.0)*x241);
evalcond[0]=((-0.09385)+((r02*x242*x246))+((x240*x245))+(((-1.0)*cj0*py*r02*x246))+((r01*x242*x243))+((py*r00*x248))+(((-1.0)*pz*x244*x246))+((x239*x245))+((x239*x244))+(((-1.0)*px*r01*x248))+(((0.0361)*x245))+(((-0.0361)*x244))+(((-1.0)*x240*x244))+(((-1.0)*x245*x249))+(((-0.075894)*(IKcos(j3))))+(((-1.0)*cj0*px*r00*x243))+(((2.0)*x242*x247))+(((-1.0)*cj0*x243*x247))+((pz*x245*x246))+(((-1.0)*x244*x249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.23659314306796)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-93850.0)+(((-75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((1.23659314306796)+cj3);
j2eval[1]=IKsign(((93850.0)+(((75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x250=((273000.0)*sj3);
IkReal x251=((273000.0)*cj3);
IkReal x252=(pz*r00);
IkReal x253=(px*r02);
IkReal x254=(sj0*sj1);
IkReal x255=(cj1*pz);
IkReal x256=(cj1*py*r00);
IkReal x257=((139000.0)*x254);
IkReal x258=(cj0*px*sj1);
IkReal x259=(cj1*px*r01);
IkReal x260=(cj0*pz*r01*sj1);
IkReal x261=(cj0*py*r02*sj1);
CheckValue<IkReal> x262 = IKatan2WithCheck(IkReal(((((139000.0)*x259))+(((-1.0)*x252*x257))+((x251*x253*x254))+(((-1.0)*x251*x252*x254))+(((-1.0)*x250*x255))+(((-1.0)*x251*x256))+(((-139000.0)*x261))+((x251*x259))+((py*x250*x254))+(((139000.0)*x260))+(((-51870.0)*sj3))+((x250*x258))+(((-1.0)*x251*x261))+((x253*x257))+(((-139000.0)*x256))+((x251*x260)))),((-26410.0)+(((139000.0)*x258))+((py*x251*x254))+(((-1.0)*x250*x259))+(((-1.0)*x251*x255))+((x251*x258))+((py*x257))+((x250*x252*x254))+(((-1.0)*x250*x260))+((x250*x256))+(((-1.0)*x250*x253*x254))+((x250*x261))+(((-139000.0)*x255))+(((-51870.0)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x262.valid){
continue;
}
CheckValue<IkReal> x263=IKPowWithIntegerCheck(IKsign(((93850.0)+(((75894.0)*cj3)))),-1);
if(!x263.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x262.value)+(((1.5707963267949)*(x263.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x264=IKcos(j2);
IkReal x265=IKsin(j2);
IkReal x266=(px*sj1);
IkReal x267=((0.273)*cj3);
IkReal x268=(py*sj1);
IkReal x269=((1.0)*r00);
IkReal x270=(cj1*sj0);
IkReal x271=((1.0)*px);
IkReal x272=((1.0)*pz);
IkReal x273=(cj0*r01);
IkReal x274=(pz*sj1);
IkReal x275=((0.273)*sj3);
IkReal x276=(cj0*cj1);
IkReal x277=((0.139)*x265);
IkReal x278=((0.139)*x264);
IkReal x279=(x264*x275);
IkReal x280=(x265*x267);
IkReal x281=(x265*x275);
IkReal x282=(x264*x267);
IkReal x283=(x277+x280);
IkReal x284=(x278+x282+x281);
evalcond[0]=((-0.19)+((cj0*x266))+(((-1.0)*cj1*x272))+(((-1.0)*x284))+((sj0*x268)));
evalcond[1]=((((-1.0)*sj1*x272))+(((-1.0)*x271*x276))+(((-1.0)*py*x270))+x283+(((-1.0)*x279)));
evalcond[2]=(((x273*x274))+((r02*sj0*x266))+x279+(((-1.0)*cj0*r02*x268))+(((-1.0)*sj0*x269*x274))+(((-1.0)*x283))+((cj1*px*r01))+(((-1.0)*cj1*py*x269)));
evalcond[3]=((((-1.0)*r02*x270*x271))+((py*r02*x276))+(((-1.0)*x268*x269))+(((0.19)*r00*sj0))+(((-1.0)*x284))+((pz*r00*x270))+(((-1.0)*cj1*x272*x273))+((r01*x266))+(((-0.19)*x273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x285=((139000.0)*cj1);
IkReal x286=(py*sj0);
IkReal x287=(cj0*px);
IkReal x288=((273000.0)*cj3);
IkReal x289=((139000.0)*sj1);
IkReal x290=((273000.0)*cj1*sj3);
IkReal x291=((273000.0)*sj1*sj3);
CheckValue<IkReal> x292=IKPowWithIntegerCheck(IKsign(((-93850.0)+(((-75894.0)*cj3)))),-1);
if(!x292.valid){
continue;
}
CheckValue<IkReal> x293 = IKatan2WithCheck(IkReal(((((-1.0)*x286*x291))+(((-1.0)*cj1*x287*x288))+((pz*x290))+(((-1.0)*cj1*x286*x288))+(((51870.0)*sj3))+(((-1.0)*x285*x287))+(((-1.0)*x285*x286))+(((-1.0)*x287*x291))+(((-1.0)*pz*x289))+(((-1.0)*pz*sj1*x288)))),((26410.0)+(((-1.0)*x287*x289))+((cj1*pz*x288))+((pz*x291))+((x287*x290))+(((51870.0)*cj3))+((x286*x290))+(((-1.0)*sj1*x286*x288))+(((-1.0)*sj1*x287*x288))+(((-1.0)*x286*x289))+((pz*x285))),IKFAST_ATAN2_MAGTHRESH);
if(!x293.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x292.value)))+(x293.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x294=IKcos(j2);
IkReal x295=IKsin(j2);
IkReal x296=(px*sj1);
IkReal x297=((0.273)*cj3);
IkReal x298=(py*sj1);
IkReal x299=((1.0)*r00);
IkReal x300=(cj1*sj0);
IkReal x301=((1.0)*px);
IkReal x302=((1.0)*pz);
IkReal x303=(cj0*r01);
IkReal x304=(pz*sj1);
IkReal x305=((0.273)*sj3);
IkReal x306=(cj0*cj1);
IkReal x307=((0.139)*x295);
IkReal x308=((0.139)*x294);
IkReal x309=(x294*x305);
IkReal x310=(x295*x297);
IkReal x311=(x295*x305);
IkReal x312=(x294*x297);
IkReal x313=(x307+x310);
IkReal x314=(x308+x311+x312);
evalcond[0]=((-0.19)+((sj0*x298))+(((-1.0)*x314))+(((-1.0)*cj1*x302))+((cj0*x296)));
evalcond[1]=((((-1.0)*x301*x306))+(((-1.0)*sj1*x302))+(((-1.0)*py*x300))+x313+(((-1.0)*x309)));
evalcond[2]=((((-1.0)*sj0*x299*x304))+((x303*x304))+x309+(((-1.0)*cj0*r02*x298))+(((-1.0)*cj1*py*x299))+(((-1.0)*x313))+((cj1*px*r01))+((r02*sj0*x296)));
evalcond[3]=((((-0.19)*x303))+(((-1.0)*r02*x300*x301))+(((-1.0)*cj1*x302*x303))+(((-1.0)*x298*x299))+(((-1.0)*x314))+((r01*x296))+(((0.19)*r00*sj0))+((py*r02*x306))+((pz*r00*x300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x315=py*py;
IkReal x316=px*px;
IkReal x317=pz*pz;
IkReal x318=(r01*sj1);
IkReal x319=((190000.0)*px);
IkReal x320=(cj1*r02);
IkReal x321=(cj0*py);
IkReal x322=(px*sj0);
IkReal x323=(cj0*r01);
IkReal x324=(r00*sj1);
IkReal x325=(px*r00);
IkReal x326=(py*r01);
IkReal x327=(r00*sj0);
IkReal x328=((500000.0)*x327);
IkReal x329=((1000000.0)*pz*r02);
IkReal x330=((190000.0)*cj1*pz);
CheckValue<IkReal> x331=IKPowWithIntegerCheck(cj4,-1);
if(!x331.valid){
continue;
}
CheckValue<IkReal> x332=IKPowWithIntegerCheck(sj4,-1);
if(!x332.valid){
continue;
}
if( IKabs(((0.00719424460431655)*(x331.value)*(((((-190.0)*cj0*x324))+(((1000.0)*pz*r02))+(((-190.0)*sj0*x318))+(((1000.0)*x326))+(((1000.0)*x325))+(((190.0)*x320)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.63525443381559e-5)*(x332.value)*(((((-46925.0)*sj4))+(((-190000.0)*py*x324))+(((1000000.0)*x321*x325))+(((-1.0)*x322*x329))+(((500000.0)*x315*x323))+(((-18050.0)*x323))+(((-500000.0)*x316*x323))+(((-1.0)*x316*x328))+((x327*x330))+((x315*x328))+((x317*x328))+(((190000.0)*x320*x321))+(((-1.0)*x323*x330))+(((18050.0)*x327))+(((-1000000.0)*x322*x326))+(((-500000.0)*x317*x323))+((x318*x319))+((x321*x329))+(((-1.0)*sj0*x319*x320)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00719424460431655)*(x331.value)*(((((-190.0)*cj0*x324))+(((1000.0)*pz*r02))+(((-190.0)*sj0*x318))+(((1000.0)*x326))+(((1000.0)*x325))+(((190.0)*x320))))))+IKsqr(((2.63525443381559e-5)*(x332.value)*(((((-46925.0)*sj4))+(((-190000.0)*py*x324))+(((1000000.0)*x321*x325))+(((-1.0)*x322*x329))+(((500000.0)*x315*x323))+(((-18050.0)*x323))+(((-500000.0)*x316*x323))+(((-1.0)*x316*x328))+((x327*x330))+((x315*x328))+((x317*x328))+(((190000.0)*x320*x321))+(((-1.0)*x323*x330))+(((18050.0)*x327))+(((-1000000.0)*x322*x326))+(((-500000.0)*x317*x323))+((x318*x319))+((x321*x329))+(((-1.0)*sj0*x319*x320))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00719424460431655)*(x331.value)*(((((-190.0)*cj0*x324))+(((1000.0)*pz*r02))+(((-190.0)*sj0*x318))+(((1000.0)*x326))+(((1000.0)*x325))+(((190.0)*x320))))), ((2.63525443381559e-5)*(x332.value)*(((((-46925.0)*sj4))+(((-190000.0)*py*x324))+(((1000000.0)*x321*x325))+(((-1.0)*x322*x329))+(((500000.0)*x315*x323))+(((-18050.0)*x323))+(((-500000.0)*x316*x323))+(((-1.0)*x316*x328))+((x327*x330))+((x315*x328))+((x317*x328))+(((190000.0)*x320*x321))+(((-1.0)*x323*x330))+(((18050.0)*x327))+(((-1000000.0)*x322*x326))+(((-500000.0)*x317*x323))+((x318*x319))+((x321*x329))+(((-1.0)*sj0*x319*x320))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x333=IKcos(j3);
IkReal x334=px*px;
IkReal x335=pz*pz;
IkReal x336=py*py;
IkReal x337=(r01*sj0);
IkReal x338=((2.0)*py);
IkReal x339=(r00*sj0);
IkReal x340=((0.19)*cj1);
IkReal x341=(py*r02);
IkReal x342=((0.38)*cj1);
IkReal x343=((1.0)*pz);
IkReal x344=(cj0*r01);
IkReal x345=((0.19)*sj1);
IkReal x346=((0.139)*cj4);
IkReal x347=(cj0*r00);
IkReal x348=(cj0*r02);
IkReal x349=((1.0)*x335);
IkReal x350=((0.38)*py*sj1);
IkReal x351=((1.0)*x336);
IkReal x352=((0.075894)*x333);
IkReal x353=((0.38)*px*sj1);
IkReal x354=(px*r02*sj0);
evalcond[0]=((((-1.0)*r02*x340))+(((-1.0)*r02*x343))+((x337*x345))+(((-1.0)*px*r00))+((x346*(IKsin(j3))))+((x345*x347))+(((-1.0)*py*r01)));
evalcond[1]=((0.05775)+(((-1.0)*x351))+((cj0*x353))+x352+(((-1.0)*x334))+((sj0*x350))+(((-1.0)*x349))+(((-1.0)*pz*x342)));
evalcond[2]=((((-1.0)*r02*x345))+(((-1.0)*x337*x343))+(((-1.0)*x337*x340))+(((-1.0)*x340*x347))+((sj0*x341))+(((-1.0)*x343*x347))+(((-0.273)*cj4))+(((-1.0)*x333*x346))+((px*x348)));
evalcond[3]=(((x335*x344))+(((-1.0)*cj0*x341*x342))+((x334*x339))+((sj4*x352))+(((0.09385)*sj4))+((r00*x350))+((px*x337*x338))+(((-1.0)*x339*x351))+(((2.0)*pz*x354))+((x342*x354))+(((-1.0)*x344*x351))+(((-1.0)*px*x338*x347))+(((-1.0)*r01*x353))+((pz*x342*x344))+(((-1.0)*pz*x338*x348))+(((-1.0)*x339*x349))+(((0.0361)*x344))+(((-0.0361)*x339))+(((-1.0)*pz*x339*x342))+((x334*x344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x355=(cj3*cj4);
j2eval[0]=((((-1.96402877697842)*cj4))+(((-1.0)*x355)));
j2eval[1]=IKsign(((((-139.0)*x355))+(((-273.0)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
bool bgotonextstatement = true;
do
{
IkReal x356=px*px;
IkReal x357=((0.075894)*cj3);
IkReal x358=pz*pz;
IkReal x359=py*py;
IkReal x360=(r01*sj0);
IkReal x361=((0.19)*cj1);
IkReal x362=((1.0)*cj1);
IkReal x363=(py*r02);
IkReal x364=((1.0)*sj1);
IkReal x365=((0.38)*cj0);
IkReal x366=(px*r02);
IkReal x367=(py*r01);
IkReal x368=((1.0)*sj0);
IkReal x369=(cj1*r02);
IkReal x370=((0.38)*sj1);
IkReal x371=(r00*sj0);
IkReal x372=(cj0*r01);
IkReal x373=((1.0)*pz);
IkReal x374=((0.0361)*cj1);
IkReal x375=(cj0*r00);
IkReal x376=((0.38)*sj0);
IkReal x377=(r02*sj1);
IkReal x378=(pz*r00);
IkReal x379=(px*r00);
IkReal x380=((0.19)*sj1);
IkReal x381=((2.0)*cj1);
IkReal x382=(pz*sj0);
IkReal x383=(cj0*sj1);
IkReal x384=((0.0361)*sj1);
IkReal x385=((0.38)*pz);
IkReal x386=(cj0*pz);
IkReal x387=(r00*x359);
IkReal x388=((2.0)*pz*sj1);
IkReal x389=(cj0*x358);
IkReal x390=((2.0)*px*py);
IkReal x391=(cj1*x385);
IkReal x392=(r02*x356);
IkReal x393=((1.0)*x359);
IkReal x394=(r02*x359);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=(((cj0*py))+(((-1.0)*px*x368)));
evalcond[2]=((1.0)+(((-1.0)*r00*x368))+x372);
evalcond[3]=((((-1.0)*r02*x362))+((sj1*x375))+((sj1*x360)));
evalcond[4]=((((-1.0)*x362*x375))+(((-1.0)*r02*x364))+(((-1.0)*x360*x362)));
evalcond[5]=((((-1.0)*x379))+(((-1.0)*x367))+(((-1.0)*r02*x361))+(((-1.0)*r02*x373))+((x360*x380))+((x375*x380)));
evalcond[6]=((0.05775)+(((-1.0)*x393))+(((-1.0)*x391))+(((-1.0)*x356))+(((-1.0)*x358))+x357+((py*sj0*x370))+((px*sj1*x365)));
evalcond[7]=((((-1.0)*x360*x373))+(((-1.0)*x360*x361))+(((-1.0)*x361*x375))+((sj0*x363))+(((-0.19)*x377))+(((-1.0)*x373*x375))+((cj0*x366)));
evalcond[8]=((0.09385)+(((-1.0)*r00*x358*x368))+((cj1*x366*x376))+((x358*x372))+(((-1.0)*px*r01*x370))+(((-1.0)*x372*x393))+((x356*x371))+((x356*x372))+(((-0.0361)*x371))+(((-1.0)*cj1*x363*x365))+(((-1.0)*x371*x391))+((py*r00*x370))+x357+(((2.0)*x366*x382))+((cj1*pz*r01*x365))+(((-1.0)*x368*x387))+(((-2.0)*x363*x386))+(((-1.0)*x375*x390))+(((0.0361)*x372))+((x360*x390)));
evalcond[9]=((((0.0361)*x369))+((x358*x369))+((sj1*x358*x360))+(((-2.0)*pz*x366*x383))+((sj1*x358*x375))+(((-1.0)*x362*x392))+(((-1.0)*x362*x394))+((sj1*x356*x360))+(((-1.0)*x375*x384))+(((0.38)*x367))+(((-2.0)*sj1*x363*x382))+((r02*x385))+((pz*x367*x381))+(((0.38)*x379))+(((-1.0)*x359*x360*x364))+(((-2.0)*px*x367*x383))+(((-1.0)*x360*x384))+(((-1.0)*sj1*x371*x390))+((sj1*x359*x375))+(((-1.0)*x356*x364*x375))+((px*x378*x381)));
evalcond[10]=(((x358*x377))+(((-1.0)*x360*x374))+((x366*x381*x386))+(((2.0)*px*sj1*x378))+((x363*x381*x382))+((cj1*x356*x375))+(((-1.0)*x358*x360*x362))+(((-0.0361)*x377))+((x365*x366))+(((-1.0)*x374*x375))+(((-1.0)*x356*x360*x362))+(((-1.0)*x360*x385))+((x367*x388))+(((-1.0)*x358*x362*x375))+((cj1*x359*x360))+((cj0*px*x367*x381))+((px*py*x371*x381))+(((-1.0)*x359*x362*x375))+(((-1.0)*x365*x378))+((x363*x376))+(((-1.0)*x364*x392))+(((-1.0)*x364*x394)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.23659314306796)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-93850.0)+(((-75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((1.23659314306796)+cj3);
j2eval[1]=IKsign(((93850.0)+(((75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x395=(cj1*py);
IkReal x396=(pz*sj1);
IkReal x397=((273000.0)*cj3);
IkReal x398=(py*sj1);
IkReal x399=((139000.0)*sj0);
IkReal x400=((273000.0)*sj3);
IkReal x401=(cj1*pz);
IkReal x402=((139000.0)*cj0);
IkReal x403=(cj0*r02);
IkReal x404=(r00*x400);
IkReal x405=((273000.0)*cj0*r01);
IkReal x406=(cj1*px*r01);
IkReal x407=((273000.0)*cj0*px*sj1);
IkReal x408=(px*r02*sj0*sj1);
CheckValue<IkReal> x409=IKPowWithIntegerCheck(IKsign(((93850.0)+(((75894.0)*cj3)))),-1);
if(!x409.valid){
continue;
}
CheckValue<IkReal> x410 = IKatan2WithCheck(IkReal((((sj0*x398*x400))+(((-1.0)*px*r02*sj1*x399))+((r00*sj0*x396*x397))+(((-1.0)*r01*x396*x402))+(((139000.0)*r00*x395))+(((-139000.0)*x406))+(((-51870.0)*sj3))+(((-1.0)*cj0*r01*x396*x397))+(((-1.0)*x400*x401))+((r02*x398*x402))+((cj0*px*sj1*x400))+(((-1.0)*x397*x406))+(((-1.0)*x397*x408))+((x397*x398*x403))+((r00*x395*x397))+((r00*x396*x399)))),((-26410.0)+(((-1.0)*x398*x400*x403))+((sj0*x397*x398))+((px*sj1*x402))+((x398*x399))+((cj0*r01*x396*x400))+((cj0*px*sj1*x397))+(((-139000.0)*x401))+(((-1.0)*x395*x404))+(((-1.0)*sj0*x396*x404))+(((-1.0)*x397*x401))+((x400*x406))+((x400*x408))+(((-51870.0)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x410.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x409.value)))+(x410.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x411=IKcos(j2);
IkReal x412=IKsin(j2);
IkReal x413=(px*sj1);
IkReal x414=((0.273)*cj3);
IkReal x415=(py*sj1);
IkReal x416=((1.0)*r00);
IkReal x417=(cj1*sj0);
IkReal x418=((1.0)*px);
IkReal x419=((1.0)*pz);
IkReal x420=(cj0*r01);
IkReal x421=(pz*sj1);
IkReal x422=((0.273)*sj3);
IkReal x423=(cj0*cj1);
IkReal x424=((0.139)*x412);
IkReal x425=((0.139)*x411);
IkReal x426=(x412*x414);
IkReal x427=(x411*x422);
IkReal x428=(x412*x422);
IkReal x429=(x411*x414);
IkReal x430=(x426+x424);
IkReal x431=(x429+x428+x425);
evalcond[0]=((-0.19)+(((-1.0)*x431))+((sj0*x415))+(((-1.0)*cj1*x419))+((cj0*x413)));
evalcond[1]=((((-1.0)*py*x417))+(((-1.0)*x427))+x430+(((-1.0)*x418*x423))+(((-1.0)*sj1*x419)));
evalcond[2]=(((x420*x421))+(((-1.0)*x427))+(((-1.0)*cj0*r02*x415))+((r02*sj0*x413))+x430+((cj1*px*r01))+(((-1.0)*sj0*x416*x421))+(((-1.0)*cj1*py*x416)));
evalcond[3]=(((py*r02*x423))+(((-1.0)*cj1*x419*x420))+((pz*r00*x417))+((r01*x413))+x431+(((-1.0)*r02*x417*x418))+(((0.19)*r00*sj0))+(((-1.0)*x415*x416))+(((-0.19)*x420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x432=((139000.0)*cj1);
IkReal x433=(py*sj0);
IkReal x434=(cj0*px);
IkReal x435=((273000.0)*cj3);
IkReal x436=((139000.0)*sj1);
IkReal x437=((273000.0)*cj1*sj3);
IkReal x438=((273000.0)*sj1*sj3);
CheckValue<IkReal> x439 = IKatan2WithCheck(IkReal(((((-1.0)*x433*x438))+(((-1.0)*x432*x434))+(((-1.0)*x432*x433))+((pz*x437))+(((-1.0)*x434*x438))+(((51870.0)*sj3))+(((-1.0)*cj1*x433*x435))+(((-1.0)*pz*x436))+(((-1.0)*cj1*x434*x435))+(((-1.0)*pz*sj1*x435)))),((26410.0)+(((-1.0)*x433*x436))+((x434*x437))+((cj1*pz*x435))+((pz*x432))+((pz*x438))+(((-1.0)*x434*x436))+(((51870.0)*cj3))+(((-1.0)*sj1*x434*x435))+((x433*x437))+(((-1.0)*sj1*x433*x435))),IKFAST_ATAN2_MAGTHRESH);
if(!x439.valid){
continue;
}
CheckValue<IkReal> x440=IKPowWithIntegerCheck(IKsign(((-93850.0)+(((-75894.0)*cj3)))),-1);
if(!x440.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x439.value)+(((1.5707963267949)*(x440.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x441=IKcos(j2);
IkReal x442=IKsin(j2);
IkReal x443=(px*sj1);
IkReal x444=((0.273)*cj3);
IkReal x445=(py*sj1);
IkReal x446=((1.0)*r00);
IkReal x447=(cj1*sj0);
IkReal x448=((1.0)*px);
IkReal x449=((1.0)*pz);
IkReal x450=(cj0*r01);
IkReal x451=(pz*sj1);
IkReal x452=((0.273)*sj3);
IkReal x453=(cj0*cj1);
IkReal x454=((0.139)*x442);
IkReal x455=((0.139)*x441);
IkReal x456=(x442*x444);
IkReal x457=(x441*x452);
IkReal x458=(x442*x452);
IkReal x459=(x441*x444);
IkReal x460=(x456+x454);
IkReal x461=(x458+x459+x455);
evalcond[0]=((-0.19)+((sj0*x445))+(((-1.0)*cj1*x449))+(((-1.0)*x461))+((cj0*x443)));
evalcond[1]=((((-1.0)*py*x447))+(((-1.0)*x457))+x460+(((-1.0)*sj1*x449))+(((-1.0)*x448*x453)));
evalcond[2]=((((-1.0)*cj1*py*x446))+(((-1.0)*cj0*r02*x445))+(((-1.0)*x457))+x460+(((-1.0)*sj0*x446*x451))+((x450*x451))+((r02*sj0*x443))+((cj1*px*r01)));
evalcond[3]=((((-1.0)*x445*x446))+(((-0.19)*x450))+(((-1.0)*r02*x447*x448))+((pz*r00*x447))+x461+((r01*x443))+((py*r02*x453))+(((0.19)*r00*sj0))+(((-1.0)*cj1*x449*x450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x462=px*px;
IkReal x463=pz*pz;
IkReal x464=py*py;
IkReal x465=((0.075894)*cj3);
IkReal x466=(r01*sj0);
IkReal x467=((0.19)*cj1);
IkReal x468=((1.0)*cj1);
IkReal x469=(py*r02);
IkReal x470=((1.0)*sj1);
IkReal x471=((0.38)*cj0);
IkReal x472=(px*r02);
IkReal x473=(py*r01);
IkReal x474=((1.0)*sj0);
IkReal x475=(cj1*r02);
IkReal x476=((0.38)*sj1);
IkReal x477=(r00*sj0);
IkReal x478=(cj0*r01);
IkReal x479=((1.0)*pz);
IkReal x480=((0.0361)*cj1);
IkReal x481=(cj0*r00);
IkReal x482=((0.38)*sj0);
IkReal x483=(r02*sj1);
IkReal x484=(pz*r00);
IkReal x485=(px*r00);
IkReal x486=((0.19)*sj1);
IkReal x487=((2.0)*cj1);
IkReal x488=(pz*sj0);
IkReal x489=(cj0*sj1);
IkReal x490=((0.0361)*sj1);
IkReal x491=((0.38)*pz);
IkReal x492=(cj0*pz);
IkReal x493=(r00*x464);
IkReal x494=((2.0)*pz*sj1);
IkReal x495=(cj0*x463);
IkReal x496=((2.0)*px*py);
IkReal x497=(cj1*x491);
IkReal x498=(r02*x462);
IkReal x499=((1.0)*x464);
IkReal x500=(r02*x464);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*px*x474))+((cj0*py)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x474))+x478);
evalcond[3]=(((sj1*x481))+((sj1*x466))+(((-1.0)*r02*x468)));
evalcond[4]=((((-1.0)*x466*x468))+(((-1.0)*x468*x481))+(((-1.0)*r02*x470)));
evalcond[5]=((((-1.0)*x485))+(((-1.0)*x473))+((x481*x486))+(((-1.0)*r02*x467))+((x466*x486))+(((-1.0)*r02*x479)));
evalcond[6]=((0.05775)+(((-1.0)*x499))+(((-1.0)*x497))+((py*sj0*x476))+(((-1.0)*x463))+(((-1.0)*x462))+x465+((px*sj1*x471)));
evalcond[7]=((((-1.0)*x466*x467))+(((-1.0)*x467*x481))+((sj0*x469))+(((-1.0)*x479*x481))+(((-0.19)*x483))+((cj0*x472))+(((-1.0)*x466*x479)));
evalcond[8]=((-0.09385)+(((2.0)*x472*x488))+((x462*x478))+((x462*x477))+((cj1*x472*x482))+((x463*x478))+(((-1.0)*r00*x463*x474))+((py*r00*x476))+(((-1.0)*cj1*x469*x471))+(((-0.0361)*x477))+(((-1.0)*x465))+((cj1*pz*r01*x471))+(((-2.0)*x469*x492))+(((0.0361)*x478))+(((-1.0)*px*r01*x476))+(((-1.0)*x474*x493))+(((-1.0)*x481*x496))+((x466*x496))+(((-1.0)*x478*x499))+(((-1.0)*x477*x497)));
evalcond[9]=((((-1.0)*x466*x490))+((sj1*x463*x466))+(((-2.0)*sj1*x469*x488))+((r02*x491))+((pz*x473*x487))+(((0.38)*x485))+((x463*x475))+(((-1.0)*x464*x466*x470))+(((-2.0)*pz*x472*x489))+(((-2.0)*px*x473*x489))+((px*x484*x487))+((sj1*x464*x481))+(((-1.0)*x468*x498))+(((0.0361)*x475))+(((-1.0)*x468*x500))+(((-1.0)*x481*x490))+(((-1.0)*x462*x470*x481))+(((0.38)*x473))+((sj1*x462*x466))+(((-1.0)*sj1*x477*x496))+((sj1*x463*x481)));
evalcond[10]=((((-0.0361)*x483))+((cj0*px*x473*x487))+((x471*x472))+(((-1.0)*x466*x491))+(((-1.0)*x470*x498))+((x473*x494))+(((-1.0)*x463*x466*x468))+((x469*x487*x488))+(((-1.0)*x462*x466*x468))+((px*py*x477*x487))+((x472*x487*x492))+(((-1.0)*x466*x480))+(((-1.0)*x463*x468*x481))+(((2.0)*px*sj1*x484))+((x469*x482))+(((-1.0)*x480*x481))+((cj1*x462*x481))+((cj1*x464*x466))+(((-1.0)*x471*x484))+(((-1.0)*x464*x468*x481))+((x463*x483))+(((-1.0)*x470*x500)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.23659314306796)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-93850.0)+(((-75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((1.23659314306796)+cj3);
j2eval[1]=IKsign(((93850.0)+(((75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x501=((273000.0)*sj3);
IkReal x502=((273000.0)*cj3);
IkReal x503=(pz*r00);
IkReal x504=(px*r02);
IkReal x505=(sj0*sj1);
IkReal x506=(cj1*pz);
IkReal x507=(cj1*py*r00);
IkReal x508=((139000.0)*x505);
IkReal x509=(cj0*px*sj1);
IkReal x510=(cj1*px*r01);
IkReal x511=(cj0*pz*r01*sj1);
IkReal x512=(cj0*py*r02*sj1);
CheckValue<IkReal> x513=IKPowWithIntegerCheck(IKsign(((93850.0)+(((75894.0)*cj3)))),-1);
if(!x513.valid){
continue;
}
CheckValue<IkReal> x514 = IKatan2WithCheck(IkReal(((((-1.0)*x502*x512))+(((-139000.0)*x512))+((x502*x510))+((x502*x511))+(((-1.0)*x502*x507))+(((-1.0)*x501*x506))+((py*x501*x505))+(((-51870.0)*sj3))+(((-1.0)*x503*x508))+((x501*x509))+(((-1.0)*x502*x503*x505))+(((-139000.0)*x507))+(((139000.0)*x510))+(((139000.0)*x511))+((x502*x504*x505))+((x504*x508)))),((-26410.0)+(((-1.0)*x501*x510))+(((-1.0)*x501*x511))+((x501*x512))+(((139000.0)*x509))+(((-1.0)*x502*x506))+((py*x502*x505))+((x501*x507))+(((-139000.0)*x506))+((x502*x509))+(((-1.0)*x501*x504*x505))+((py*x508))+(((-51870.0)*cj3))+((x501*x503*x505))),IKFAST_ATAN2_MAGTHRESH);
if(!x514.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x513.value)))+(x514.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x515=IKcos(j2);
IkReal x516=IKsin(j2);
IkReal x517=(px*sj1);
IkReal x518=((0.273)*cj3);
IkReal x519=(py*sj1);
IkReal x520=((1.0)*r00);
IkReal x521=(cj1*sj0);
IkReal x522=((1.0)*px);
IkReal x523=((1.0)*pz);
IkReal x524=(cj0*r01);
IkReal x525=(pz*sj1);
IkReal x526=((0.273)*sj3);
IkReal x527=(cj0*cj1);
IkReal x528=((0.139)*x516);
IkReal x529=((0.139)*x515);
IkReal x530=(x515*x526);
IkReal x531=(x516*x518);
IkReal x532=(x516*x526);
IkReal x533=(x515*x518);
IkReal x534=(x531+x528);
IkReal x535=(x533+x532+x529);
evalcond[0]=((-0.19)+((cj0*x517))+(((-1.0)*cj1*x523))+(((-1.0)*x535))+((sj0*x519)));
evalcond[1]=((((-1.0)*sj1*x523))+(((-1.0)*py*x521))+(((-1.0)*x530))+x534+(((-1.0)*x522*x527)));
evalcond[2]=((((-1.0)*cj1*py*x520))+(((-1.0)*sj0*x520*x525))+((r02*sj0*x517))+(((-1.0)*x534))+x530+((x524*x525))+((cj1*px*r01))+(((-1.0)*cj0*r02*x519)));
evalcond[3]=(((r01*x517))+((pz*r00*x521))+(((-1.0)*x535))+((py*r02*x527))+(((-1.0)*r02*x521*x522))+(((0.19)*r00*sj0))+(((-1.0)*cj1*x523*x524))+(((-0.19)*x524))+(((-1.0)*x519*x520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x536=((139000.0)*cj1);
IkReal x537=(py*sj0);
IkReal x538=(cj0*px);
IkReal x539=((273000.0)*cj3);
IkReal x540=((139000.0)*sj1);
IkReal x541=((273000.0)*cj1*sj3);
IkReal x542=((273000.0)*sj1*sj3);
CheckValue<IkReal> x543 = IKatan2WithCheck(IkReal(((((-1.0)*x537*x542))+(((-1.0)*x538*x542))+(((51870.0)*sj3))+(((-1.0)*cj1*x537*x539))+(((-1.0)*pz*x540))+(((-1.0)*pz*sj1*x539))+(((-1.0)*x536*x538))+(((-1.0)*x536*x537))+(((-1.0)*cj1*x538*x539))+((pz*x541)))),((26410.0)+((pz*x536))+(((-1.0)*x537*x540))+((cj1*pz*x539))+(((-1.0)*sj1*x537*x539))+(((-1.0)*x538*x540))+(((51870.0)*cj3))+(((-1.0)*sj1*x538*x539))+((x537*x541))+((x538*x541))+((pz*x542))),IKFAST_ATAN2_MAGTHRESH);
if(!x543.valid){
continue;
}
CheckValue<IkReal> x544=IKPowWithIntegerCheck(IKsign(((-93850.0)+(((-75894.0)*cj3)))),-1);
if(!x544.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x543.value)+(((1.5707963267949)*(x544.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x545=IKcos(j2);
IkReal x546=IKsin(j2);
IkReal x547=(px*sj1);
IkReal x548=((0.273)*cj3);
IkReal x549=(py*sj1);
IkReal x550=((1.0)*r00);
IkReal x551=(cj1*sj0);
IkReal x552=((1.0)*px);
IkReal x553=((1.0)*pz);
IkReal x554=(cj0*r01);
IkReal x555=(pz*sj1);
IkReal x556=((0.273)*sj3);
IkReal x557=(cj0*cj1);
IkReal x558=((0.139)*x546);
IkReal x559=((0.139)*x545);
IkReal x560=(x545*x556);
IkReal x561=(x546*x548);
IkReal x562=(x546*x556);
IkReal x563=(x545*x548);
IkReal x564=(x558+x561);
IkReal x565=(x559+x562+x563);
evalcond[0]=((-0.19)+((sj0*x549))+(((-1.0)*cj1*x553))+((cj0*x547))+(((-1.0)*x565)));
evalcond[1]=((((-1.0)*py*x551))+(((-1.0)*sj1*x553))+(((-1.0)*x552*x557))+x564+(((-1.0)*x560)));
evalcond[2]=((((-1.0)*cj0*r02*x549))+((r02*sj0*x547))+(((-1.0)*sj0*x550*x555))+(((-1.0)*cj1*py*x550))+((x554*x555))+x560+((cj1*px*r01))+(((-1.0)*x564)));
evalcond[3]=(((pz*r00*x551))+(((-1.0)*cj1*x553*x554))+((py*r02*x557))+(((-1.0)*x549*x550))+(((0.19)*r00*sj0))+(((-0.19)*x554))+(((-1.0)*r02*x551*x552))+(((-1.0)*x565))+((r01*x547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x566=px*px;
IkReal x567=pz*pz;
IkReal x568=py*py;
IkReal x569=(r01*sj0);
IkReal x570=((2.0)*py);
IkReal x571=(r00*sj0);
IkReal x572=((0.19)*cj1);
IkReal x573=(py*r02);
IkReal x574=((0.38)*cj1);
IkReal x575=((1.0)*pz);
IkReal x576=(cj0*r01);
IkReal x577=(px*sj0);
IkReal x578=((0.19)*sj1);
IkReal x579=(cj0*r00);
IkReal x580=(cj0*r02);
IkReal x581=((1.0)*x567);
IkReal x582=((0.38)*py*sj1);
IkReal x583=((1.0)*x568);
IkReal x584=((0.38)*px*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x577))+((cj0*py)));
evalcond[2]=(sj4+(((-1.0)*x571))+x576);
evalcond[3]=((((-1.0)*px*r00))+((x578*x579))+((x569*x578))+(((-1.0)*py*r01))+(((-1.0)*r02*x572))+(((-1.0)*r02*x575)));
evalcond[4]=((0.133644)+((sj0*x582))+((cj0*x584))+(((-1.0)*pz*x574))+(((-1.0)*x566))+(((-1.0)*x581))+(((-1.0)*x583)));
evalcond[5]=((((-1.0)*x569*x575))+(((-1.0)*x569*x572))+((px*x580))+(((-1.0)*x575*x579))+(((-0.412)*cj4))+(((-1.0)*r02*x578))+(((-1.0)*x572*x579))+((sj0*x573)));
evalcond[6]=((((-1.0)*cj0*x573*x574))+(((0.0361)*x576))+((x567*x576))+((pz*x574*x576))+(((-1.0)*px*x570*x579))+(((-0.0361)*x571))+(((0.169744)*sj4))+((r02*x574*x577))+(((-1.0)*pz*x571*x574))+(((2.0)*pz*r02*x577))+(((-1.0)*x571*x581))+(((-1.0)*x571*x583))+((px*x569*x570))+(((-1.0)*x576*x583))+((x566*x571))+((x566*x576))+((r00*x582))+(((-1.0)*r01*x584))+(((-1.0)*pz*x570*x580)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x585=((2.42718446601942)*pz);
IkReal x586=((2.42718446601942)*cj0*px);
IkReal x587=((2.42718446601942)*py*sj0);
if( IKabs((((sj1*x585))+((cj1*x586))+((cj1*x587)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.461165048543689)+((sj1*x587))+((sj1*x586))+(((-1.0)*cj1*x585)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x585))+((cj1*x586))+((cj1*x587))))+IKsqr(((-0.461165048543689)+((sj1*x587))+((sj1*x586))+(((-1.0)*cj1*x585))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x585))+((cj1*x586))+((cj1*x587))), ((-0.461165048543689)+((sj1*x587))+((sj1*x586))+(((-1.0)*cj1*x585))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x588=IKcos(j2);
IkReal x589=IKsin(j2);
IkReal x590=pz*pz;
IkReal x591=py*py;
IkReal x592=px*px;
IkReal x593=(cj0*sj1);
IkReal x594=(sj0*sj1);
IkReal x595=((0.169744)*cj4);
IkReal x596=((2.0)*pz);
IkReal x597=(py*r02);
IkReal x598=(r02*sj1);
IkReal x599=(r00*sj1);
IkReal x600=((1.0)*py);
IkReal x601=(cj0*cj1);
IkReal x602=(r01*sj1);
IkReal x603=(px*r02);
IkReal x604=((1.0)*pz);
IkReal x605=(pz*r00);
IkReal x606=(cj1*sj0);
IkReal x607=(cj1*r02);
IkReal x608=((0.38)*pz);
IkReal x609=((0.0361)*r01);
IkReal x610=((1.0)*r00);
IkReal x611=((0.38)*cj0);
IkReal x612=((0.0361)*r00);
IkReal x613=(cj1*r01);
IkReal x614=((1.0)*r01);
IkReal x615=(px*r00);
IkReal x616=(r00*x590);
IkReal x617=((0.412)*x589);
IkReal x618=((1.0)*x591);
IkReal x619=((2.0)*px*py);
IkReal x620=(r01*x592);
IkReal x621=((1.0)*x592);
IkReal x622=((0.412)*x588);
evalcond[0]=(((r01*x594))+((r00*x593))+(((-1.0)*x607))+((cj4*x589)));
evalcond[1]=((-0.19)+((py*x594))+(((-1.0)*cj1*x604))+(((-1.0)*x622))+((px*x593)));
evalcond[2]=((((-1.0)*x598))+((cj4*x588))+(((-1.0)*x606*x614))+(((-1.0)*x601*x610)));
evalcond[3]=((((-1.0)*sj1*x604))+(((-1.0)*x600*x606))+x617+(((-1.0)*px*x601)));
evalcond[4]=((((-1.0)*cj1*r00*x600))+((x594*x603))+((sj4*x617))+(((-1.0)*x593*x597))+((px*x613))+(((-1.0)*r00*x594*x604))+((pz*r01*x593)));
evalcond[5]=(((x605*x606))+((sj4*x622))+(((-1.0)*x603*x606))+((px*x602))+(((-1.0)*r01*x601*x604))+((x597*x601))+(((-1.0)*x599*x600))+(((-0.19)*cj0*r01))+(((0.19)*r00*sj0)));
evalcond[6]=(((cj1*x596*x615))+(((-2.0)*py*x594*x615))+((x593*x616))+((r00*x591*x593))+(((-1.0)*x607*x621))+(((-1.0)*x594*x596*x597))+((x594*x620))+((x590*x607))+((r01*x590*x594))+(((-1.0)*x607*x618))+(((0.38)*x615))+(((-1.0)*x591*x594*x614))+((r02*x608))+((py*x596*x613))+(((-1.0)*r01*x593*x619))+(((-1.0)*x593*x596*x603))+(((-1.0)*x592*x593*x610))+(((-1.0)*x593*x612))+((x589*x595))+(((-1.0)*x594*x609))+(((0.38)*py*r01))+(((0.0361)*x607)));
evalcond[7]=((((-1.0)*x590*x606*x614))+((r01*x601*x619))+(((-1.0)*x590*x601*x610))+(((-0.0361)*x598))+(((-1.0)*x605*x611))+((x596*x597*x606))+((x603*x611))+(((-1.0)*x591*x601*x610))+(((-1.0)*x598*x618))+((r00*x592*x601))+((x596*x601*x603))+((py*x596*x602))+(((-1.0)*x592*x606*x614))+(((2.0)*py*x606*x615))+((px*x596*x599))+((x590*x598))+((r01*x591*x606))+(((0.38)*sj0*x597))+(((-1.0)*r01*sj0*x608))+(((-1.0)*x606*x609))+(((-1.0)*x601*x612))+((x588*x595))+(((-1.0)*x598*x621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x623=px*px;
IkReal x624=pz*pz;
IkReal x625=py*py;
IkReal x626=(r01*sj0);
IkReal x627=((2.0)*py);
IkReal x628=(r00*sj0);
IkReal x629=((0.19)*cj1);
IkReal x630=(py*r02);
IkReal x631=((0.38)*cj1);
IkReal x632=((1.0)*pz);
IkReal x633=(cj0*r01);
IkReal x634=(px*sj0);
IkReal x635=((0.19)*sj1);
IkReal x636=(cj0*r00);
IkReal x637=(cj0*r02);
IkReal x638=((1.0)*x624);
IkReal x639=((0.38)*py*sj1);
IkReal x640=((1.0)*x625);
IkReal x641=((0.38)*px*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x634))+((cj0*py)));
evalcond[2]=(sj4+x633+(((-1.0)*x628)));
evalcond[3]=((((-1.0)*px*r00))+((x635*x636))+(((-1.0)*r02*x629))+(((-1.0)*r02*x632))+(((-1.0)*py*r01))+((x626*x635)));
evalcond[4]=((-0.018144)+(((-1.0)*pz*x631))+(((-1.0)*x638))+(((-1.0)*x640))+((sj0*x639))+(((-1.0)*x623))+((cj0*x641)));
evalcond[5]=((((-1.0)*x629*x636))+(((-0.134)*cj4))+(((-1.0)*r02*x635))+((sj0*x630))+(((-1.0)*x626*x629))+(((-1.0)*x626*x632))+((px*x637))+(((-1.0)*x632*x636)));
evalcond[6]=((((-1.0)*pz*x628*x631))+((pz*x631*x633))+(((-0.0361)*x628))+(((2.0)*pz*r02*x634))+(((-1.0)*r01*x641))+(((0.017956)*sj4))+(((-1.0)*x633*x640))+(((0.0361)*x633))+(((-1.0)*x628*x638))+((r02*x631*x634))+(((-1.0)*px*x627*x636))+(((-1.0)*cj0*x630*x631))+((r00*x639))+((x624*x633))+(((-1.0)*x628*x640))+((x623*x633))+((x623*x628))+((px*x626*x627))+(((-1.0)*pz*x627*x637)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x642=((7.46268656716418)*cj1);
IkReal x643=(py*sj0);
IkReal x644=(cj0*px);
IkReal x645=((7.46268656716418)*sj1);
if( IKabs(((((-1.0)*x642*x644))+(((-1.0)*x642*x643))+(((-1.0)*pz*x645)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.41791044776119)+((pz*x642))+(((-1.0)*x644*x645))+(((-1.0)*x643*x645)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x642*x644))+(((-1.0)*x642*x643))+(((-1.0)*pz*x645))))+IKsqr(((1.41791044776119)+((pz*x642))+(((-1.0)*x644*x645))+(((-1.0)*x643*x645))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x642*x644))+(((-1.0)*x642*x643))+(((-1.0)*pz*x645))), ((1.41791044776119)+((pz*x642))+(((-1.0)*x644*x645))+(((-1.0)*x643*x645))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x646=IKsin(j2);
IkReal x647=IKcos(j2);
IkReal x648=pz*pz;
IkReal x649=py*py;
IkReal x650=px*px;
IkReal x651=(cj0*sj1);
IkReal x652=(r01*sj0);
IkReal x653=((1.0)*cj1);
IkReal x654=(r02*sj1);
IkReal x655=(cj1*r02);
IkReal x656=((1.0)*sj1);
IkReal x657=(py*sj1);
IkReal x658=(py*r00);
IkReal x659=(px*sj1);
IkReal x660=((2.0)*pz);
IkReal x661=(px*r02);
IkReal x662=(r00*sj0);
IkReal x663=((2.0)*px);
IkReal x664=((0.38)*r02);
IkReal x665=(cj0*r00);
IkReal x666=(py*sj0);
IkReal x667=(pz*r01);
IkReal x668=(py*r01);
IkReal x669=(cj0*px);
IkReal x670=((0.0361)*cj1);
IkReal x671=((0.38)*pz);
IkReal x672=(cj1*px);
IkReal x673=(r00*x648);
IkReal x674=(r00*x649);
IkReal x675=((0.134)*x647);
IkReal x676=(cj4*x647);
IkReal x677=((0.134)*x646);
IkReal x678=((1.0)*x650);
IkReal x679=(cj4*x646);
IkReal x680=(x660*x666);
evalcond[0]=(((sj1*x652))+(((-1.0)*r02*x653))+(((-1.0)*x679))+((r00*x651)));
evalcond[1]=((-0.19)+((sj0*x657))+((px*x651))+x675+(((-1.0)*pz*x653)));
evalcond[2]=((((-1.0)*pz*x656))+(((-1.0)*x653*x666))+(((-1.0)*x653*x669))+(((-1.0)*x677)));
evalcond[3]=((((-1.0)*x654))+(((-1.0)*x676))+(((-1.0)*x653*x665))+(((-1.0)*x652*x653)));
evalcond[4]=(((x651*x667))+((r01*x672))+(((-1.0)*pz*x656*x662))+((px*sj0*x654))+(((-1.0)*sj4*x677))+(((-1.0)*py*r02*x651))+(((-1.0)*x653*x658)));
evalcond[5]=(((cj0*py*x655))+(((-1.0)*x656*x658))+((cj1*pz*x662))+(((-0.19)*cj0*r01))+(((-1.0)*cj0*x653*x667))+(((0.19)*x662))+(((-1.0)*sj4*x675))+(((-1.0)*sj0*x653*x661))+((r01*x659)));
evalcond[6]=((((-1.0)*x651*x663*x668))+(((-1.0)*x657*x662*x663))+((x651*x674))+((x651*x673))+((sj1*x648*x652))+(((-1.0)*r02*x650*x653))+((r00*x660*x672))+(((-1.0)*r00*x651*x678))+((x648*x655))+(((0.38)*px*r00))+(((-0.0361)*r00*x651))+(((-1.0)*x654*x680))+(((-0.0361)*sj1*x652))+(((0.38)*x668))+(((-1.0)*x649*x652*x656))+((pz*x664))+(((-1.0)*r02*x649*x653))+((cj1*x660*x668))+(((0.0361)*x655))+(((-0.017956)*x679))+(((-1.0)*x651*x660*x661))+((sj1*x650*x652)));
evalcond[7]=((((-1.0)*x648*x652*x653))+(((-1.0)*x650*x652*x653))+((x664*x666))+(((-1.0)*x654*x678))+((r00*x659*x660))+((r01*x657*x660))+((x648*x654))+((cj1*x650*x665))+((cj1*sj0*x658*x663))+(((-1.0)*x649*x653*x665))+(((-1.0)*x665*x671))+(((-1.0)*x665*x670))+((cj1*x649*x652))+(((0.38)*cj0*x661))+(((-1.0)*x648*x653*x665))+((x655*x680))+(((-0.0361)*x654))+(((-1.0)*x652*x670))+(((-1.0)*x652*x671))+(((-0.017956)*x676))+(((-1.0)*x649*x654))+((x655*x660*x669))+((cj0*cj1*x663*x668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x692=IKPowWithIntegerCheck(cj4,-1);
if(!x692.valid){
continue;
}
IkReal x681=x692.value;
IkReal x682=((1000.0)*cj4);
IkReal x683=(pz*sj1);
IkReal x684=(cj1*r02);
IkReal x685=(cj1*cj3);
IkReal x686=(cj0*px);
IkReal x687=((273.0)*cj3);
IkReal x688=(py*sj0);
IkReal x689=(cj0*r00*sj1);
IkReal x690=((-0.00719424460431655)*x681);
IkReal x691=(r01*sj0*sj1);
CheckValue<IkReal> x693=IKPowWithIntegerCheck(sj3,-1);
if(!x693.valid){
continue;
}
if( IKabs((x690*(((((-273.0)*x689))+(((-1.0)*cj1*x682*x686))+(((-1.0)*cj1*x682*x688))+(((-273.0)*x691))+(((273.0)*x684))+(((-1.0)*x682*x683)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x690*(x693.value)*(((((-1.0)*x687*x691))+(((-1.0)*x687*x689))+(((-139.0)*x691))+(((-1.0)*x682*x685*x688))+(((-1.0)*x682*x685*x686))+(((-139.0)*x689))+(((-1.0)*cj3*x682*x683))+((x684*x687))+(((139.0)*x684)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x690*(((((-273.0)*x689))+(((-1.0)*cj1*x682*x686))+(((-1.0)*cj1*x682*x688))+(((-273.0)*x691))+(((273.0)*x684))+(((-1.0)*x682*x683))))))+IKsqr((x690*(x693.value)*(((((-1.0)*x687*x691))+(((-1.0)*x687*x689))+(((-139.0)*x691))+(((-1.0)*x682*x685*x688))+(((-1.0)*x682*x685*x686))+(((-139.0)*x689))+(((-1.0)*cj3*x682*x683))+((x684*x687))+(((139.0)*x684))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x690*(((((-273.0)*x689))+(((-1.0)*cj1*x682*x686))+(((-1.0)*cj1*x682*x688))+(((-273.0)*x691))+(((273.0)*x684))+(((-1.0)*x682*x683))))), (x690*(x693.value)*(((((-1.0)*x687*x691))+(((-1.0)*x687*x689))+(((-139.0)*x691))+(((-1.0)*x682*x685*x688))+(((-1.0)*x682*x685*x686))+(((-139.0)*x689))+(((-1.0)*cj3*x682*x683))+((x684*x687))+(((139.0)*x684))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x694=IKcos(j2);
IkReal x695=IKsin(j2);
IkReal x696=pz*pz;
IkReal x697=py*py;
IkReal x698=px*px;
IkReal x699=((0.055208)*cj4);
IkReal x700=(r01*sj0);
IkReal x701=((1.0)*cj1);
IkReal x702=((1.0)*sj1);
IkReal x703=(py*sj1);
IkReal x704=(cj0*r00);
IkReal x705=((2.0)*pz);
IkReal x706=(cj0*sj1);
IkReal x707=(px*r02);
IkReal x708=((0.273)*cj3);
IkReal x709=(cj1*r02);
IkReal x710=(pz*r01);
IkReal x711=(py*sj0);
IkReal x712=(px*r00);
IkReal x713=((2.0)*cj1);
IkReal x714=(cj0*py);
IkReal x715=((0.075894)*cj4);
IkReal x716=((0.0361)*cj1);
IkReal x717=((0.38)*r02);
IkReal x718=((0.0361)*sj1);
IkReal x719=((0.38)*pz);
IkReal x720=(cj0*r01);
IkReal x721=(px*r01);
IkReal x722=(py*r00);
IkReal x723=(py*r01);
IkReal x724=(sj3*x694);
IkReal x725=((0.139)*x695);
IkReal x726=(sj4*x695);
IkReal x727=(sj1*x696);
IkReal x728=(pz*r00*sj0);
IkReal x729=(sj3*x695);
IkReal x730=(r02*x698);
IkReal x731=((0.139)*x694);
IkReal x732=(r02*x697);
IkReal x733=(cj3*cj4*x694);
IkReal x734=(cj3*cj4*x695);
evalcond[0]=((((-1.0)*r02*x701))+((sj1*x704))+((sj1*x700))+x734+(((-1.0)*cj4*x724)));
evalcond[1]=(((cj4*x729))+(((-1.0)*r02*x702))+x733+(((-1.0)*x701*x704))+(((-1.0)*x700*x701)));
evalcond[2]=((-0.19)+(((-1.0)*pz*x701))+(((-1.0)*x694*x708))+(((-1.0)*x731))+((px*x706))+((sj0*x703))+(((-0.273)*x729)));
evalcond[3]=((((-1.0)*pz*x702))+(((-1.0)*cj0*px*x701))+((x695*x708))+x725+(((-1.0)*x701*x711))+(((-0.273)*x724)));
evalcond[4]=(((x708*x726))+((cj1*x721))+(((-1.0)*r02*x702*x714))+(((-1.0)*x701*x722))+(((-1.0)*x702*x728))+(((-0.273)*sj4*x724))+((x706*x710))+((sj4*x725))+((sj0*sj1*x707)));
evalcond[5]=(((cj1*x728))+(((-1.0)*x702*x722))+(((0.273)*sj3*x726))+((sj4*x694*x708))+(((-1.0)*sj0*x701*x707))+((x709*x714))+(((-1.0)*cj0*x701*x710))+(((0.19)*r00*sj0))+((sj4*x731))+((sj1*x721))+(((-0.19)*x720)));
evalcond[6]=((((0.09385)*x734))+(((-2.0)*sj0*x703*x712))+((x700*x727))+(((-1.0)*x701*x730))+(((-1.0)*x701*x732))+((sj1*x697*x704))+(((-1.0)*r02*sj0*x703*x705))+((x695*x715))+(((-2.0)*px*x703*x720))+((cj1*x705*x723))+(((-1.0)*x704*x718))+(((-1.0)*x697*x700*x702))+((x696*x709))+((cj1*x705*x712))+(((0.38)*x723))+(((-1.0)*x705*x706*x707))+((sj1*x698*x700))+(((-1.0)*x699*x724))+((x704*x727))+(((0.38)*x712))+((pz*x717))+(((0.0361)*x709))+(((-1.0)*x698*x702*x704))+(((-1.0)*x700*x718)));
evalcond[7]=((((-1.0)*x696*x700*x701))+(((0.09385)*x733))+(((-1.0)*r02*x718))+(((-1.0)*x702*x730))+(((-1.0)*x702*x732))+((x711*x712*x713))+(((-1.0)*x698*x700*x701))+((cj1*x697*x700))+((x711*x717))+((r01*x703*x705))+((sj1*x705*x712))+((x705*x709*x711))+(((0.38)*cj0*x707))+((x694*x715))+(((-1.0)*x697*x701*x704))+(((-1.0)*x704*x716))+(((-1.0)*x704*x719))+((cj0*cj1*x705*x707))+((r02*x727))+((x713*x714*x721))+((cj1*x698*x704))+((x699*x729))+(((-1.0)*x696*x701*x704))+(((-1.0)*x700*x719))+(((-1.0)*x700*x716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x735=((139.0)*sj1);
IkReal x736=(cj0*r00);
IkReal x737=(cj1*sj3);
IkReal x738=(cj3*cj4);
IkReal x739=((273.0)*r02);
IkReal x740=(cj1*cj3);
IkReal x741=(cj4*sj3);
IkReal x742=(r01*sj0);
IkReal x743=((273.0)*sj1);
IkReal x744=((1000.0)*cj4*pz);
IkReal x745=((1000.0)*py*sj0*sj1);
IkReal x746=((1000.0)*cj0*px*sj1);
CheckValue<IkReal> x747=IKPowWithIntegerCheck(IKsign(((((-139.0)*x738))+(((-273.0)*cj4)))),-1);
if(!x747.valid){
continue;
}
CheckValue<IkReal> x748 = IKatan2WithCheck(IkReal((((x735*x736))+((cj3*x736*x743))+(((190.0)*x741))+((x737*x744))+(((-1.0)*x741*x745))+(((-1.0)*x741*x746))+(((-1.0)*x739*x740))+((cj3*x742*x743))+(((-139.0)*cj1*r02))+((x735*x742)))),((((-1.0)*sj3*x736*x743))+(((-1.0)*sj3*x742*x743))+(((-1.0)*x738*x746))+(((-1.0)*x738*x745))+(((190.0)*x738))+((x737*x739))+(((1000.0)*cj1*pz*x738))),IKFAST_ATAN2_MAGTHRESH);
if(!x748.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x747.value)))+(x748.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x749=IKcos(j2);
IkReal x750=IKsin(j2);
IkReal x751=pz*pz;
IkReal x752=py*py;
IkReal x753=px*px;
IkReal x754=((0.055208)*cj4);
IkReal x755=(r01*sj0);
IkReal x756=((1.0)*cj1);
IkReal x757=((1.0)*sj1);
IkReal x758=(py*sj1);
IkReal x759=(cj0*r00);
IkReal x760=((2.0)*pz);
IkReal x761=(cj0*sj1);
IkReal x762=(px*r02);
IkReal x763=((0.273)*cj3);
IkReal x764=(cj1*r02);
IkReal x765=(pz*r01);
IkReal x766=(py*sj0);
IkReal x767=(px*r00);
IkReal x768=((2.0)*cj1);
IkReal x769=(cj0*py);
IkReal x770=((0.075894)*cj4);
IkReal x771=((0.0361)*cj1);
IkReal x772=((0.38)*r02);
IkReal x773=((0.0361)*sj1);
IkReal x774=((0.38)*pz);
IkReal x775=(cj0*r01);
IkReal x776=(px*r01);
IkReal x777=(py*r00);
IkReal x778=(py*r01);
IkReal x779=(sj3*x749);
IkReal x780=((0.139)*x750);
IkReal x781=(sj4*x750);
IkReal x782=(sj1*x751);
IkReal x783=(pz*r00*sj0);
IkReal x784=(sj3*x750);
IkReal x785=(r02*x753);
IkReal x786=((0.139)*x749);
IkReal x787=(r02*x752);
IkReal x788=(cj3*cj4*x749);
IkReal x789=(cj3*cj4*x750);
evalcond[0]=((((-1.0)*r02*x756))+((sj1*x759))+((sj1*x755))+(((-1.0)*cj4*x779))+x789);
evalcond[1]=((((-1.0)*x755*x756))+(((-1.0)*r02*x757))+((cj4*x784))+(((-1.0)*x756*x759))+x788);
evalcond[2]=((-0.19)+((px*x761))+(((-1.0)*x786))+((sj0*x758))+(((-0.273)*x784))+(((-1.0)*pz*x756))+(((-1.0)*x749*x763)));
evalcond[3]=((((-1.0)*x756*x766))+(((-0.273)*x779))+x780+(((-1.0)*pz*x757))+(((-1.0)*cj0*px*x756))+((x750*x763)));
evalcond[4]=(((sj0*sj1*x762))+((cj1*x776))+((x761*x765))+((sj4*x780))+(((-1.0)*r02*x757*x769))+(((-1.0)*x756*x777))+((x763*x781))+(((-1.0)*x757*x783))+(((-0.273)*sj4*x779)));
evalcond[5]=((((-1.0)*x757*x777))+(((-1.0)*cj0*x756*x765))+(((-0.19)*x775))+((cj1*x783))+(((0.273)*sj3*x781))+(((-1.0)*sj0*x756*x762))+((sj4*x749*x763))+((sj4*x786))+((sj1*x776))+(((0.19)*r00*sj0))+((x764*x769)));
evalcond[6]=(((x750*x770))+((x755*x782))+(((-2.0)*px*x758*x775))+((pz*x772))+(((-2.0)*sj0*x758*x767))+(((-1.0)*x754*x779))+(((0.38)*x767))+(((0.0361)*x764))+((sj1*x752*x759))+(((-1.0)*x755*x773))+((cj1*x760*x778))+(((-1.0)*x752*x755*x757))+(((-1.0)*r02*sj0*x758*x760))+(((0.38)*x778))+((cj1*x760*x767))+((x759*x782))+((x751*x764))+(((-1.0)*x759*x773))+(((-1.0)*x760*x761*x762))+(((0.09385)*x789))+((sj1*x753*x755))+(((-1.0)*x753*x757*x759))+(((-1.0)*x756*x785))+(((-1.0)*x756*x787)));
evalcond[7]=((((-1.0)*x753*x755*x756))+(((-1.0)*x751*x755*x756))+((x768*x769*x776))+(((-1.0)*x755*x771))+(((-1.0)*x755*x774))+(((0.38)*cj0*x762))+((r01*x758*x760))+((sj1*x760*x767))+((cj0*cj1*x760*x762))+((r02*x782))+(((-1.0)*r02*x773))+((x766*x772))+(((-1.0)*x752*x756*x759))+((cj1*x752*x755))+(((-1.0)*x757*x787))+(((-1.0)*x757*x785))+(((-1.0)*x759*x774))+(((-1.0)*x759*x771))+((x766*x767*x768))+((x760*x764*x766))+(((-1.0)*x751*x756*x759))+(((0.09385)*x788))+((x754*x784))+((cj1*x753*x759))+((x749*x770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x790=((1.0)*sj1);
IkReal x791=(cj1*sj3);
IkReal x792=(cj0*r00);
IkReal x793=(cj3*r02);
IkReal x794=(r01*sj0);
IkReal x795=(sj1*sj3);
IkReal x796=(cj3*x794);
CheckValue<IkReal> x797=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x797.valid){
continue;
}
CheckValue<IkReal> x798 = IKatan2WithCheck(IkReal((((cj1*x793))+(((-1.0)*x790*x796))+((r02*x795))+(((-1.0)*cj3*x790*x792))+((x791*x792))+((x791*x794)))),(((cj1*x796))+((sj1*x793))+(((-1.0)*r02*x791))+((x792*x795))+((cj1*cj3*x792))+((x794*x795))),IKFAST_ATAN2_MAGTHRESH);
if(!x798.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x797.value)))+(x798.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x799=IKcos(j2);
IkReal x800=IKsin(j2);
IkReal x801=pz*pz;
IkReal x802=py*py;
IkReal x803=px*px;
IkReal x804=((0.055208)*cj4);
IkReal x805=(r01*sj0);
IkReal x806=((1.0)*cj1);
IkReal x807=((1.0)*sj1);
IkReal x808=(py*sj1);
IkReal x809=(cj0*r00);
IkReal x810=((2.0)*pz);
IkReal x811=(cj0*sj1);
IkReal x812=(px*r02);
IkReal x813=((0.273)*cj3);
IkReal x814=(cj1*r02);
IkReal x815=(pz*r01);
IkReal x816=(py*sj0);
IkReal x817=(px*r00);
IkReal x818=((2.0)*cj1);
IkReal x819=(cj0*py);
IkReal x820=((0.075894)*cj4);
IkReal x821=((0.0361)*cj1);
IkReal x822=((0.38)*r02);
IkReal x823=((0.0361)*sj1);
IkReal x824=((0.38)*pz);
IkReal x825=(cj0*r01);
IkReal x826=(px*r01);
IkReal x827=(py*r00);
IkReal x828=(py*r01);
IkReal x829=(sj3*x799);
IkReal x830=((0.139)*x800);
IkReal x831=(sj4*x800);
IkReal x832=(sj1*x801);
IkReal x833=(pz*r00*sj0);
IkReal x834=(sj3*x800);
IkReal x835=(r02*x803);
IkReal x836=((0.139)*x799);
IkReal x837=(r02*x802);
IkReal x838=(cj3*cj4*x799);
IkReal x839=(cj3*cj4*x800);
evalcond[0]=((((-1.0)*r02*x806))+(((-1.0)*cj4*x829))+((sj1*x805))+((sj1*x809))+x839);
evalcond[1]=((((-1.0)*x805*x806))+(((-1.0)*x806*x809))+(((-1.0)*r02*x807))+((cj4*x834))+x838);
evalcond[2]=((-0.19)+((px*x811))+(((-0.273)*x834))+(((-1.0)*x836))+((sj0*x808))+(((-1.0)*x799*x813))+(((-1.0)*pz*x806)));
evalcond[3]=(x830+((x800*x813))+(((-0.273)*x829))+(((-1.0)*x806*x816))+(((-1.0)*cj0*px*x806))+(((-1.0)*pz*x807)));
evalcond[4]=((((-1.0)*r02*x807*x819))+((sj4*x830))+((x811*x815))+((x813*x831))+((cj1*x826))+(((-1.0)*x806*x827))+(((-0.273)*sj4*x829))+(((-1.0)*x807*x833))+((sj0*sj1*x812)));
evalcond[5]=(((sj1*x826))+((sj4*x836))+((sj4*x799*x813))+(((-1.0)*cj0*x806*x815))+((x814*x819))+(((-0.19)*x825))+(((0.19)*r00*sj0))+(((-1.0)*sj0*x806*x812))+(((-1.0)*x807*x827))+(((0.273)*sj3*x831))+((cj1*x833)));
evalcond[6]=((((-1.0)*x806*x835))+(((-1.0)*x806*x837))+((pz*x822))+(((-1.0)*x803*x807*x809))+((x801*x814))+(((-1.0)*x809*x823))+(((-2.0)*px*x808*x825))+(((-1.0)*x810*x811*x812))+(((0.0361)*x814))+(((-1.0)*x802*x805*x807))+((cj1*x810*x828))+(((0.09385)*x839))+((x809*x832))+((cj1*x810*x817))+(((-2.0)*sj0*x808*x817))+((sj1*x802*x809))+((x805*x832))+(((0.38)*x828))+(((0.38)*x817))+((x800*x820))+(((-1.0)*x805*x823))+(((-1.0)*x804*x829))+((sj1*x803*x805))+(((-1.0)*r02*sj0*x808*x810)));
evalcond[7]=(((sj1*x810*x817))+(((-1.0)*r02*x823))+((cj0*cj1*x810*x812))+((x799*x820))+(((-1.0)*x809*x824))+(((-1.0)*x809*x821))+(((0.38)*cj0*x812))+(((-1.0)*x801*x806*x809))+((cj1*x803*x809))+((r02*x832))+(((-1.0)*x802*x806*x809))+(((0.09385)*x838))+((x816*x822))+((x816*x817*x818))+(((-1.0)*x803*x805*x806))+((x818*x819*x826))+((cj1*x802*x805))+((x804*x834))+((x810*x814*x816))+((r01*x808*x810))+(((-1.0)*x805*x824))+(((-1.0)*x805*x821))+(((-1.0)*x807*x837))+(((-1.0)*x807*x835))+(((-1.0)*x801*x805*x806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x840=((190.0)*sj1);
IkReal x841=((5.00698342424961)*sj1);
CheckValue<IkReal> x842=IKPowWithIntegerCheck(cj4,-1);
if(!x842.valid){
continue;
}
if( IKabs(((0.00719424460431655)*(x842.value)*(((((-1.0)*cj0*r00*x840))+(((-1.0)*r01*sj0*x840))+(((1000.0)*pz*r02))+(((1000.0)*py*r01))+(((190.0)*cj1*r02))+(((1000.0)*px*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.76092971776425)+(((-1.0)*py*sj0*x841))+(((5.00698342424961)*cj1*pz))+(((-1.0)*cj0*px*x841))+(((13.1762721690779)*(pz*pz)))+(((13.1762721690779)*(px*px)))+(((13.1762721690779)*(py*py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00719424460431655)*(x842.value)*(((((-1.0)*cj0*r00*x840))+(((-1.0)*r01*sj0*x840))+(((1000.0)*pz*r02))+(((1000.0)*py*r01))+(((190.0)*cj1*r02))+(((1000.0)*px*r00))))))+IKsqr(((-0.76092971776425)+(((-1.0)*py*sj0*x841))+(((5.00698342424961)*cj1*pz))+(((-1.0)*cj0*px*x841))+(((13.1762721690779)*(pz*pz)))+(((13.1762721690779)*(px*px)))+(((13.1762721690779)*(py*py)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00719424460431655)*(x842.value)*(((((-1.0)*cj0*r00*x840))+(((-1.0)*r01*sj0*x840))+(((1000.0)*pz*r02))+(((1000.0)*py*r01))+(((190.0)*cj1*r02))+(((1000.0)*px*r00))))), ((-0.76092971776425)+(((-1.0)*py*sj0*x841))+(((5.00698342424961)*cj1*pz))+(((-1.0)*cj0*px*x841))+(((13.1762721690779)*(pz*pz)))+(((13.1762721690779)*(px*px)))+(((13.1762721690779)*(py*py)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x843=IKcos(j3);
IkReal x844=px*px;
IkReal x845=pz*pz;
IkReal x846=py*py;
IkReal x847=(r01*sj0);
IkReal x848=((2.0)*py);
IkReal x849=(r00*sj0);
IkReal x850=((0.19)*cj1);
IkReal x851=(py*r02);
IkReal x852=((0.38)*cj1);
IkReal x853=((1.0)*pz);
IkReal x854=(cj0*r01);
IkReal x855=((0.19)*sj1);
IkReal x856=((0.139)*cj4);
IkReal x857=(cj0*r00);
IkReal x858=(cj0*r02);
IkReal x859=((1.0)*x845);
IkReal x860=((0.38)*py*sj1);
IkReal x861=((1.0)*x846);
IkReal x862=((0.075894)*x843);
IkReal x863=((0.38)*px*sj1);
IkReal x864=(px*r02*sj0);
evalcond[0]=((((-1.0)*px*r00))+((x855*x857))+((x847*x855))+(((-1.0)*r02*x850))+(((-1.0)*r02*x853))+((x856*(IKsin(j3))))+(((-1.0)*py*r01)));
evalcond[1]=((0.05775)+(((-1.0)*x861))+((cj0*x863))+(((-1.0)*x859))+((sj0*x860))+(((-1.0)*pz*x852))+(((-1.0)*x844))+x862);
evalcond[2]=((((-1.0)*x853*x857))+(((-1.0)*x850*x857))+((sj0*x851))+(((-1.0)*x847*x853))+(((-1.0)*x847*x850))+(((-1.0)*r02*x855))+((px*x858))+(((-0.273)*cj4))+(((-1.0)*x843*x856)));
evalcond[3]=((((0.0361)*x854))+(((-1.0)*x854*x861))+((r00*x860))+((x845*x854))+(((-1.0)*x849*x859))+(((0.09385)*sj4))+((pz*x852*x854))+(((-1.0)*r01*x863))+(((-1.0)*cj0*x851*x852))+(((-1.0)*pz*x849*x852))+((px*x847*x848))+((x844*x854))+(((-1.0)*x849*x861))+(((-1.0)*pz*x848*x858))+((sj4*x862))+(((-0.0361)*x849))+(((-1.0)*px*x848*x857))+((x844*x849))+(((2.0)*pz*x864))+((x852*x864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x865=(cj3*cj4);
j2eval[0]=((((-1.96402877697842)*cj4))+(((-1.0)*x865)));
j2eval[1]=IKsign(((((-139.0)*x865))+(((-273.0)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
bool bgotonextstatement = true;
do
{
IkReal x866=px*px;
IkReal x867=((0.075894)*cj3);
IkReal x868=pz*pz;
IkReal x869=py*py;
IkReal x870=(r01*sj0);
IkReal x871=((0.19)*cj1);
IkReal x872=((1.0)*cj1);
IkReal x873=(py*r02);
IkReal x874=((1.0)*sj1);
IkReal x875=((0.38)*cj0);
IkReal x876=(px*r02);
IkReal x877=(py*r01);
IkReal x878=((1.0)*sj0);
IkReal x879=(cj1*r02);
IkReal x880=((0.38)*sj1);
IkReal x881=(r00*sj0);
IkReal x882=(cj0*r01);
IkReal x883=((1.0)*pz);
IkReal x884=((0.0361)*cj1);
IkReal x885=(cj0*r00);
IkReal x886=((0.38)*sj0);
IkReal x887=(r02*sj1);
IkReal x888=(pz*r00);
IkReal x889=(px*r00);
IkReal x890=((0.19)*sj1);
IkReal x891=((2.0)*cj1);
IkReal x892=(pz*sj0);
IkReal x893=(cj0*sj1);
IkReal x894=((0.0361)*sj1);
IkReal x895=((0.38)*pz);
IkReal x896=(cj0*pz);
IkReal x897=(r00*x869);
IkReal x898=((2.0)*pz*sj1);
IkReal x899=(cj0*x868);
IkReal x900=((2.0)*px*py);
IkReal x901=(cj1*x895);
IkReal x902=(r02*x866);
IkReal x903=((1.0)*x869);
IkReal x904=(r02*x869);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*px*x878))+((cj0*py)));
evalcond[2]=((1.0)+(((-1.0)*r00*x878))+x882);
evalcond[3]=(((sj1*x885))+((sj1*x870))+(((-1.0)*r02*x872)));
evalcond[4]=((((-1.0)*r02*x874))+(((-1.0)*x870*x872))+(((-1.0)*x872*x885)));
evalcond[5]=((((-1.0)*x877))+(((-1.0)*x889))+(((-1.0)*r02*x871))+((x870*x890))+((x885*x890))+(((-1.0)*r02*x883)));
evalcond[6]=((0.05775)+((px*sj1*x875))+(((-1.0)*x866))+(((-1.0)*x868))+(((-1.0)*x903))+(((-1.0)*x901))+x867+((py*sj0*x880)));
evalcond[7]=((((-1.0)*x883*x885))+(((-1.0)*x870*x883))+((sj0*x873))+(((-0.19)*x887))+(((-1.0)*x870*x871))+(((-1.0)*x871*x885))+((cj0*x876)));
evalcond[8]=((0.09385)+((x870*x900))+((cj1*x876*x886))+(((-2.0)*x873*x896))+(((-1.0)*px*r01*x880))+(((2.0)*x876*x892))+((x868*x882))+(((0.0361)*x882))+((cj1*pz*r01*x875))+(((-1.0)*r00*x868*x878))+(((-0.0361)*x881))+(((-1.0)*x885*x900))+(((-1.0)*x882*x903))+(((-1.0)*cj1*x873*x875))+((x866*x881))+((x866*x882))+x867+(((-1.0)*x881*x901))+(((-1.0)*x878*x897))+((py*r00*x880)));
evalcond[9]=(((r02*x895))+(((0.38)*x877))+((sj1*x866*x870))+(((-1.0)*x870*x894))+(((0.0361)*x879))+((x868*x879))+((sj1*x868*x885))+((sj1*x868*x870))+(((-1.0)*x869*x870*x874))+(((-2.0)*sj1*x873*x892))+(((-2.0)*pz*x876*x893))+(((-1.0)*x885*x894))+(((-1.0)*sj1*x881*x900))+(((-1.0)*x866*x874*x885))+(((0.38)*x889))+(((-2.0)*px*x877*x893))+((sj1*x869*x885))+((pz*x877*x891))+((px*x888*x891))+(((-1.0)*x872*x904))+(((-1.0)*x872*x902)));
evalcond[10]=((((-1.0)*x866*x870*x872))+(((-1.0)*x870*x895))+(((-1.0)*x869*x872*x885))+((x868*x887))+(((-1.0)*x870*x884))+(((2.0)*px*sj1*x888))+((cj0*px*x877*x891))+((x877*x898))+((x873*x891*x892))+(((-0.0361)*x887))+((cj1*x866*x885))+((x876*x891*x896))+((cj1*x869*x870))+(((-1.0)*x874*x904))+(((-1.0)*x874*x902))+(((-1.0)*x868*x870*x872))+((px*py*x881*x891))+((x875*x876))+(((-1.0)*x868*x872*x885))+((x873*x886))+(((-1.0)*x884*x885))+(((-1.0)*x875*x888)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.23659314306796)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-93850.0)+(((-75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((1.23659314306796)+cj3);
j2eval[1]=IKsign(((93850.0)+(((75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x905=(cj1*py);
IkReal x906=(pz*sj1);
IkReal x907=((273000.0)*cj3);
IkReal x908=(py*sj1);
IkReal x909=((139000.0)*sj0);
IkReal x910=((273000.0)*sj3);
IkReal x911=(cj1*pz);
IkReal x912=((139000.0)*cj0);
IkReal x913=(cj0*r02);
IkReal x914=(r00*x910);
IkReal x915=((273000.0)*cj0*r01);
IkReal x916=(cj1*px*r01);
IkReal x917=((273000.0)*cj0*px*sj1);
IkReal x918=(px*r02*sj0*sj1);
CheckValue<IkReal> x919=IKPowWithIntegerCheck(IKsign(((93850.0)+(((75894.0)*cj3)))),-1);
if(!x919.valid){
continue;
}
CheckValue<IkReal> x920 = IKatan2WithCheck(IkReal(((((-139000.0)*x916))+((cj0*px*sj1*x910))+(((-1.0)*r01*x906*x912))+((r00*x905*x907))+(((-1.0)*cj0*r01*x906*x907))+((r00*x906*x909))+(((-51870.0)*sj3))+(((139000.0)*r00*x905))+(((-1.0)*x910*x911))+((sj0*x908*x910))+((r00*sj0*x906*x907))+((x907*x908*x913))+((r02*x908*x912))+(((-1.0)*x907*x918))+(((-1.0)*x907*x916))+(((-1.0)*px*r02*sj1*x909)))),((-26410.0)+((x910*x916))+((x910*x918))+(((-1.0)*x908*x910*x913))+(((-139000.0)*x911))+((cj0*px*sj1*x907))+((cj0*r01*x906*x910))+(((-1.0)*sj0*x906*x914))+((sj0*x907*x908))+(((-1.0)*x905*x914))+((px*sj1*x912))+(((-1.0)*x907*x911))+((x908*x909))+(((-51870.0)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x920.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x919.value)))+(x920.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x921=IKcos(j2);
IkReal x922=IKsin(j2);
IkReal x923=(px*sj1);
IkReal x924=((0.273)*cj3);
IkReal x925=(py*sj1);
IkReal x926=((1.0)*r00);
IkReal x927=(cj1*sj0);
IkReal x928=((1.0)*px);
IkReal x929=((1.0)*pz);
IkReal x930=(cj0*r01);
IkReal x931=(pz*sj1);
IkReal x932=((0.273)*sj3);
IkReal x933=(cj0*cj1);
IkReal x934=((0.139)*x922);
IkReal x935=((0.139)*x921);
IkReal x936=(x922*x924);
IkReal x937=(x921*x932);
IkReal x938=(x922*x932);
IkReal x939=(x921*x924);
IkReal x940=(x934+x936);
IkReal x941=(x939+x938+x935);
evalcond[0]=((-0.19)+(((-1.0)*x941))+((sj0*x925))+((cj0*x923))+(((-1.0)*cj1*x929)));
evalcond[1]=((((-1.0)*sj1*x929))+(((-1.0)*x928*x933))+(((-1.0)*py*x927))+x940+(((-1.0)*x937)));
evalcond[2]=((((-1.0)*cj1*py*x926))+(((-1.0)*cj0*r02*x925))+((x930*x931))+((r02*sj0*x923))+((cj1*px*r01))+x940+(((-1.0)*sj0*x926*x931))+(((-1.0)*x937)));
evalcond[3]=(((pz*r00*x927))+(((-0.19)*x930))+(((-1.0)*x925*x926))+(((-1.0)*cj1*x929*x930))+(((-1.0)*r02*x927*x928))+(((0.19)*r00*sj0))+((r01*x923))+((py*r02*x933))+x941);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x942=((139000.0)*cj1);
IkReal x943=(py*sj0);
IkReal x944=(cj0*px);
IkReal x945=((273000.0)*cj3);
IkReal x946=((139000.0)*sj1);
IkReal x947=((273000.0)*cj1*sj3);
IkReal x948=((273000.0)*sj1*sj3);
CheckValue<IkReal> x949 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x944*x945))+(((-1.0)*pz*x946))+(((-1.0)*x942*x944))+(((-1.0)*x942*x943))+(((51870.0)*sj3))+(((-1.0)*x944*x948))+(((-1.0)*x943*x948))+(((-1.0)*pz*sj1*x945))+(((-1.0)*cj1*x943*x945))+((pz*x947)))),((26410.0)+(((-1.0)*sj1*x943*x945))+(((-1.0)*sj1*x944*x945))+((x943*x947))+(((51870.0)*cj3))+(((-1.0)*x944*x946))+(((-1.0)*x943*x946))+((x944*x947))+((cj1*pz*x945))+((pz*x948))+((pz*x942))),IKFAST_ATAN2_MAGTHRESH);
if(!x949.valid){
continue;
}
CheckValue<IkReal> x950=IKPowWithIntegerCheck(IKsign(((-93850.0)+(((-75894.0)*cj3)))),-1);
if(!x950.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x949.value)+(((1.5707963267949)*(x950.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x951=IKcos(j2);
IkReal x952=IKsin(j2);
IkReal x953=(px*sj1);
IkReal x954=((0.273)*cj3);
IkReal x955=(py*sj1);
IkReal x956=((1.0)*r00);
IkReal x957=(cj1*sj0);
IkReal x958=((1.0)*px);
IkReal x959=((1.0)*pz);
IkReal x960=(cj0*r01);
IkReal x961=(pz*sj1);
IkReal x962=((0.273)*sj3);
IkReal x963=(cj0*cj1);
IkReal x964=((0.139)*x952);
IkReal x965=((0.139)*x951);
IkReal x966=(x952*x954);
IkReal x967=(x951*x962);
IkReal x968=(x952*x962);
IkReal x969=(x951*x954);
IkReal x970=(x966+x964);
IkReal x971=(x965+x968+x969);
evalcond[0]=((-0.19)+(((-1.0)*cj1*x959))+((sj0*x955))+(((-1.0)*x971))+((cj0*x953)));
evalcond[1]=((((-1.0)*x958*x963))+(((-1.0)*sj1*x959))+(((-1.0)*py*x957))+x970+(((-1.0)*x967)));
evalcond[2]=(((x960*x961))+(((-1.0)*cj0*r02*x955))+(((-1.0)*sj0*x956*x961))+(((-1.0)*cj1*py*x956))+((r02*sj0*x953))+((cj1*px*r01))+x970+(((-1.0)*x967)));
evalcond[3]=((((-1.0)*cj1*x959*x960))+((r01*x953))+((pz*r00*x957))+(((0.19)*r00*sj0))+(((-0.19)*x960))+(((-1.0)*r02*x957*x958))+((py*r02*x963))+(((-1.0)*x955*x956))+x971);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x972=px*px;
IkReal x973=pz*pz;
IkReal x974=py*py;
IkReal x975=((0.075894)*cj3);
IkReal x976=(r01*sj0);
IkReal x977=((0.19)*cj1);
IkReal x978=((1.0)*cj1);
IkReal x979=(py*r02);
IkReal x980=((1.0)*sj1);
IkReal x981=((0.38)*cj0);
IkReal x982=(px*r02);
IkReal x983=(py*r01);
IkReal x984=((1.0)*sj0);
IkReal x985=(cj1*r02);
IkReal x986=((0.38)*sj1);
IkReal x987=(r00*sj0);
IkReal x988=(cj0*r01);
IkReal x989=((1.0)*pz);
IkReal x990=((0.0361)*cj1);
IkReal x991=(cj0*r00);
IkReal x992=((0.38)*sj0);
IkReal x993=(r02*sj1);
IkReal x994=(pz*r00);
IkReal x995=(px*r00);
IkReal x996=((0.19)*sj1);
IkReal x997=((2.0)*cj1);
IkReal x998=(pz*sj0);
IkReal x999=(cj0*sj1);
IkReal x1000=((0.0361)*sj1);
IkReal x1001=((0.38)*pz);
IkReal x1002=(cj0*pz);
IkReal x1003=(r00*x974);
IkReal x1004=((2.0)*pz*sj1);
IkReal x1005=(cj0*x973);
IkReal x1006=((2.0)*px*py);
IkReal x1007=(cj1*x1001);
IkReal x1008=(r02*x972);
IkReal x1009=((1.0)*x974);
IkReal x1010=(r02*x974);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*px*x984))+((cj0*py)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x984))+x988);
evalcond[3]=(((sj1*x976))+(((-1.0)*r02*x978))+((sj1*x991)));
evalcond[4]=((((-1.0)*x978*x991))+(((-1.0)*x976*x978))+(((-1.0)*r02*x980)));
evalcond[5]=(((x976*x996))+(((-1.0)*x995))+((x991*x996))+(((-1.0)*x983))+(((-1.0)*r02*x977))+(((-1.0)*r02*x989)));
evalcond[6]=((0.05775)+((px*sj1*x981))+(((-1.0)*x1009))+(((-1.0)*x1007))+(((-1.0)*x972))+(((-1.0)*x973))+x975+((py*sj0*x986)));
evalcond[7]=((((-0.19)*x993))+((sj0*x979))+(((-1.0)*x976*x977))+(((-1.0)*x989*x991))+(((-1.0)*x976*x989))+((cj0*x982))+(((-1.0)*x977*x991)));
evalcond[8]=((-0.09385)+((x972*x988))+((x972*x987))+((x1006*x976))+(((-2.0)*x1002*x979))+(((0.0361)*x988))+(((-1.0)*r00*x973*x984))+(((-0.0361)*x987))+(((-1.0)*cj1*x979*x981))+((cj1*pz*r01*x981))+(((-1.0)*x1009*x988))+((x973*x988))+(((-1.0)*px*r01*x986))+((py*r00*x986))+((cj1*x982*x992))+(((-1.0)*x1007*x987))+(((-1.0)*x1003*x984))+(((-1.0)*x1006*x991))+(((2.0)*x982*x998))+(((-1.0)*x975)));
evalcond[9]=((((-2.0)*pz*x982*x999))+(((-1.0)*x1000*x976))+(((-1.0)*x1010*x978))+(((-2.0)*px*x983*x999))+((sj1*x974*x991))+(((0.0361)*x985))+(((-1.0)*x974*x976*x980))+(((-2.0)*sj1*x979*x998))+((sj1*x973*x976))+((r02*x1001))+((pz*x983*x997))+(((-1.0)*x1008*x978))+((sj1*x972*x976))+((x973*x985))+(((-1.0)*x972*x980*x991))+((px*x994*x997))+(((-1.0)*x1000*x991))+(((0.38)*x983))+(((0.38)*x995))+((sj1*x973*x991))+(((-1.0)*sj1*x1006*x987)));
evalcond[10]=((((2.0)*px*sj1*x994))+((x981*x982))+((cj1*x974*x976))+(((-0.0361)*x993))+(((-1.0)*x1010*x980))+((px*py*x987*x997))+((x1004*x983))+(((-1.0)*x974*x978*x991))+(((-1.0)*x990*x991))+(((-1.0)*x1008*x980))+((x1002*x982*x997))+(((-1.0)*x973*x978*x991))+((cj1*x972*x991))+(((-1.0)*x973*x976*x978))+(((-1.0)*x972*x976*x978))+(((-1.0)*x1001*x976))+((x979*x997*x998))+(((-1.0)*x976*x990))+((x973*x993))+(((-1.0)*x981*x994))+((cj0*px*x983*x997))+((x979*x992)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.23659314306796)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-93850.0)+(((-75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((1.23659314306796)+cj3);
j2eval[1]=IKsign(((93850.0)+(((75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1011=((273000.0)*sj3);
IkReal x1012=((273000.0)*cj3);
IkReal x1013=(pz*r00);
IkReal x1014=(px*r02);
IkReal x1015=(sj0*sj1);
IkReal x1016=(cj1*pz);
IkReal x1017=(cj1*py*r00);
IkReal x1018=((139000.0)*x1015);
IkReal x1019=(cj0*px*sj1);
IkReal x1020=(cj1*px*r01);
IkReal x1021=(cj0*pz*r01*sj1);
IkReal x1022=(cj0*py*r02*sj1);
CheckValue<IkReal> x1023 = IKatan2WithCheck(IkReal(((((-1.0)*x1012*x1017))+((x1014*x1018))+((py*x1011*x1015))+(((-1.0)*x1012*x1013*x1015))+(((-1.0)*x1011*x1016))+((x1012*x1014*x1015))+(((139000.0)*x1021))+(((139000.0)*x1020))+(((-51870.0)*sj3))+(((-139000.0)*x1017))+((x1012*x1020))+((x1012*x1021))+(((-1.0)*x1013*x1018))+(((-139000.0)*x1022))+((x1011*x1019))+(((-1.0)*x1012*x1022)))),((-26410.0)+(((-1.0)*x1012*x1016))+((x1011*x1022))+((x1012*x1019))+(((-139000.0)*x1016))+(((-1.0)*x1011*x1014*x1015))+((py*x1018))+((py*x1012*x1015))+(((139000.0)*x1019))+(((-1.0)*x1011*x1021))+(((-1.0)*x1011*x1020))+((x1011*x1017))+((x1011*x1013*x1015))+(((-51870.0)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x1023.valid){
continue;
}
CheckValue<IkReal> x1024=IKPowWithIntegerCheck(IKsign(((93850.0)+(((75894.0)*cj3)))),-1);
if(!x1024.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1023.value)+(((1.5707963267949)*(x1024.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1025=IKcos(j2);
IkReal x1026=IKsin(j2);
IkReal x1027=(px*sj1);
IkReal x1028=((0.273)*cj3);
IkReal x1029=(py*sj1);
IkReal x1030=((1.0)*r00);
IkReal x1031=(cj1*sj0);
IkReal x1032=((1.0)*px);
IkReal x1033=((1.0)*pz);
IkReal x1034=(cj0*r01);
IkReal x1035=(pz*sj1);
IkReal x1036=((0.273)*sj3);
IkReal x1037=(cj0*cj1);
IkReal x1038=((0.139)*x1026);
IkReal x1039=((0.139)*x1025);
IkReal x1040=(x1025*x1036);
IkReal x1041=(x1026*x1028);
IkReal x1042=(x1026*x1036);
IkReal x1043=(x1025*x1028);
IkReal x1044=(x1041+x1038);
IkReal x1045=(x1043+x1042+x1039);
evalcond[0]=((-0.19)+((sj0*x1029))+((cj0*x1027))+(((-1.0)*cj1*x1033))+(((-1.0)*x1045)));
evalcond[1]=(x1044+(((-1.0)*x1032*x1037))+(((-1.0)*py*x1031))+(((-1.0)*sj1*x1033))+(((-1.0)*x1040)));
evalcond[2]=((((-1.0)*cj1*py*x1030))+x1040+(((-1.0)*sj0*x1030*x1035))+((r02*sj0*x1027))+((x1034*x1035))+(((-1.0)*cj0*r02*x1029))+((cj1*px*r01))+(((-1.0)*x1044)));
evalcond[3]=(((py*r02*x1037))+((r01*x1027))+(((-1.0)*x1029*x1030))+((pz*r00*x1031))+(((-1.0)*cj1*x1033*x1034))+(((-1.0)*r02*x1031*x1032))+(((-0.19)*x1034))+(((0.19)*r00*sj0))+(((-1.0)*x1045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1046=((139000.0)*cj1);
IkReal x1047=(py*sj0);
IkReal x1048=(cj0*px);
IkReal x1049=((273000.0)*cj3);
IkReal x1050=((139000.0)*sj1);
IkReal x1051=((273000.0)*cj1*sj3);
IkReal x1052=((273000.0)*sj1*sj3);
CheckValue<IkReal> x1053 = IKatan2WithCheck(IkReal(((((-1.0)*x1046*x1047))+(((-1.0)*x1046*x1048))+((pz*x1051))+(((51870.0)*sj3))+(((-1.0)*cj1*x1048*x1049))+(((-1.0)*pz*x1050))+(((-1.0)*x1048*x1052))+(((-1.0)*cj1*x1047*x1049))+(((-1.0)*x1047*x1052))+(((-1.0)*pz*sj1*x1049)))),((26410.0)+(((-1.0)*sj1*x1048*x1049))+((cj1*pz*x1049))+((pz*x1052))+(((-1.0)*sj1*x1047*x1049))+((x1048*x1051))+((pz*x1046))+(((51870.0)*cj3))+(((-1.0)*x1048*x1050))+((x1047*x1051))+(((-1.0)*x1047*x1050))),IKFAST_ATAN2_MAGTHRESH);
if(!x1053.valid){
continue;
}
CheckValue<IkReal> x1054=IKPowWithIntegerCheck(IKsign(((-93850.0)+(((-75894.0)*cj3)))),-1);
if(!x1054.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1053.value)+(((1.5707963267949)*(x1054.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1055=IKcos(j2);
IkReal x1056=IKsin(j2);
IkReal x1057=(px*sj1);
IkReal x1058=((0.273)*cj3);
IkReal x1059=(py*sj1);
IkReal x1060=((1.0)*r00);
IkReal x1061=(cj1*sj0);
IkReal x1062=((1.0)*px);
IkReal x1063=((1.0)*pz);
IkReal x1064=(cj0*r01);
IkReal x1065=(pz*sj1);
IkReal x1066=((0.273)*sj3);
IkReal x1067=(cj0*cj1);
IkReal x1068=((0.139)*x1056);
IkReal x1069=((0.139)*x1055);
IkReal x1070=(x1055*x1066);
IkReal x1071=(x1056*x1058);
IkReal x1072=(x1056*x1066);
IkReal x1073=(x1055*x1058);
IkReal x1074=(x1071+x1068);
IkReal x1075=(x1072+x1073+x1069);
evalcond[0]=((-0.19)+((cj0*x1057))+(((-1.0)*cj1*x1063))+((sj0*x1059))+(((-1.0)*x1075)));
evalcond[1]=(x1074+(((-1.0)*py*x1061))+(((-1.0)*sj1*x1063))+(((-1.0)*x1062*x1067))+(((-1.0)*x1070)));
evalcond[2]=(((r02*sj0*x1057))+x1070+(((-1.0)*cj0*r02*x1059))+(((-1.0)*cj1*py*x1060))+((cj1*px*r01))+(((-1.0)*sj0*x1060*x1065))+(((-1.0)*x1074))+((x1064*x1065)));
evalcond[3]=((((-1.0)*x1059*x1060))+((py*r02*x1067))+(((-0.19)*x1064))+(((-1.0)*cj1*x1063*x1064))+((r01*x1057))+((pz*r00*x1061))+(((-1.0)*r02*x1061*x1062))+(((0.19)*r00*sj0))+(((-1.0)*x1075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1076=px*px;
IkReal x1077=pz*pz;
IkReal x1078=py*py;
IkReal x1079=(r01*sj0);
IkReal x1080=((2.0)*py);
IkReal x1081=(r00*sj0);
IkReal x1082=((0.19)*cj1);
IkReal x1083=(py*r02);
IkReal x1084=((0.38)*cj1);
IkReal x1085=((1.0)*pz);
IkReal x1086=(cj0*r01);
IkReal x1087=(px*sj0);
IkReal x1088=((0.19)*sj1);
IkReal x1089=(cj0*r00);
IkReal x1090=(cj0*r02);
IkReal x1091=((1.0)*x1077);
IkReal x1092=((0.38)*py*sj1);
IkReal x1093=((1.0)*x1078);
IkReal x1094=((0.38)*px*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x1087))+((cj0*py)));
evalcond[2]=(sj4+x1086+(((-1.0)*x1081)));
evalcond[3]=(((x1079*x1088))+(((-1.0)*px*r00))+(((-1.0)*r02*x1082))+(((-1.0)*r02*x1085))+(((-1.0)*py*r01))+((x1088*x1089)));
evalcond[4]=((0.133644)+(((-1.0)*pz*x1084))+((sj0*x1092))+(((-1.0)*x1091))+(((-1.0)*x1093))+(((-1.0)*x1076))+((cj0*x1094)));
evalcond[5]=((((-1.0)*x1079*x1082))+(((-1.0)*x1079*x1085))+(((-1.0)*r02*x1088))+(((-0.412)*cj4))+(((-1.0)*x1082*x1089))+(((-1.0)*x1085*x1089))+((sj0*x1083))+((px*x1090)));
evalcond[6]=((((-0.0361)*x1081))+(((-1.0)*pz*x1081*x1084))+(((-1.0)*x1086*x1093))+(((2.0)*pz*r02*x1087))+((x1076*x1081))+((x1076*x1086))+((r00*x1092))+((px*x1079*x1080))+(((0.169744)*sj4))+(((0.0361)*x1086))+(((-1.0)*x1081*x1091))+(((-1.0)*x1081*x1093))+(((-1.0)*px*x1080*x1089))+(((-1.0)*pz*x1080*x1090))+(((-1.0)*cj0*x1083*x1084))+((x1077*x1086))+((pz*x1084*x1086))+((r02*x1084*x1087))+(((-1.0)*r01*x1094)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1095=((2.42718446601942)*pz);
IkReal x1096=((2.42718446601942)*cj0*px);
IkReal x1097=((2.42718446601942)*py*sj0);
if( IKabs((((cj1*x1096))+((cj1*x1097))+((sj1*x1095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.461165048543689)+((sj1*x1097))+((sj1*x1096))+(((-1.0)*cj1*x1095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1096))+((cj1*x1097))+((sj1*x1095))))+IKsqr(((-0.461165048543689)+((sj1*x1097))+((sj1*x1096))+(((-1.0)*cj1*x1095))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1096))+((cj1*x1097))+((sj1*x1095))), ((-0.461165048543689)+((sj1*x1097))+((sj1*x1096))+(((-1.0)*cj1*x1095))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1098=IKcos(j2);
IkReal x1099=IKsin(j2);
IkReal x1100=pz*pz;
IkReal x1101=py*py;
IkReal x1102=px*px;
IkReal x1103=(cj0*sj1);
IkReal x1104=(sj0*sj1);
IkReal x1105=((0.169744)*cj4);
IkReal x1106=((2.0)*pz);
IkReal x1107=(py*r02);
IkReal x1108=(r02*sj1);
IkReal x1109=(r00*sj1);
IkReal x1110=((1.0)*py);
IkReal x1111=(cj0*cj1);
IkReal x1112=(r01*sj1);
IkReal x1113=(px*r02);
IkReal x1114=((1.0)*pz);
IkReal x1115=(pz*r00);
IkReal x1116=(cj1*sj0);
IkReal x1117=(cj1*r02);
IkReal x1118=((0.38)*pz);
IkReal x1119=((0.0361)*r01);
IkReal x1120=((1.0)*r00);
IkReal x1121=((0.38)*cj0);
IkReal x1122=((0.0361)*r00);
IkReal x1123=(cj1*r01);
IkReal x1124=((1.0)*r01);
IkReal x1125=(px*r00);
IkReal x1126=(r00*x1100);
IkReal x1127=((0.412)*x1099);
IkReal x1128=((1.0)*x1101);
IkReal x1129=((2.0)*px*py);
IkReal x1130=(r01*x1102);
IkReal x1131=((1.0)*x1102);
IkReal x1132=((0.412)*x1098);
evalcond[0]=(((cj4*x1099))+(((-1.0)*x1117))+((r01*x1104))+((r00*x1103)));
evalcond[1]=((-0.19)+(((-1.0)*cj1*x1114))+(((-1.0)*x1132))+((py*x1104))+((px*x1103)));
evalcond[2]=(((cj4*x1098))+(((-1.0)*x1116*x1124))+(((-1.0)*x1108))+(((-1.0)*x1111*x1120)));
evalcond[3]=(x1127+(((-1.0)*sj1*x1114))+(((-1.0)*px*x1111))+(((-1.0)*x1110*x1116)));
evalcond[4]=(((sj4*x1127))+((px*x1123))+((x1104*x1113))+(((-1.0)*x1103*x1107))+(((-1.0)*r00*x1104*x1114))+((pz*r01*x1103))+(((-1.0)*cj1*r00*x1110)));
evalcond[5]=((((-1.0)*x1109*x1110))+(((-1.0)*x1113*x1116))+((sj4*x1132))+(((-0.19)*cj0*r01))+(((-1.0)*r01*x1111*x1114))+(((0.19)*r00*sj0))+((px*x1112))+((x1115*x1116))+((x1107*x1111)));
evalcond[6]=(((r01*x1100*x1104))+(((-1.0)*x1101*x1104*x1124))+(((-1.0)*x1117*x1131))+(((-1.0)*x1103*x1106*x1113))+(((-1.0)*x1117*x1128))+(((-1.0)*x1102*x1103*x1120))+((x1104*x1130))+((py*x1106*x1123))+(((-1.0)*x1104*x1106*x1107))+(((0.38)*x1125))+((r00*x1101*x1103))+((x1103*x1126))+((x1099*x1105))+((cj1*x1106*x1125))+(((-1.0)*x1103*x1122))+(((-1.0)*r01*x1103*x1129))+((x1100*x1117))+(((-1.0)*x1104*x1119))+(((0.0361)*x1117))+(((-2.0)*py*x1104*x1125))+(((0.38)*py*r01))+((r02*x1118)));
evalcond[7]=((((-1.0)*x1100*x1116*x1124))+(((-1.0)*r01*sj0*x1118))+((x1098*x1105))+(((-1.0)*x1100*x1111*x1120))+((x1106*x1107*x1116))+(((0.38)*sj0*x1107))+(((-1.0)*x1116*x1119))+((r01*x1101*x1116))+((x1113*x1121))+(((-1.0)*x1102*x1116*x1124))+((r01*x1111*x1129))+(((-0.0361)*x1108))+(((-1.0)*x1111*x1122))+((py*x1106*x1112))+(((-1.0)*x1101*x1111*x1120))+(((2.0)*py*x1116*x1125))+(((-1.0)*x1108*x1131))+((r00*x1102*x1111))+((x1100*x1108))+(((-1.0)*x1108*x1128))+((x1106*x1111*x1113))+(((-1.0)*x1115*x1121))+((px*x1106*x1109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1133=px*px;
IkReal x1134=pz*pz;
IkReal x1135=py*py;
IkReal x1136=(r01*sj0);
IkReal x1137=((2.0)*py);
IkReal x1138=(r00*sj0);
IkReal x1139=((0.19)*cj1);
IkReal x1140=(py*r02);
IkReal x1141=((0.38)*cj1);
IkReal x1142=((1.0)*pz);
IkReal x1143=(cj0*r01);
IkReal x1144=(px*sj0);
IkReal x1145=((0.19)*sj1);
IkReal x1146=(cj0*r00);
IkReal x1147=(cj0*r02);
IkReal x1148=((1.0)*x1134);
IkReal x1149=((0.38)*py*sj1);
IkReal x1150=((1.0)*x1135);
IkReal x1151=((0.38)*px*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x1144))+((cj0*py)));
evalcond[2]=(x1143+sj4+(((-1.0)*x1138)));
evalcond[3]=(((x1145*x1146))+(((-1.0)*px*r00))+(((-1.0)*r02*x1142))+(((-1.0)*r02*x1139))+(((-1.0)*py*r01))+((x1136*x1145)));
evalcond[4]=((-0.018144)+((cj0*x1151))+(((-1.0)*x1150))+(((-1.0)*x1148))+((sj0*x1149))+(((-1.0)*x1133))+(((-1.0)*pz*x1141)));
evalcond[5]=((((-1.0)*x1136*x1142))+(((-0.134)*cj4))+(((-1.0)*r02*x1145))+((sj0*x1140))+(((-1.0)*x1136*x1139))+(((-1.0)*x1139*x1146))+((px*x1147))+(((-1.0)*x1142*x1146)));
evalcond[6]=((((-1.0)*x1138*x1150))+((x1134*x1143))+(((0.017956)*sj4))+((pz*x1141*x1143))+(((-1.0)*r01*x1151))+(((-1.0)*x1143*x1150))+(((-0.0361)*x1138))+(((-1.0)*pz*x1138*x1141))+((x1133*x1143))+(((-1.0)*pz*x1137*x1147))+(((-1.0)*px*x1137*x1146))+(((2.0)*pz*r02*x1144))+((r02*x1141*x1144))+((px*x1136*x1137))+(((0.0361)*x1143))+((x1133*x1138))+((r00*x1149))+(((-1.0)*cj0*x1140*x1141))+(((-1.0)*x1138*x1148)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1152=((7.46268656716418)*cj1);
IkReal x1153=(py*sj0);
IkReal x1154=(cj0*px);
IkReal x1155=((7.46268656716418)*sj1);
if( IKabs(((((-1.0)*x1152*x1153))+(((-1.0)*x1152*x1154))+(((-1.0)*pz*x1155)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.41791044776119)+((pz*x1152))+(((-1.0)*x1154*x1155))+(((-1.0)*x1153*x1155)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1152*x1153))+(((-1.0)*x1152*x1154))+(((-1.0)*pz*x1155))))+IKsqr(((1.41791044776119)+((pz*x1152))+(((-1.0)*x1154*x1155))+(((-1.0)*x1153*x1155))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1152*x1153))+(((-1.0)*x1152*x1154))+(((-1.0)*pz*x1155))), ((1.41791044776119)+((pz*x1152))+(((-1.0)*x1154*x1155))+(((-1.0)*x1153*x1155))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1156=IKsin(j2);
IkReal x1157=IKcos(j2);
IkReal x1158=pz*pz;
IkReal x1159=py*py;
IkReal x1160=px*px;
IkReal x1161=(cj0*sj1);
IkReal x1162=(r01*sj0);
IkReal x1163=((1.0)*cj1);
IkReal x1164=(r02*sj1);
IkReal x1165=(cj1*r02);
IkReal x1166=((1.0)*sj1);
IkReal x1167=(py*sj1);
IkReal x1168=(py*r00);
IkReal x1169=(px*sj1);
IkReal x1170=((2.0)*pz);
IkReal x1171=(px*r02);
IkReal x1172=(r00*sj0);
IkReal x1173=((2.0)*px);
IkReal x1174=((0.38)*r02);
IkReal x1175=(cj0*r00);
IkReal x1176=(py*sj0);
IkReal x1177=(pz*r01);
IkReal x1178=(py*r01);
IkReal x1179=(cj0*px);
IkReal x1180=((0.0361)*cj1);
IkReal x1181=((0.38)*pz);
IkReal x1182=(cj1*px);
IkReal x1183=(r00*x1158);
IkReal x1184=(r00*x1159);
IkReal x1185=((0.134)*x1157);
IkReal x1186=(cj4*x1157);
IkReal x1187=((0.134)*x1156);
IkReal x1188=((1.0)*x1160);
IkReal x1189=(cj4*x1156);
IkReal x1190=(x1170*x1176);
evalcond[0]=(((sj1*x1162))+(((-1.0)*r02*x1163))+((r00*x1161))+(((-1.0)*x1189)));
evalcond[1]=((-0.19)+x1185+((px*x1161))+((sj0*x1167))+(((-1.0)*pz*x1163)));
evalcond[2]=((((-1.0)*x1163*x1179))+(((-1.0)*x1163*x1176))+(((-1.0)*pz*x1166))+(((-1.0)*x1187)));
evalcond[3]=((((-1.0)*x1162*x1163))+(((-1.0)*x1163*x1175))+(((-1.0)*x1186))+(((-1.0)*x1164)));
evalcond[4]=((((-1.0)*x1163*x1168))+(((-1.0)*py*r02*x1161))+((r01*x1182))+(((-1.0)*sj4*x1187))+((px*sj0*x1164))+((x1161*x1177))+(((-1.0)*pz*x1166*x1172)));
evalcond[5]=((((-1.0)*x1166*x1168))+((cj1*pz*x1172))+((r01*x1169))+(((-1.0)*sj0*x1163*x1171))+(((-0.19)*cj0*r01))+((cj0*py*x1165))+(((-1.0)*cj0*x1163*x1177))+(((-1.0)*sj4*x1185))+(((0.19)*x1172)));
evalcond[6]=((((0.38)*x1178))+(((0.0361)*x1165))+((cj1*x1170*x1178))+(((-1.0)*x1167*x1172*x1173))+(((-0.0361)*sj1*x1162))+((sj1*x1158*x1162))+(((-0.0361)*r00*x1161))+(((0.38)*px*r00))+(((-1.0)*r02*x1160*x1163))+(((-1.0)*r02*x1159*x1163))+((sj1*x1160*x1162))+((x1161*x1184))+((x1161*x1183))+(((-1.0)*x1161*x1170*x1171))+(((-1.0)*x1161*x1173*x1178))+((pz*x1174))+(((-1.0)*x1159*x1162*x1166))+((x1158*x1165))+(((-1.0)*x1164*x1190))+((r00*x1170*x1182))+(((-1.0)*r00*x1161*x1188))+(((-0.017956)*x1189)));
evalcond[7]=((((-1.0)*x1175*x1181))+(((-1.0)*x1175*x1180))+((cj1*x1160*x1175))+((x1174*x1176))+(((-1.0)*x1159*x1164))+((x1165*x1190))+((cj1*sj0*x1168*x1173))+((r01*x1167*x1170))+((cj0*cj1*x1173*x1178))+(((-1.0)*x1158*x1162*x1163))+(((0.38)*cj0*x1171))+((r00*x1169*x1170))+(((-1.0)*x1158*x1163*x1175))+(((-0.0361)*x1164))+((x1165*x1170*x1179))+(((-1.0)*x1162*x1181))+(((-1.0)*x1162*x1180))+(((-1.0)*x1159*x1163*x1175))+(((-1.0)*x1160*x1162*x1163))+((x1158*x1164))+((cj1*x1159*x1162))+(((-1.0)*x1164*x1188))+(((-0.017956)*x1186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1202=IKPowWithIntegerCheck(cj4,-1);
if(!x1202.valid){
continue;
}
IkReal x1191=x1202.value;
IkReal x1192=((1000.0)*cj4);
IkReal x1193=(pz*sj1);
IkReal x1194=(cj1*r02);
IkReal x1195=(cj1*cj3);
IkReal x1196=(cj0*px);
IkReal x1197=((273.0)*cj3);
IkReal x1198=(py*sj0);
IkReal x1199=(cj0*r00*sj1);
IkReal x1200=((-0.00719424460431655)*x1191);
IkReal x1201=(r01*sj0*sj1);
CheckValue<IkReal> x1203=IKPowWithIntegerCheck(sj3,-1);
if(!x1203.valid){
continue;
}
if( IKabs((x1200*(((((273.0)*x1194))+(((-273.0)*x1199))+(((-273.0)*x1201))+(((-1.0)*x1192*x1193))+(((-1.0)*cj1*x1192*x1198))+(((-1.0)*cj1*x1192*x1196)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1200*(x1203.value)*(((((139.0)*x1194))+(((-1.0)*cj3*x1192*x1193))+((x1194*x1197))+(((-1.0)*x1197*x1199))+(((-1.0)*x1192*x1195*x1198))+(((-1.0)*x1192*x1195*x1196))+(((-139.0)*x1199))+(((-1.0)*x1197*x1201))+(((-139.0)*x1201)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1200*(((((273.0)*x1194))+(((-273.0)*x1199))+(((-273.0)*x1201))+(((-1.0)*x1192*x1193))+(((-1.0)*cj1*x1192*x1198))+(((-1.0)*cj1*x1192*x1196))))))+IKsqr((x1200*(x1203.value)*(((((139.0)*x1194))+(((-1.0)*cj3*x1192*x1193))+((x1194*x1197))+(((-1.0)*x1197*x1199))+(((-1.0)*x1192*x1195*x1198))+(((-1.0)*x1192*x1195*x1196))+(((-139.0)*x1199))+(((-1.0)*x1197*x1201))+(((-139.0)*x1201))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x1200*(((((273.0)*x1194))+(((-273.0)*x1199))+(((-273.0)*x1201))+(((-1.0)*x1192*x1193))+(((-1.0)*cj1*x1192*x1198))+(((-1.0)*cj1*x1192*x1196))))), (x1200*(x1203.value)*(((((139.0)*x1194))+(((-1.0)*cj3*x1192*x1193))+((x1194*x1197))+(((-1.0)*x1197*x1199))+(((-1.0)*x1192*x1195*x1198))+(((-1.0)*x1192*x1195*x1196))+(((-139.0)*x1199))+(((-1.0)*x1197*x1201))+(((-139.0)*x1201))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1204=IKcos(j2);
IkReal x1205=IKsin(j2);
IkReal x1206=pz*pz;
IkReal x1207=py*py;
IkReal x1208=px*px;
IkReal x1209=((0.055208)*cj4);
IkReal x1210=(r01*sj0);
IkReal x1211=((1.0)*cj1);
IkReal x1212=((1.0)*sj1);
IkReal x1213=(py*sj1);
IkReal x1214=(cj0*r00);
IkReal x1215=((2.0)*pz);
IkReal x1216=(cj0*sj1);
IkReal x1217=(px*r02);
IkReal x1218=((0.273)*cj3);
IkReal x1219=(cj1*r02);
IkReal x1220=(pz*r01);
IkReal x1221=(py*sj0);
IkReal x1222=(px*r00);
IkReal x1223=((2.0)*cj1);
IkReal x1224=(cj0*py);
IkReal x1225=((0.075894)*cj4);
IkReal x1226=((0.0361)*cj1);
IkReal x1227=((0.38)*r02);
IkReal x1228=((0.0361)*sj1);
IkReal x1229=((0.38)*pz);
IkReal x1230=(cj0*r01);
IkReal x1231=(px*r01);
IkReal x1232=(py*r00);
IkReal x1233=(py*r01);
IkReal x1234=(sj3*x1204);
IkReal x1235=((0.139)*x1205);
IkReal x1236=(sj4*x1205);
IkReal x1237=(sj1*x1206);
IkReal x1238=(pz*r00*sj0);
IkReal x1239=(sj3*x1205);
IkReal x1240=(r02*x1208);
IkReal x1241=((0.139)*x1204);
IkReal x1242=(r02*x1207);
IkReal x1243=(cj3*cj4*x1204);
IkReal x1244=(cj3*cj4*x1205);
evalcond[0]=(x1244+(((-1.0)*r02*x1211))+((sj1*x1214))+((sj1*x1210))+(((-1.0)*cj4*x1234)));
evalcond[1]=(x1243+(((-1.0)*r02*x1212))+((cj4*x1239))+(((-1.0)*x1210*x1211))+(((-1.0)*x1211*x1214)));
evalcond[2]=((-0.19)+(((-1.0)*x1204*x1218))+((px*x1216))+(((-1.0)*x1241))+(((-0.273)*x1239))+((sj0*x1213))+(((-1.0)*pz*x1211)));
evalcond[3]=(x1235+(((-0.273)*x1234))+((x1205*x1218))+(((-1.0)*cj0*px*x1211))+(((-1.0)*pz*x1212))+(((-1.0)*x1211*x1221)));
evalcond[4]=((((-1.0)*r02*x1212*x1224))+((x1216*x1220))+((sj4*x1235))+((x1218*x1236))+((sj0*sj1*x1217))+(((-0.273)*sj4*x1234))+(((-1.0)*x1211*x1232))+((cj1*x1231))+(((-1.0)*x1212*x1238)));
evalcond[5]=(((sj1*x1231))+(((-0.19)*x1230))+((sj4*x1204*x1218))+((x1219*x1224))+(((-1.0)*sj0*x1211*x1217))+(((-1.0)*cj0*x1211*x1220))+(((0.273)*sj3*x1236))+(((0.19)*r00*sj0))+((cj1*x1238))+((sj4*x1241))+(((-1.0)*x1212*x1232)));
evalcond[6]=((((-1.0)*x1210*x1228))+((x1205*x1225))+(((0.0361)*x1219))+((cj1*x1215*x1233))+((cj1*x1215*x1222))+(((-2.0)*px*x1213*x1230))+((pz*x1227))+(((-1.0)*x1214*x1228))+((sj1*x1208*x1210))+(((0.38)*x1222))+(((0.38)*x1233))+(((-1.0)*r02*sj0*x1213*x1215))+(((0.09385)*x1244))+((x1206*x1219))+(((-1.0)*x1209*x1234))+(((-1.0)*x1211*x1242))+(((-1.0)*x1211*x1240))+((sj1*x1207*x1214))+(((-1.0)*x1208*x1212*x1214))+((x1210*x1237))+(((-1.0)*x1207*x1210*x1212))+((x1214*x1237))+(((-1.0)*x1215*x1216*x1217))+(((-2.0)*sj0*x1213*x1222)));
evalcond[7]=((((-1.0)*x1207*x1211*x1214))+((r01*x1213*x1215))+(((-1.0)*x1210*x1229))+(((-1.0)*x1210*x1226))+(((-1.0)*x1206*x1211*x1214))+((cj1*x1207*x1210))+((cj1*x1208*x1214))+(((-1.0)*x1206*x1210*x1211))+(((-1.0)*x1212*x1242))+(((-1.0)*x1212*x1240))+(((-1.0)*x1214*x1226))+(((-1.0)*x1214*x1229))+(((0.09385)*x1243))+((x1215*x1219*x1221))+((x1223*x1224*x1231))+((r02*x1237))+((x1204*x1225))+((x1221*x1227))+((cj0*cj1*x1215*x1217))+((sj1*x1215*x1222))+((x1221*x1222*x1223))+(((-1.0)*x1208*x1210*x1211))+(((0.38)*cj0*x1217))+(((-1.0)*r02*x1228))+((x1209*x1239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1245=((139.0)*sj1);
IkReal x1246=(cj0*r00);
IkReal x1247=(cj1*sj3);
IkReal x1248=(cj3*cj4);
IkReal x1249=((273.0)*r02);
IkReal x1250=(cj1*cj3);
IkReal x1251=(cj4*sj3);
IkReal x1252=(r01*sj0);
IkReal x1253=((273.0)*sj1);
IkReal x1254=((1000.0)*cj4*pz);
IkReal x1255=((1000.0)*py*sj0*sj1);
IkReal x1256=((1000.0)*cj0*px*sj1);
CheckValue<IkReal> x1257=IKPowWithIntegerCheck(IKsign(((((-139.0)*x1248))+(((-273.0)*cj4)))),-1);
if(!x1257.valid){
continue;
}
CheckValue<IkReal> x1258 = IKatan2WithCheck(IkReal(((((-1.0)*x1249*x1250))+((x1247*x1254))+((x1245*x1252))+(((190.0)*x1251))+((cj3*x1246*x1253))+((cj3*x1252*x1253))+(((-1.0)*x1251*x1255))+(((-1.0)*x1251*x1256))+((x1245*x1246))+(((-139.0)*cj1*r02)))),((((-1.0)*x1248*x1256))+(((-1.0)*x1248*x1255))+((x1247*x1249))+(((-1.0)*sj3*x1252*x1253))+(((1000.0)*cj1*pz*x1248))+(((190.0)*x1248))+(((-1.0)*sj3*x1246*x1253))),IKFAST_ATAN2_MAGTHRESH);
if(!x1258.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1257.value)))+(x1258.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1259=IKcos(j2);
IkReal x1260=IKsin(j2);
IkReal x1261=pz*pz;
IkReal x1262=py*py;
IkReal x1263=px*px;
IkReal x1264=((0.055208)*cj4);
IkReal x1265=(r01*sj0);
IkReal x1266=((1.0)*cj1);
IkReal x1267=((1.0)*sj1);
IkReal x1268=(py*sj1);
IkReal x1269=(cj0*r00);
IkReal x1270=((2.0)*pz);
IkReal x1271=(cj0*sj1);
IkReal x1272=(px*r02);
IkReal x1273=((0.273)*cj3);
IkReal x1274=(cj1*r02);
IkReal x1275=(pz*r01);
IkReal x1276=(py*sj0);
IkReal x1277=(px*r00);
IkReal x1278=((2.0)*cj1);
IkReal x1279=(cj0*py);
IkReal x1280=((0.075894)*cj4);
IkReal x1281=((0.0361)*cj1);
IkReal x1282=((0.38)*r02);
IkReal x1283=((0.0361)*sj1);
IkReal x1284=((0.38)*pz);
IkReal x1285=(cj0*r01);
IkReal x1286=(px*r01);
IkReal x1287=(py*r00);
IkReal x1288=(py*r01);
IkReal x1289=(sj3*x1259);
IkReal x1290=((0.139)*x1260);
IkReal x1291=(sj4*x1260);
IkReal x1292=(sj1*x1261);
IkReal x1293=(pz*r00*sj0);
IkReal x1294=(sj3*x1260);
IkReal x1295=(r02*x1263);
IkReal x1296=((0.139)*x1259);
IkReal x1297=(r02*x1262);
IkReal x1298=(cj3*cj4*x1259);
IkReal x1299=(cj3*cj4*x1260);
evalcond[0]=(x1299+((sj1*x1269))+((sj1*x1265))+(((-1.0)*r02*x1266))+(((-1.0)*cj4*x1289)));
evalcond[1]=(x1298+(((-1.0)*x1266*x1269))+(((-1.0)*x1265*x1266))+(((-1.0)*r02*x1267))+((cj4*x1294)));
evalcond[2]=((-0.19)+(((-1.0)*x1259*x1273))+(((-1.0)*x1296))+(((-0.273)*x1294))+((sj0*x1268))+((px*x1271))+(((-1.0)*pz*x1266)));
evalcond[3]=(x1290+(((-1.0)*x1266*x1276))+((x1260*x1273))+(((-1.0)*cj0*px*x1266))+(((-0.273)*x1289))+(((-1.0)*pz*x1267)));
evalcond[4]=((((-1.0)*x1266*x1287))+((x1273*x1291))+(((-0.273)*sj4*x1289))+((x1271*x1275))+((sj4*x1290))+(((-1.0)*x1267*x1293))+((sj0*sj1*x1272))+((cj1*x1286))+(((-1.0)*r02*x1267*x1279)));
evalcond[5]=((((0.273)*sj3*x1291))+(((-0.19)*x1285))+(((-1.0)*sj0*x1266*x1272))+((sj4*x1259*x1273))+(((-1.0)*x1267*x1287))+((x1274*x1279))+((cj1*x1293))+((sj4*x1296))+(((0.19)*r00*sj0))+((sj1*x1286))+(((-1.0)*cj0*x1266*x1275)));
evalcond[6]=((((-1.0)*x1270*x1271*x1272))+(((0.09385)*x1299))+(((-1.0)*x1264*x1289))+((x1269*x1292))+((x1261*x1274))+(((-1.0)*x1269*x1283))+(((-2.0)*sj0*x1268*x1277))+(((-1.0)*x1266*x1295))+(((-1.0)*x1266*x1297))+((sj1*x1263*x1265))+(((-1.0)*x1263*x1267*x1269))+(((-1.0)*x1262*x1265*x1267))+((sj1*x1262*x1269))+(((0.0361)*x1274))+((cj1*x1270*x1277))+((x1260*x1280))+(((-1.0)*r02*sj0*x1268*x1270))+((x1265*x1292))+(((0.38)*x1277))+((pz*x1282))+(((-2.0)*px*x1268*x1285))+((cj1*x1270*x1288))+(((-1.0)*x1265*x1283))+(((0.38)*x1288)));
evalcond[7]=((((-1.0)*r02*x1283))+(((-1.0)*x1262*x1266*x1269))+((x1276*x1277*x1278))+(((-1.0)*x1261*x1265*x1266))+((sj1*x1270*x1277))+(((0.09385)*x1298))+((x1264*x1294))+((x1278*x1279*x1286))+(((-1.0)*x1269*x1281))+(((-1.0)*x1269*x1284))+((x1276*x1282))+(((-1.0)*x1263*x1265*x1266))+((r01*x1268*x1270))+((r02*x1292))+(((-1.0)*x1261*x1266*x1269))+(((-1.0)*x1267*x1295))+(((-1.0)*x1267*x1297))+((x1259*x1280))+((cj1*x1263*x1269))+((cj0*cj1*x1270*x1272))+(((0.38)*cj0*x1272))+((cj1*x1262*x1265))+(((-1.0)*x1265*x1284))+(((-1.0)*x1265*x1281))+((x1270*x1274*x1276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1300=((1.0)*sj1);
IkReal x1301=(cj1*sj3);
IkReal x1302=(cj0*r00);
IkReal x1303=(cj3*r02);
IkReal x1304=(r01*sj0);
IkReal x1305=(sj1*sj3);
IkReal x1306=(cj3*x1304);
CheckValue<IkReal> x1307=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1307.valid){
continue;
}
CheckValue<IkReal> x1308 = IKatan2WithCheck(IkReal(((((-1.0)*x1300*x1306))+((cj1*x1303))+((r02*x1305))+(((-1.0)*cj3*x1300*x1302))+((x1301*x1302))+((x1301*x1304)))),(((cj1*cj3*x1302))+(((-1.0)*r02*x1301))+((cj1*x1306))+((x1302*x1305))+((x1304*x1305))+((sj1*x1303))),IKFAST_ATAN2_MAGTHRESH);
if(!x1308.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1307.value)))+(x1308.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1309=IKcos(j2);
IkReal x1310=IKsin(j2);
IkReal x1311=pz*pz;
IkReal x1312=py*py;
IkReal x1313=px*px;
IkReal x1314=((0.055208)*cj4);
IkReal x1315=(r01*sj0);
IkReal x1316=((1.0)*cj1);
IkReal x1317=((1.0)*sj1);
IkReal x1318=(py*sj1);
IkReal x1319=(cj0*r00);
IkReal x1320=((2.0)*pz);
IkReal x1321=(cj0*sj1);
IkReal x1322=(px*r02);
IkReal x1323=((0.273)*cj3);
IkReal x1324=(cj1*r02);
IkReal x1325=(pz*r01);
IkReal x1326=(py*sj0);
IkReal x1327=(px*r00);
IkReal x1328=((2.0)*cj1);
IkReal x1329=(cj0*py);
IkReal x1330=((0.075894)*cj4);
IkReal x1331=((0.0361)*cj1);
IkReal x1332=((0.38)*r02);
IkReal x1333=((0.0361)*sj1);
IkReal x1334=((0.38)*pz);
IkReal x1335=(cj0*r01);
IkReal x1336=(px*r01);
IkReal x1337=(py*r00);
IkReal x1338=(py*r01);
IkReal x1339=(sj3*x1309);
IkReal x1340=((0.139)*x1310);
IkReal x1341=(sj4*x1310);
IkReal x1342=(sj1*x1311);
IkReal x1343=(pz*r00*sj0);
IkReal x1344=(sj3*x1310);
IkReal x1345=(r02*x1313);
IkReal x1346=((0.139)*x1309);
IkReal x1347=(r02*x1312);
IkReal x1348=(cj3*cj4*x1309);
IkReal x1349=(cj3*cj4*x1310);
evalcond[0]=(x1349+(((-1.0)*cj4*x1339))+(((-1.0)*r02*x1316))+((sj1*x1319))+((sj1*x1315)));
evalcond[1]=(x1348+(((-1.0)*x1315*x1316))+(((-1.0)*r02*x1317))+((cj4*x1344))+(((-1.0)*x1316*x1319)));
evalcond[2]=((-0.19)+(((-1.0)*x1309*x1323))+(((-1.0)*x1346))+((px*x1321))+(((-0.273)*x1344))+(((-1.0)*pz*x1316))+((sj0*x1318)));
evalcond[3]=(x1340+(((-1.0)*cj0*px*x1316))+(((-1.0)*pz*x1317))+(((-1.0)*x1316*x1326))+(((-0.273)*x1339))+((x1310*x1323)));
evalcond[4]=((((-1.0)*x1316*x1337))+(((-1.0)*x1317*x1343))+((sj4*x1340))+((x1323*x1341))+((cj1*x1336))+((sj0*sj1*x1322))+((x1321*x1325))+(((-1.0)*r02*x1317*x1329))+(((-0.273)*sj4*x1339)));
evalcond[5]=((((-1.0)*cj0*x1316*x1325))+(((-1.0)*sj0*x1316*x1322))+((cj1*x1343))+((sj4*x1346))+((x1324*x1329))+((sj4*x1309*x1323))+((sj1*x1336))+(((0.273)*sj3*x1341))+(((0.19)*r00*sj0))+(((-0.19)*x1335))+(((-1.0)*x1317*x1337)));
evalcond[6]=((((0.38)*x1338))+(((-2.0)*px*x1318*x1335))+(((-1.0)*x1319*x1333))+(((-1.0)*r02*sj0*x1318*x1320))+((pz*x1332))+((sj1*x1312*x1319))+(((-1.0)*x1316*x1345))+(((-1.0)*x1316*x1347))+((cj1*x1320*x1327))+((sj1*x1313*x1315))+((cj1*x1320*x1338))+(((-1.0)*x1313*x1317*x1319))+(((0.0361)*x1324))+(((-1.0)*x1320*x1321*x1322))+(((-1.0)*x1312*x1315*x1317))+(((0.09385)*x1349))+(((-1.0)*x1314*x1339))+((x1310*x1330))+((x1315*x1342))+(((-1.0)*x1315*x1333))+(((-2.0)*sj0*x1318*x1327))+((x1319*x1342))+(((0.38)*x1327))+((x1311*x1324)));
evalcond[7]=(((sj1*x1320*x1327))+(((-1.0)*x1313*x1315*x1316))+((cj0*cj1*x1320*x1322))+(((-1.0)*x1319*x1334))+(((-1.0)*x1319*x1331))+(((-1.0)*x1317*x1347))+(((-1.0)*x1317*x1345))+((x1328*x1329*x1336))+(((-1.0)*x1311*x1315*x1316))+((x1309*x1330))+((x1314*x1344))+((r02*x1342))+(((0.38)*cj0*x1322))+((x1326*x1332))+(((-1.0)*x1312*x1316*x1319))+(((0.09385)*x1348))+(((-1.0)*r02*x1333))+((x1320*x1324*x1326))+((x1326*x1327*x1328))+(((-1.0)*x1315*x1331))+(((-1.0)*x1315*x1334))+((r01*x1318*x1320))+((cj1*x1312*x1315))+((cj1*x1313*x1319))+(((-1.0)*x1311*x1316*x1319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1350=((1000.0)*r02);
IkReal x1351=((1000.0)*r00);
IkReal x1352=((1000.0)*r01);
IkReal x1353=((190.0)*r02);
IkReal x1354=((190.0)*r01*sj0);
IkReal x1355=((190.0)*cj0*r00);
CheckValue<IkReal> x1356=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1356.valid){
continue;
}
CheckValue<IkReal> x1357 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x1355))+(((-1.0)*sj1*x1354))+((cj1*x1353))+((px*x1351))+((pz*x1350))+((py*x1352)))),(((cj0*px*x1350))+(((-1.0)*sj1*x1353))+(((-1.0)*cj0*pz*x1351))+(((-1.0)*cj1*x1354))+(((-1.0)*cj1*x1355))+((py*sj0*x1350))+(((-1.0)*pz*sj0*x1352))+(((-273.0)*cj4))),IKFAST_ATAN2_MAGTHRESH);
if(!x1357.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1356.value)))+(x1357.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1358=IKcos(j3);
IkReal x1359=px*px;
IkReal x1360=pz*pz;
IkReal x1361=py*py;
IkReal x1362=(r01*sj0);
IkReal x1363=((2.0)*py);
IkReal x1364=(r00*sj0);
IkReal x1365=((0.19)*cj1);
IkReal x1366=(py*r02);
IkReal x1367=((0.38)*cj1);
IkReal x1368=((1.0)*pz);
IkReal x1369=(cj0*r01);
IkReal x1370=((0.19)*sj1);
IkReal x1371=((0.139)*cj4);
IkReal x1372=(cj0*r00);
IkReal x1373=(cj0*r02);
IkReal x1374=((1.0)*x1360);
IkReal x1375=((0.38)*py*sj1);
IkReal x1376=((1.0)*x1361);
IkReal x1377=((0.075894)*x1358);
IkReal x1378=((0.38)*px*sj1);
IkReal x1379=(px*r02*sj0);
evalcond[0]=((((-1.0)*r02*x1368))+(((-1.0)*r02*x1365))+(((-1.0)*px*r00))+((x1371*(IKsin(j3))))+((x1362*x1370))+((x1370*x1372))+(((-1.0)*py*r01)));
evalcond[1]=((0.05775)+(((-1.0)*pz*x1367))+x1377+(((-1.0)*x1359))+(((-1.0)*x1376))+(((-1.0)*x1374))+((cj0*x1378))+((sj0*x1375)));
evalcond[2]=((((-1.0)*x1365*x1372))+((px*x1373))+((sj0*x1366))+(((-1.0)*x1358*x1371))+(((-1.0)*r02*x1370))+(((-1.0)*x1362*x1365))+(((-1.0)*x1362*x1368))+(((-0.273)*cj4))+(((-1.0)*x1368*x1372)));
evalcond[3]=((((-1.0)*r01*x1378))+(((0.0361)*x1369))+((x1360*x1369))+((px*x1362*x1363))+(((0.09385)*sj4))+((x1367*x1379))+((x1359*x1369))+((x1359*x1364))+((pz*x1367*x1369))+(((2.0)*pz*x1379))+(((-1.0)*px*x1363*x1372))+(((-1.0)*x1364*x1374))+(((-1.0)*x1364*x1376))+((sj4*x1377))+(((-1.0)*pz*x1363*x1373))+(((-1.0)*pz*x1364*x1367))+(((-1.0)*cj0*x1366*x1367))+(((-0.0361)*x1364))+(((-1.0)*x1369*x1376))+((r00*x1375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x1380=(cj3*cj4);
j2eval[0]=((((-1.96402877697842)*cj4))+(((-1.0)*x1380)));
j2eval[1]=IKsign(((((-139.0)*x1380))+(((-273.0)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
bool bgotonextstatement = true;
do
{
IkReal x1381=px*px;
IkReal x1382=((0.075894)*cj3);
IkReal x1383=pz*pz;
IkReal x1384=py*py;
IkReal x1385=(r01*sj0);
IkReal x1386=((0.19)*cj1);
IkReal x1387=((1.0)*cj1);
IkReal x1388=(py*r02);
IkReal x1389=((1.0)*sj1);
IkReal x1390=((0.38)*cj0);
IkReal x1391=(px*r02);
IkReal x1392=(py*r01);
IkReal x1393=((1.0)*sj0);
IkReal x1394=(cj1*r02);
IkReal x1395=((0.38)*sj1);
IkReal x1396=(r00*sj0);
IkReal x1397=(cj0*r01);
IkReal x1398=((1.0)*pz);
IkReal x1399=((0.0361)*cj1);
IkReal x1400=(cj0*r00);
IkReal x1401=((0.38)*sj0);
IkReal x1402=(r02*sj1);
IkReal x1403=(pz*r00);
IkReal x1404=(px*r00);
IkReal x1405=((0.19)*sj1);
IkReal x1406=((2.0)*cj1);
IkReal x1407=(pz*sj0);
IkReal x1408=(cj0*sj1);
IkReal x1409=((0.0361)*sj1);
IkReal x1410=((0.38)*pz);
IkReal x1411=(cj0*pz);
IkReal x1412=(r00*x1384);
IkReal x1413=((2.0)*pz*sj1);
IkReal x1414=(cj0*x1383);
IkReal x1415=((2.0)*px*py);
IkReal x1416=(cj1*x1410);
IkReal x1417=(r02*x1381);
IkReal x1418=((1.0)*x1384);
IkReal x1419=(r02*x1384);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*px*x1393))+((cj0*py)));
evalcond[2]=((1.0)+x1397+(((-1.0)*r00*x1393)));
evalcond[3]=((((-1.0)*r02*x1387))+((sj1*x1385))+((sj1*x1400)));
evalcond[4]=((((-1.0)*r02*x1389))+(((-1.0)*x1387*x1400))+(((-1.0)*x1385*x1387)));
evalcond[5]=(((x1385*x1405))+(((-1.0)*x1404))+(((-1.0)*r02*x1398))+(((-1.0)*r02*x1386))+(((-1.0)*x1392))+((x1400*x1405)));
evalcond[6]=((0.05775)+x1382+((px*sj1*x1390))+(((-1.0)*x1418))+(((-1.0)*x1416))+((py*sj0*x1395))+(((-1.0)*x1381))+(((-1.0)*x1383)));
evalcond[7]=((((-1.0)*x1385*x1398))+(((-1.0)*x1398*x1400))+((cj0*x1391))+((sj0*x1388))+(((-0.19)*x1402))+(((-1.0)*x1386*x1400))+(((-1.0)*x1385*x1386)));
evalcond[8]=((0.09385)+x1382+(((-0.0361)*x1396))+(((-1.0)*x1400*x1415))+(((2.0)*x1391*x1407))+(((-1.0)*r00*x1383*x1393))+((cj1*pz*r01*x1390))+((cj1*x1391*x1401))+(((-1.0)*cj1*x1388*x1390))+((py*r00*x1395))+((x1385*x1415))+(((-1.0)*px*r01*x1395))+(((-1.0)*x1393*x1412))+(((-2.0)*x1388*x1411))+(((0.0361)*x1397))+(((-1.0)*x1396*x1416))+(((-1.0)*x1397*x1418))+((x1383*x1397))+((x1381*x1397))+((x1381*x1396)));
evalcond[9]=((((0.38)*x1404))+(((-2.0)*px*x1392*x1408))+((pz*x1392*x1406))+((px*x1403*x1406))+(((-1.0)*x1384*x1385*x1389))+(((-1.0)*x1381*x1389*x1400))+(((-2.0)*pz*x1391*x1408))+(((0.38)*x1392))+((sj1*x1383*x1400))+(((-1.0)*x1400*x1409))+((sj1*x1384*x1400))+((r02*x1410))+(((-1.0)*x1385*x1409))+(((0.0361)*x1394))+((sj1*x1381*x1385))+(((-1.0)*sj1*x1396*x1415))+((x1383*x1394))+(((-1.0)*x1387*x1417))+(((-1.0)*x1387*x1419))+(((-2.0)*sj1*x1388*x1407))+((sj1*x1383*x1385)));
evalcond[10]=((((-1.0)*x1385*x1399))+((x1392*x1413))+((cj1*x1381*x1400))+(((-1.0)*x1381*x1385*x1387))+((cj0*px*x1392*x1406))+((x1388*x1406*x1407))+(((-1.0)*x1390*x1403))+(((-1.0)*x1389*x1417))+(((-1.0)*x1389*x1419))+(((-1.0)*x1399*x1400))+((x1391*x1406*x1411))+((x1390*x1391))+(((-0.0361)*x1402))+(((-1.0)*x1383*x1385*x1387))+(((-1.0)*x1384*x1387*x1400))+(((2.0)*px*sj1*x1403))+((px*py*x1396*x1406))+((x1388*x1401))+((cj1*x1384*x1385))+(((-1.0)*x1383*x1387*x1400))+((x1383*x1402))+(((-1.0)*x1385*x1410)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.23659314306796)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-93850.0)+(((-75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((1.23659314306796)+cj3);
j2eval[1]=IKsign(((93850.0)+(((75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1420=(cj1*py);
IkReal x1421=(pz*sj1);
IkReal x1422=((273000.0)*cj3);
IkReal x1423=(py*sj1);
IkReal x1424=((139000.0)*sj0);
IkReal x1425=((273000.0)*sj3);
IkReal x1426=(cj1*pz);
IkReal x1427=((139000.0)*cj0);
IkReal x1428=(cj0*r02);
IkReal x1429=(r00*x1425);
IkReal x1430=((273000.0)*cj0*r01);
IkReal x1431=(cj1*px*r01);
IkReal x1432=((273000.0)*cj0*px*sj1);
IkReal x1433=(px*r02*sj0*sj1);
CheckValue<IkReal> x1434 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x1421*x1427))+(((-1.0)*x1422*x1433))+(((-1.0)*x1422*x1431))+((cj0*px*sj1*x1425))+(((-1.0)*x1425*x1426))+(((-139000.0)*x1431))+((sj0*x1423*x1425))+((r00*x1420*x1422))+(((-1.0)*px*r02*sj1*x1424))+((r00*sj0*x1421*x1422))+(((139000.0)*r00*x1420))+(((-51870.0)*sj3))+((r02*x1423*x1427))+(((-1.0)*cj0*r01*x1421*x1422))+((r00*x1421*x1424))+((x1422*x1423*x1428)))),((-26410.0)+(((-1.0)*sj0*x1421*x1429))+((sj0*x1422*x1423))+((x1423*x1424))+((cj0*px*sj1*x1422))+(((-1.0)*x1420*x1429))+((x1425*x1431))+((x1425*x1433))+(((-1.0)*x1422*x1426))+(((-1.0)*x1423*x1425*x1428))+((cj0*r01*x1421*x1425))+(((-139000.0)*x1426))+((px*sj1*x1427))+(((-51870.0)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x1434.valid){
continue;
}
CheckValue<IkReal> x1435=IKPowWithIntegerCheck(IKsign(((93850.0)+(((75894.0)*cj3)))),-1);
if(!x1435.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1434.value)+(((1.5707963267949)*(x1435.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1436=IKcos(j2);
IkReal x1437=IKsin(j2);
IkReal x1438=(px*sj1);
IkReal x1439=((0.273)*cj3);
IkReal x1440=(py*sj1);
IkReal x1441=((1.0)*r00);
IkReal x1442=(cj1*sj0);
IkReal x1443=((1.0)*px);
IkReal x1444=((1.0)*pz);
IkReal x1445=(cj0*r01);
IkReal x1446=(pz*sj1);
IkReal x1447=((0.273)*sj3);
IkReal x1448=(cj0*cj1);
IkReal x1449=((0.139)*x1437);
IkReal x1450=((0.139)*x1436);
IkReal x1451=(x1437*x1439);
IkReal x1452=(x1436*x1447);
IkReal x1453=(x1437*x1447);
IkReal x1454=(x1436*x1439);
IkReal x1455=(x1451+x1449);
IkReal x1456=(x1454+x1450+x1453);
evalcond[0]=((-0.19)+(((-1.0)*x1456))+((sj0*x1440))+((cj0*x1438))+(((-1.0)*cj1*x1444)));
evalcond[1]=((((-1.0)*x1452))+(((-1.0)*sj1*x1444))+(((-1.0)*py*x1442))+x1455+(((-1.0)*x1443*x1448)));
evalcond[2]=(((x1445*x1446))+(((-1.0)*x1452))+x1455+(((-1.0)*sj0*x1441*x1446))+((cj1*px*r01))+((r02*sj0*x1438))+(((-1.0)*cj1*py*x1441))+(((-1.0)*cj0*r02*x1440)));
evalcond[3]=((((-1.0)*r02*x1442*x1443))+(((-1.0)*cj1*x1444*x1445))+((r01*x1438))+((py*r02*x1448))+x1456+(((0.19)*r00*sj0))+((pz*r00*x1442))+(((-1.0)*x1440*x1441))+(((-0.19)*x1445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1457=((139000.0)*cj1);
IkReal x1458=(py*sj0);
IkReal x1459=(cj0*px);
IkReal x1460=((273000.0)*cj3);
IkReal x1461=((139000.0)*sj1);
IkReal x1462=((273000.0)*cj1*sj3);
IkReal x1463=((273000.0)*sj1*sj3);
CheckValue<IkReal> x1464 = IKatan2WithCheck(IkReal(((((-1.0)*x1457*x1458))+(((-1.0)*x1457*x1459))+(((-1.0)*pz*x1461))+(((-1.0)*x1458*x1463))+(((-1.0)*cj1*x1459*x1460))+((pz*x1462))+(((-1.0)*x1459*x1463))+(((51870.0)*sj3))+(((-1.0)*pz*sj1*x1460))+(((-1.0)*cj1*x1458*x1460)))),((26410.0)+(((-1.0)*x1458*x1461))+((pz*x1463))+(((-1.0)*sj1*x1458*x1460))+(((-1.0)*x1459*x1461))+((pz*x1457))+((x1459*x1462))+((cj1*pz*x1460))+(((-1.0)*sj1*x1459*x1460))+((x1458*x1462))+(((51870.0)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x1464.valid){
continue;
}
CheckValue<IkReal> x1465=IKPowWithIntegerCheck(IKsign(((-93850.0)+(((-75894.0)*cj3)))),-1);
if(!x1465.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1464.value)+(((1.5707963267949)*(x1465.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1466=IKcos(j2);
IkReal x1467=IKsin(j2);
IkReal x1468=(px*sj1);
IkReal x1469=((0.273)*cj3);
IkReal x1470=(py*sj1);
IkReal x1471=((1.0)*r00);
IkReal x1472=(cj1*sj0);
IkReal x1473=((1.0)*px);
IkReal x1474=((1.0)*pz);
IkReal x1475=(cj0*r01);
IkReal x1476=(pz*sj1);
IkReal x1477=((0.273)*sj3);
IkReal x1478=(cj0*cj1);
IkReal x1479=((0.139)*x1467);
IkReal x1480=((0.139)*x1466);
IkReal x1481=(x1467*x1469);
IkReal x1482=(x1466*x1477);
IkReal x1483=(x1467*x1477);
IkReal x1484=(x1466*x1469);
IkReal x1485=(x1479+x1481);
IkReal x1486=(x1483+x1480+x1484);
evalcond[0]=((-0.19)+(((-1.0)*x1486))+((sj0*x1470))+((cj0*x1468))+(((-1.0)*cj1*x1474)));
evalcond[1]=((((-1.0)*x1482))+(((-1.0)*sj1*x1474))+(((-1.0)*py*x1472))+x1485+(((-1.0)*x1473*x1478)));
evalcond[2]=((((-1.0)*cj1*py*x1471))+(((-1.0)*cj0*r02*x1470))+(((-1.0)*x1482))+((r02*sj0*x1468))+x1485+(((-1.0)*sj0*x1471*x1476))+((cj1*px*r01))+((x1475*x1476)));
evalcond[3]=((((-1.0)*x1470*x1471))+((r01*x1468))+(((-1.0)*cj1*x1474*x1475))+((py*r02*x1478))+x1486+(((-1.0)*r02*x1472*x1473))+(((0.19)*r00*sj0))+((pz*r00*x1472))+(((-0.19)*x1475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1487=px*px;
IkReal x1488=pz*pz;
IkReal x1489=py*py;
IkReal x1490=((0.075894)*cj3);
IkReal x1491=(r01*sj0);
IkReal x1492=((0.19)*cj1);
IkReal x1493=((1.0)*cj1);
IkReal x1494=(py*r02);
IkReal x1495=((1.0)*sj1);
IkReal x1496=((0.38)*cj0);
IkReal x1497=(px*r02);
IkReal x1498=(py*r01);
IkReal x1499=((1.0)*sj0);
IkReal x1500=(cj1*r02);
IkReal x1501=((0.38)*sj1);
IkReal x1502=(r00*sj0);
IkReal x1503=(cj0*r01);
IkReal x1504=((1.0)*pz);
IkReal x1505=((0.0361)*cj1);
IkReal x1506=(cj0*r00);
IkReal x1507=((0.38)*sj0);
IkReal x1508=(r02*sj1);
IkReal x1509=(pz*r00);
IkReal x1510=(px*r00);
IkReal x1511=((0.19)*sj1);
IkReal x1512=((2.0)*cj1);
IkReal x1513=(pz*sj0);
IkReal x1514=(cj0*sj1);
IkReal x1515=((0.0361)*sj1);
IkReal x1516=((0.38)*pz);
IkReal x1517=(cj0*pz);
IkReal x1518=(r00*x1489);
IkReal x1519=((2.0)*pz*sj1);
IkReal x1520=(cj0*x1488);
IkReal x1521=((2.0)*px*py);
IkReal x1522=(cj1*x1516);
IkReal x1523=(r02*x1487);
IkReal x1524=((1.0)*x1489);
IkReal x1525=(r02*x1489);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*px*x1499))+((cj0*py)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x1499))+x1503);
evalcond[3]=(((sj1*x1491))+((sj1*x1506))+(((-1.0)*r02*x1493)));
evalcond[4]=((((-1.0)*r02*x1495))+(((-1.0)*x1491*x1493))+(((-1.0)*x1493*x1506)));
evalcond[5]=((((-1.0)*x1510))+((x1506*x1511))+(((-1.0)*x1498))+(((-1.0)*r02*x1504))+((x1491*x1511))+(((-1.0)*r02*x1492)));
evalcond[6]=((0.05775)+(((-1.0)*x1524))+(((-1.0)*x1522))+((px*sj1*x1496))+(((-1.0)*x1488))+(((-1.0)*x1487))+((py*sj0*x1501))+x1490);
evalcond[7]=((((-1.0)*x1504*x1506))+((sj0*x1494))+(((-1.0)*x1491*x1504))+(((-1.0)*x1491*x1492))+((cj0*x1497))+(((-0.19)*x1508))+(((-1.0)*x1492*x1506)));
evalcond[8]=((-0.09385)+(((-1.0)*x1499*x1518))+(((2.0)*x1497*x1513))+((cj1*x1497*x1507))+((x1488*x1503))+(((-0.0361)*x1502))+(((-1.0)*x1506*x1521))+(((-1.0)*x1490))+(((-2.0)*x1494*x1517))+((x1487*x1503))+((x1487*x1502))+((py*r00*x1501))+((cj1*pz*r01*x1496))+(((-1.0)*x1502*x1522))+((x1491*x1521))+(((-1.0)*x1503*x1524))+(((0.0361)*x1503))+(((-1.0)*r00*x1488*x1499))+(((-1.0)*cj1*x1494*x1496))+(((-1.0)*px*r01*x1501)));
evalcond[9]=(((sj1*x1488*x1506))+(((-2.0)*pz*x1497*x1514))+((x1488*x1500))+(((-1.0)*x1489*x1491*x1495))+(((0.38)*x1498))+(((-1.0)*x1506*x1515))+(((-1.0)*x1491*x1515))+(((-2.0)*px*x1498*x1514))+(((-1.0)*x1487*x1495*x1506))+((sj1*x1487*x1491))+(((-2.0)*sj1*x1494*x1513))+(((0.38)*x1510))+((r02*x1516))+(((-1.0)*sj1*x1502*x1521))+((sj1*x1488*x1491))+(((0.0361)*x1500))+(((-1.0)*x1493*x1523))+(((-1.0)*x1493*x1525))+((pz*x1498*x1512))+((px*x1509*x1512))+((sj1*x1489*x1506)));
evalcond[10]=(((x1494*x1507))+((x1498*x1519))+(((-1.0)*x1488*x1491*x1493))+((x1488*x1508))+(((-0.0361)*x1508))+(((2.0)*px*sj1*x1509))+(((-1.0)*x1488*x1493*x1506))+((x1494*x1512*x1513))+((px*py*x1502*x1512))+(((-1.0)*x1491*x1516))+((cj0*px*x1498*x1512))+(((-1.0)*x1491*x1505))+((x1496*x1497))+((cj1*x1487*x1506))+(((-1.0)*x1489*x1493*x1506))+(((-1.0)*x1495*x1525))+(((-1.0)*x1495*x1523))+((cj1*x1489*x1491))+(((-1.0)*x1487*x1491*x1493))+((x1497*x1512*x1517))+(((-1.0)*x1496*x1509))+(((-1.0)*x1505*x1506)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.23659314306796)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-93850.0)+(((-75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((1.23659314306796)+cj3);
j2eval[1]=IKsign(((93850.0)+(((75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1526=((273000.0)*sj3);
IkReal x1527=((273000.0)*cj3);
IkReal x1528=(pz*r00);
IkReal x1529=(px*r02);
IkReal x1530=(sj0*sj1);
IkReal x1531=(cj1*pz);
IkReal x1532=(cj1*py*r00);
IkReal x1533=((139000.0)*x1530);
IkReal x1534=(cj0*px*sj1);
IkReal x1535=(cj1*px*r01);
IkReal x1536=(cj0*pz*r01*sj1);
IkReal x1537=(cj0*py*r02*sj1);
CheckValue<IkReal> x1538 = IKatan2WithCheck(IkReal(((((-139000.0)*x1537))+(((-139000.0)*x1532))+(((-51870.0)*sj3))+(((139000.0)*x1535))+(((139000.0)*x1536))+((x1527*x1536))+((x1527*x1535))+((x1527*x1529*x1530))+((x1526*x1534))+((x1529*x1533))+(((-1.0)*x1528*x1533))+(((-1.0)*x1527*x1537))+(((-1.0)*x1527*x1532))+((py*x1526*x1530))+(((-1.0)*x1526*x1531))+(((-1.0)*x1527*x1528*x1530)))),((-26410.0)+(((-139000.0)*x1531))+((x1526*x1528*x1530))+(((139000.0)*x1534))+((x1527*x1534))+(((-1.0)*x1526*x1529*x1530))+((x1526*x1537))+((x1526*x1532))+(((-1.0)*x1527*x1531))+((py*x1533))+(((-1.0)*x1526*x1535))+(((-1.0)*x1526*x1536))+(((-51870.0)*cj3))+((py*x1527*x1530))),IKFAST_ATAN2_MAGTHRESH);
if(!x1538.valid){
continue;
}
CheckValue<IkReal> x1539=IKPowWithIntegerCheck(IKsign(((93850.0)+(((75894.0)*cj3)))),-1);
if(!x1539.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1538.value)+(((1.5707963267949)*(x1539.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1540=IKcos(j2);
IkReal x1541=IKsin(j2);
IkReal x1542=(px*sj1);
IkReal x1543=((0.273)*cj3);
IkReal x1544=(py*sj1);
IkReal x1545=((1.0)*r00);
IkReal x1546=(cj1*sj0);
IkReal x1547=((1.0)*px);
IkReal x1548=((1.0)*pz);
IkReal x1549=(cj0*r01);
IkReal x1550=(pz*sj1);
IkReal x1551=((0.273)*sj3);
IkReal x1552=(cj0*cj1);
IkReal x1553=((0.139)*x1541);
IkReal x1554=((0.139)*x1540);
IkReal x1555=(x1540*x1551);
IkReal x1556=(x1541*x1543);
IkReal x1557=(x1541*x1551);
IkReal x1558=(x1540*x1543);
IkReal x1559=(x1553+x1556);
IkReal x1560=(x1554+x1557+x1558);
evalcond[0]=((-0.19)+(((-1.0)*cj1*x1548))+((sj0*x1544))+((cj0*x1542))+(((-1.0)*x1560)));
evalcond[1]=((((-1.0)*py*x1546))+x1559+(((-1.0)*x1555))+(((-1.0)*x1547*x1552))+(((-1.0)*sj1*x1548)));
evalcond[2]=((((-1.0)*cj1*py*x1545))+(((-1.0)*cj0*r02*x1544))+((x1549*x1550))+((r02*sj0*x1542))+x1555+(((-1.0)*x1559))+((cj1*px*r01))+(((-1.0)*sj0*x1545*x1550)));
evalcond[3]=(((py*r02*x1552))+(((-1.0)*r02*x1546*x1547))+(((-1.0)*cj1*x1548*x1549))+(((-0.19)*x1549))+(((0.19)*r00*sj0))+(((-1.0)*x1544*x1545))+((r01*x1542))+(((-1.0)*x1560))+((pz*r00*x1546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1561=((139000.0)*cj1);
IkReal x1562=(py*sj0);
IkReal x1563=(cj0*px);
IkReal x1564=((273000.0)*cj3);
IkReal x1565=((139000.0)*sj1);
IkReal x1566=((273000.0)*cj1*sj3);
IkReal x1567=((273000.0)*sj1*sj3);
CheckValue<IkReal> x1568 = IKatan2WithCheck(IkReal(((((-1.0)*pz*sj1*x1564))+(((-1.0)*pz*x1565))+(((51870.0)*sj3))+(((-1.0)*x1562*x1567))+(((-1.0)*x1563*x1567))+(((-1.0)*cj1*x1563*x1564))+(((-1.0)*cj1*x1562*x1564))+((pz*x1566))+(((-1.0)*x1561*x1563))+(((-1.0)*x1561*x1562)))),((26410.0)+(((-1.0)*x1562*x1565))+(((-1.0)*x1563*x1565))+(((51870.0)*cj3))+(((-1.0)*sj1*x1563*x1564))+((pz*x1561))+((pz*x1567))+((x1562*x1566))+((x1563*x1566))+(((-1.0)*sj1*x1562*x1564))+((cj1*pz*x1564))),IKFAST_ATAN2_MAGTHRESH);
if(!x1568.valid){
continue;
}
CheckValue<IkReal> x1569=IKPowWithIntegerCheck(IKsign(((-93850.0)+(((-75894.0)*cj3)))),-1);
if(!x1569.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1568.value)+(((1.5707963267949)*(x1569.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1570=IKcos(j2);
IkReal x1571=IKsin(j2);
IkReal x1572=(px*sj1);
IkReal x1573=((0.273)*cj3);
IkReal x1574=(py*sj1);
IkReal x1575=((1.0)*r00);
IkReal x1576=(cj1*sj0);
IkReal x1577=((1.0)*px);
IkReal x1578=((1.0)*pz);
IkReal x1579=(cj0*r01);
IkReal x1580=(pz*sj1);
IkReal x1581=((0.273)*sj3);
IkReal x1582=(cj0*cj1);
IkReal x1583=((0.139)*x1571);
IkReal x1584=((0.139)*x1570);
IkReal x1585=(x1570*x1581);
IkReal x1586=(x1571*x1573);
IkReal x1587=(x1571*x1581);
IkReal x1588=(x1570*x1573);
IkReal x1589=(x1583+x1586);
IkReal x1590=(x1588+x1587+x1584);
evalcond[0]=((-0.19)+(((-1.0)*x1590))+((sj0*x1574))+(((-1.0)*cj1*x1578))+((cj0*x1572)));
evalcond[1]=((((-1.0)*sj1*x1578))+(((-1.0)*x1585))+(((-1.0)*x1577*x1582))+(((-1.0)*py*x1576))+x1589);
evalcond[2]=((((-1.0)*x1589))+(((-1.0)*cj1*py*x1575))+(((-1.0)*cj0*r02*x1574))+(((-1.0)*sj0*x1575*x1580))+x1585+((r02*sj0*x1572))+((x1579*x1580))+((cj1*px*r01)));
evalcond[3]=((((-1.0)*x1590))+(((-0.19)*x1579))+((py*r02*x1582))+(((-1.0)*x1574*x1575))+(((-1.0)*r02*x1576*x1577))+(((-1.0)*cj1*x1578*x1579))+(((0.19)*r00*sj0))+((r01*x1572))+((pz*r00*x1576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1591=px*px;
IkReal x1592=pz*pz;
IkReal x1593=py*py;
IkReal x1594=(r01*sj0);
IkReal x1595=((2.0)*py);
IkReal x1596=(r00*sj0);
IkReal x1597=((0.19)*cj1);
IkReal x1598=(py*r02);
IkReal x1599=((0.38)*cj1);
IkReal x1600=((1.0)*pz);
IkReal x1601=(cj0*r01);
IkReal x1602=(px*sj0);
IkReal x1603=((0.19)*sj1);
IkReal x1604=(cj0*r00);
IkReal x1605=(cj0*r02);
IkReal x1606=((1.0)*x1592);
IkReal x1607=((0.38)*py*sj1);
IkReal x1608=((1.0)*x1593);
IkReal x1609=((0.38)*px*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x1602))+((cj0*py)));
evalcond[2]=(sj4+x1601+(((-1.0)*x1596)));
evalcond[3]=((((-1.0)*px*r00))+(((-1.0)*r02*x1597))+((x1594*x1603))+(((-1.0)*r02*x1600))+((x1603*x1604))+(((-1.0)*py*r01)));
evalcond[4]=((0.133644)+(((-1.0)*pz*x1599))+(((-1.0)*x1608))+(((-1.0)*x1606))+((cj0*x1609))+((sj0*x1607))+(((-1.0)*x1591)));
evalcond[5]=((((-1.0)*x1594*x1600))+(((-1.0)*x1594*x1597))+(((-1.0)*x1600*x1604))+(((-1.0)*x1597*x1604))+(((-0.412)*cj4))+(((-1.0)*r02*x1603))+((px*x1605))+((sj0*x1598)));
evalcond[6]=((((0.0361)*x1601))+((r02*x1599*x1602))+((x1591*x1601))+((px*x1594*x1595))+((r00*x1607))+(((0.169744)*sj4))+(((-1.0)*x1601*x1608))+(((2.0)*pz*r02*x1602))+((x1591*x1596))+(((-1.0)*r01*x1609))+(((-1.0)*pz*x1595*x1605))+((x1592*x1601))+(((-1.0)*x1596*x1606))+(((-1.0)*x1596*x1608))+(((-1.0)*px*x1595*x1604))+(((-0.0361)*x1596))+((pz*x1599*x1601))+(((-1.0)*pz*x1596*x1599))+(((-1.0)*cj0*x1598*x1599)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1610=((2.42718446601942)*pz);
IkReal x1611=((2.42718446601942)*cj0*px);
IkReal x1612=((2.42718446601942)*py*sj0);
if( IKabs((((sj1*x1610))+((cj1*x1612))+((cj1*x1611)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.461165048543689)+((sj1*x1611))+((sj1*x1612))+(((-1.0)*cj1*x1610)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1610))+((cj1*x1612))+((cj1*x1611))))+IKsqr(((-0.461165048543689)+((sj1*x1611))+((sj1*x1612))+(((-1.0)*cj1*x1610))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1610))+((cj1*x1612))+((cj1*x1611))), ((-0.461165048543689)+((sj1*x1611))+((sj1*x1612))+(((-1.0)*cj1*x1610))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1613=IKcos(j2);
IkReal x1614=IKsin(j2);
IkReal x1615=pz*pz;
IkReal x1616=py*py;
IkReal x1617=px*px;
IkReal x1618=(cj0*sj1);
IkReal x1619=(sj0*sj1);
IkReal x1620=((0.169744)*cj4);
IkReal x1621=((2.0)*pz);
IkReal x1622=(py*r02);
IkReal x1623=(r02*sj1);
IkReal x1624=(r00*sj1);
IkReal x1625=((1.0)*py);
IkReal x1626=(cj0*cj1);
IkReal x1627=(r01*sj1);
IkReal x1628=(px*r02);
IkReal x1629=((1.0)*pz);
IkReal x1630=(pz*r00);
IkReal x1631=(cj1*sj0);
IkReal x1632=(cj1*r02);
IkReal x1633=((0.38)*pz);
IkReal x1634=((0.0361)*r01);
IkReal x1635=((1.0)*r00);
IkReal x1636=((0.38)*cj0);
IkReal x1637=((0.0361)*r00);
IkReal x1638=(cj1*r01);
IkReal x1639=((1.0)*r01);
IkReal x1640=(px*r00);
IkReal x1641=(r00*x1615);
IkReal x1642=((0.412)*x1614);
IkReal x1643=((1.0)*x1616);
IkReal x1644=((2.0)*px*py);
IkReal x1645=(r01*x1617);
IkReal x1646=((1.0)*x1617);
IkReal x1647=((0.412)*x1613);
evalcond[0]=(((r01*x1619))+((r00*x1618))+((cj4*x1614))+(((-1.0)*x1632)));
evalcond[1]=((-0.19)+((py*x1619))+(((-1.0)*x1647))+((px*x1618))+(((-1.0)*cj1*x1629)));
evalcond[2]=((((-1.0)*x1623))+((cj4*x1613))+(((-1.0)*x1626*x1635))+(((-1.0)*x1631*x1639)));
evalcond[3]=((((-1.0)*sj1*x1629))+(((-1.0)*px*x1626))+x1642+(((-1.0)*x1625*x1631)));
evalcond[4]=((((-1.0)*cj1*r00*x1625))+((px*x1638))+(((-1.0)*r00*x1619*x1629))+((pz*r01*x1618))+((x1619*x1628))+((sj4*x1642))+(((-1.0)*x1618*x1622)));
evalcond[5]=(((x1622*x1626))+(((-0.19)*cj0*r01))+((px*x1627))+(((-1.0)*x1628*x1631))+(((-1.0)*x1624*x1625))+(((0.19)*r00*sj0))+((sj4*x1647))+((x1630*x1631))+(((-1.0)*r01*x1626*x1629)));
evalcond[6]=((((-1.0)*x1616*x1619*x1639))+((r01*x1615*x1619))+(((0.38)*x1640))+((r02*x1633))+((cj1*x1621*x1640))+((x1618*x1641))+((x1619*x1645))+(((-2.0)*py*x1619*x1640))+(((-1.0)*r01*x1618*x1644))+((x1615*x1632))+(((0.0361)*x1632))+((x1614*x1620))+(((-1.0)*x1619*x1621*x1622))+((py*x1621*x1638))+(((-1.0)*x1618*x1621*x1628))+((r00*x1616*x1618))+(((-1.0)*x1619*x1634))+(((-1.0)*x1632*x1646))+(((-1.0)*x1632*x1643))+(((-1.0)*x1617*x1618*x1635))+(((-1.0)*x1618*x1637))+(((0.38)*py*r01)));
evalcond[7]=(((py*x1621*x1627))+(((-0.0361)*x1623))+(((-1.0)*x1623*x1643))+(((-1.0)*x1623*x1646))+((r01*x1616*x1631))+(((2.0)*py*x1631*x1640))+((x1628*x1636))+((x1621*x1626*x1628))+((x1615*x1623))+(((-1.0)*x1615*x1626*x1635))+(((0.38)*sj0*x1622))+((r01*x1626*x1644))+((r00*x1617*x1626))+((x1621*x1622*x1631))+(((-1.0)*x1617*x1631*x1639))+(((-1.0)*x1630*x1636))+((px*x1621*x1624))+(((-1.0)*x1616*x1626*x1635))+(((-1.0)*x1615*x1631*x1639))+(((-1.0)*x1626*x1637))+(((-1.0)*x1631*x1634))+((x1613*x1620))+(((-1.0)*r01*sj0*x1633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1648=px*px;
IkReal x1649=pz*pz;
IkReal x1650=py*py;
IkReal x1651=(r01*sj0);
IkReal x1652=((2.0)*py);
IkReal x1653=(r00*sj0);
IkReal x1654=((0.19)*cj1);
IkReal x1655=(py*r02);
IkReal x1656=((0.38)*cj1);
IkReal x1657=((1.0)*pz);
IkReal x1658=(cj0*r01);
IkReal x1659=(px*sj0);
IkReal x1660=((0.19)*sj1);
IkReal x1661=(cj0*r00);
IkReal x1662=(cj0*r02);
IkReal x1663=((1.0)*x1649);
IkReal x1664=((0.38)*py*sj1);
IkReal x1665=((1.0)*x1650);
IkReal x1666=((0.38)*px*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x1659))+((cj0*py)));
evalcond[2]=(sj4+x1658+(((-1.0)*x1653)));
evalcond[3]=(((x1660*x1661))+(((-1.0)*px*r00))+(((-1.0)*r02*x1654))+(((-1.0)*r02*x1657))+(((-1.0)*py*r01))+((x1651*x1660)));
evalcond[4]=((-0.018144)+((sj0*x1664))+(((-1.0)*pz*x1656))+(((-1.0)*x1648))+((cj0*x1666))+(((-1.0)*x1663))+(((-1.0)*x1665)));
evalcond[5]=(((sj0*x1655))+(((-0.134)*cj4))+((px*x1662))+(((-1.0)*x1654*x1661))+(((-1.0)*x1657*x1661))+(((-1.0)*r02*x1660))+(((-1.0)*x1651*x1654))+(((-1.0)*x1651*x1657)));
evalcond[6]=(((r02*x1656*x1659))+(((-1.0)*r01*x1666))+(((-1.0)*cj0*x1655*x1656))+((x1648*x1653))+((x1648*x1658))+(((0.017956)*sj4))+(((0.0361)*x1658))+(((-1.0)*x1653*x1665))+(((-1.0)*x1653*x1663))+((r00*x1664))+(((-1.0)*px*x1652*x1661))+(((-0.0361)*x1653))+(((-1.0)*pz*x1652*x1662))+(((-1.0)*pz*x1653*x1656))+((x1649*x1658))+((px*x1651*x1652))+(((-1.0)*x1658*x1665))+((pz*x1656*x1658))+(((2.0)*pz*r02*x1659)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1667=((7.46268656716418)*cj1);
IkReal x1668=(py*sj0);
IkReal x1669=(cj0*px);
IkReal x1670=((7.46268656716418)*sj1);
if( IKabs(((((-1.0)*x1667*x1669))+(((-1.0)*x1667*x1668))+(((-1.0)*pz*x1670)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.41791044776119)+(((-1.0)*x1668*x1670))+(((-1.0)*x1669*x1670))+((pz*x1667)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1667*x1669))+(((-1.0)*x1667*x1668))+(((-1.0)*pz*x1670))))+IKsqr(((1.41791044776119)+(((-1.0)*x1668*x1670))+(((-1.0)*x1669*x1670))+((pz*x1667))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1667*x1669))+(((-1.0)*x1667*x1668))+(((-1.0)*pz*x1670))), ((1.41791044776119)+(((-1.0)*x1668*x1670))+(((-1.0)*x1669*x1670))+((pz*x1667))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1671=IKsin(j2);
IkReal x1672=IKcos(j2);
IkReal x1673=pz*pz;
IkReal x1674=py*py;
IkReal x1675=px*px;
IkReal x1676=(cj0*sj1);
IkReal x1677=(r01*sj0);
IkReal x1678=((1.0)*cj1);
IkReal x1679=(r02*sj1);
IkReal x1680=(cj1*r02);
IkReal x1681=((1.0)*sj1);
IkReal x1682=(py*sj1);
IkReal x1683=(py*r00);
IkReal x1684=(px*sj1);
IkReal x1685=((2.0)*pz);
IkReal x1686=(px*r02);
IkReal x1687=(r00*sj0);
IkReal x1688=((2.0)*px);
IkReal x1689=((0.38)*r02);
IkReal x1690=(cj0*r00);
IkReal x1691=(py*sj0);
IkReal x1692=(pz*r01);
IkReal x1693=(py*r01);
IkReal x1694=(cj0*px);
IkReal x1695=((0.0361)*cj1);
IkReal x1696=((0.38)*pz);
IkReal x1697=(cj1*px);
IkReal x1698=(r00*x1673);
IkReal x1699=(r00*x1674);
IkReal x1700=((0.134)*x1672);
IkReal x1701=(cj4*x1672);
IkReal x1702=((0.134)*x1671);
IkReal x1703=((1.0)*x1675);
IkReal x1704=(cj4*x1671);
IkReal x1705=(x1685*x1691);
evalcond[0]=(((r00*x1676))+((sj1*x1677))+(((-1.0)*r02*x1678))+(((-1.0)*x1704)));
evalcond[1]=((-0.19)+x1700+((sj0*x1682))+((px*x1676))+(((-1.0)*pz*x1678)));
evalcond[2]=((((-1.0)*x1678*x1691))+(((-1.0)*x1678*x1694))+(((-1.0)*x1702))+(((-1.0)*pz*x1681)));
evalcond[3]=((((-1.0)*x1701))+(((-1.0)*x1678*x1690))+(((-1.0)*x1679))+(((-1.0)*x1677*x1678)));
evalcond[4]=(((r01*x1697))+(((-1.0)*py*r02*x1676))+((px*sj0*x1679))+(((-1.0)*x1678*x1683))+(((-1.0)*sj4*x1702))+((x1676*x1692))+(((-1.0)*pz*x1681*x1687)));
evalcond[5]=((((-1.0)*x1681*x1683))+((r01*x1684))+((cj1*pz*x1687))+((cj0*py*x1680))+(((-1.0)*sj4*x1700))+(((-1.0)*cj0*x1678*x1692))+(((-0.19)*cj0*r01))+(((0.19)*x1687))+(((-1.0)*sj0*x1678*x1686)));
evalcond[6]=((((0.0361)*x1680))+(((-1.0)*r02*x1675*x1678))+((x1673*x1680))+(((-1.0)*x1676*x1688*x1693))+(((-0.017956)*x1704))+(((-1.0)*x1676*x1685*x1686))+(((-1.0)*x1679*x1705))+((sj1*x1675*x1677))+(((-1.0)*x1674*x1677*x1681))+(((-1.0)*r02*x1674*x1678))+((x1676*x1698))+((x1676*x1699))+(((0.38)*px*r00))+(((-1.0)*x1682*x1687*x1688))+((pz*x1689))+((sj1*x1673*x1677))+(((-0.0361)*sj1*x1677))+(((-0.0361)*r00*x1676))+(((-1.0)*r00*x1676*x1703))+((r00*x1685*x1697))+(((0.38)*x1693))+((cj1*x1685*x1693)));
evalcond[7]=(((r00*x1684*x1685))+((cj0*cj1*x1688*x1693))+(((0.38)*cj0*x1686))+(((-1.0)*x1674*x1679))+(((-0.017956)*x1701))+(((-1.0)*x1675*x1677*x1678))+((x1673*x1679))+(((-1.0)*x1679*x1703))+(((-1.0)*x1690*x1696))+(((-1.0)*x1690*x1695))+((cj1*x1674*x1677))+((x1680*x1705))+((x1689*x1691))+(((-1.0)*x1673*x1677*x1678))+(((-1.0)*x1673*x1678*x1690))+((cj1*sj0*x1683*x1688))+(((-0.0361)*x1679))+((x1680*x1685*x1694))+((cj1*x1675*x1690))+((r01*x1682*x1685))+(((-1.0)*x1674*x1678*x1690))+(((-1.0)*x1677*x1695))+(((-1.0)*x1677*x1696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1717=IKPowWithIntegerCheck(cj4,-1);
if(!x1717.valid){
continue;
}
IkReal x1706=x1717.value;
IkReal x1707=((1000.0)*cj4);
IkReal x1708=(pz*sj1);
IkReal x1709=(cj1*r02);
IkReal x1710=(cj1*cj3);
IkReal x1711=(cj0*px);
IkReal x1712=((273.0)*cj3);
IkReal x1713=(py*sj0);
IkReal x1714=(cj0*r00*sj1);
IkReal x1715=((-0.00719424460431655)*x1706);
IkReal x1716=(r01*sj0*sj1);
CheckValue<IkReal> x1718=IKPowWithIntegerCheck(sj3,-1);
if(!x1718.valid){
continue;
}
if( IKabs((x1715*(((((273.0)*x1709))+(((-1.0)*x1707*x1708))+(((-1.0)*cj1*x1707*x1711))+(((-1.0)*cj1*x1707*x1713))+(((-273.0)*x1714))+(((-273.0)*x1716)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1715*(x1718.value)*(((((-139.0)*x1714))+(((-139.0)*x1716))+(((139.0)*x1709))+(((-1.0)*x1712*x1716))+(((-1.0)*x1712*x1714))+((x1709*x1712))+(((-1.0)*cj3*x1707*x1708))+(((-1.0)*x1707*x1710*x1713))+(((-1.0)*x1707*x1710*x1711)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1715*(((((273.0)*x1709))+(((-1.0)*x1707*x1708))+(((-1.0)*cj1*x1707*x1711))+(((-1.0)*cj1*x1707*x1713))+(((-273.0)*x1714))+(((-273.0)*x1716))))))+IKsqr((x1715*(x1718.value)*(((((-139.0)*x1714))+(((-139.0)*x1716))+(((139.0)*x1709))+(((-1.0)*x1712*x1716))+(((-1.0)*x1712*x1714))+((x1709*x1712))+(((-1.0)*cj3*x1707*x1708))+(((-1.0)*x1707*x1710*x1713))+(((-1.0)*x1707*x1710*x1711))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x1715*(((((273.0)*x1709))+(((-1.0)*x1707*x1708))+(((-1.0)*cj1*x1707*x1711))+(((-1.0)*cj1*x1707*x1713))+(((-273.0)*x1714))+(((-273.0)*x1716))))), (x1715*(x1718.value)*(((((-139.0)*x1714))+(((-139.0)*x1716))+(((139.0)*x1709))+(((-1.0)*x1712*x1716))+(((-1.0)*x1712*x1714))+((x1709*x1712))+(((-1.0)*cj3*x1707*x1708))+(((-1.0)*x1707*x1710*x1713))+(((-1.0)*x1707*x1710*x1711))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1719=IKcos(j2);
IkReal x1720=IKsin(j2);
IkReal x1721=pz*pz;
IkReal x1722=py*py;
IkReal x1723=px*px;
IkReal x1724=((0.055208)*cj4);
IkReal x1725=(r01*sj0);
IkReal x1726=((1.0)*cj1);
IkReal x1727=((1.0)*sj1);
IkReal x1728=(py*sj1);
IkReal x1729=(cj0*r00);
IkReal x1730=((2.0)*pz);
IkReal x1731=(cj0*sj1);
IkReal x1732=(px*r02);
IkReal x1733=((0.273)*cj3);
IkReal x1734=(cj1*r02);
IkReal x1735=(pz*r01);
IkReal x1736=(py*sj0);
IkReal x1737=(px*r00);
IkReal x1738=((2.0)*cj1);
IkReal x1739=(cj0*py);
IkReal x1740=((0.075894)*cj4);
IkReal x1741=((0.0361)*cj1);
IkReal x1742=((0.38)*r02);
IkReal x1743=((0.0361)*sj1);
IkReal x1744=((0.38)*pz);
IkReal x1745=(cj0*r01);
IkReal x1746=(px*r01);
IkReal x1747=(py*r00);
IkReal x1748=(py*r01);
IkReal x1749=(sj3*x1719);
IkReal x1750=((0.139)*x1720);
IkReal x1751=(sj4*x1720);
IkReal x1752=(sj1*x1721);
IkReal x1753=(pz*r00*sj0);
IkReal x1754=(sj3*x1720);
IkReal x1755=(r02*x1723);
IkReal x1756=((0.139)*x1719);
IkReal x1757=(r02*x1722);
IkReal x1758=(cj3*cj4*x1719);
IkReal x1759=(cj3*cj4*x1720);
evalcond[0]=(x1759+(((-1.0)*cj4*x1749))+((sj1*x1725))+((sj1*x1729))+(((-1.0)*r02*x1726)));
evalcond[1]=(x1758+(((-1.0)*x1726*x1729))+(((-1.0)*x1725*x1726))+(((-1.0)*r02*x1727))+((cj4*x1754)));
evalcond[2]=((-0.19)+((px*x1731))+(((-1.0)*pz*x1726))+((sj0*x1728))+(((-0.273)*x1754))+(((-1.0)*x1756))+(((-1.0)*x1719*x1733)));
evalcond[3]=(x1750+(((-1.0)*x1726*x1736))+(((-1.0)*pz*x1727))+(((-0.273)*x1749))+((x1720*x1733))+(((-1.0)*cj0*px*x1726)));
evalcond[4]=(((x1731*x1735))+(((-1.0)*x1726*x1747))+((sj4*x1750))+((cj1*x1746))+((sj0*sj1*x1732))+(((-1.0)*x1727*x1753))+(((-1.0)*r02*x1727*x1739))+(((-0.273)*sj4*x1749))+((x1733*x1751)));
evalcond[5]=((((-1.0)*cj0*x1726*x1735))+(((-1.0)*sj0*x1726*x1732))+((sj4*x1756))+(((0.273)*sj3*x1751))+((x1734*x1739))+((cj1*x1753))+(((-0.19)*x1745))+((sj1*x1746))+(((-1.0)*x1727*x1747))+((sj4*x1719*x1733))+(((0.19)*r00*sj0)));
evalcond[6]=(((pz*x1742))+(((-1.0)*r02*sj0*x1728*x1730))+(((-1.0)*x1723*x1727*x1729))+(((-1.0)*x1726*x1757))+(((-1.0)*x1726*x1755))+(((-1.0)*x1729*x1743))+((sj1*x1723*x1725))+(((-1.0)*x1722*x1725*x1727))+(((-2.0)*sj0*x1728*x1737))+(((-1.0)*x1730*x1731*x1732))+(((0.38)*x1737))+((x1721*x1734))+((cj1*x1730*x1748))+(((0.0361)*x1734))+((sj1*x1722*x1729))+(((0.38)*x1748))+(((-1.0)*x1724*x1749))+(((-1.0)*x1725*x1743))+((x1729*x1752))+(((-2.0)*px*x1728*x1745))+((x1720*x1740))+((cj1*x1730*x1737))+((x1725*x1752))+(((0.09385)*x1759)));
evalcond[7]=(((x1736*x1742))+((x1738*x1739*x1746))+((cj1*x1722*x1725))+((x1719*x1740))+(((-1.0)*x1729*x1744))+(((-1.0)*x1729*x1741))+((x1736*x1737*x1738))+((sj1*x1730*x1737))+(((-1.0)*x1722*x1726*x1729))+((r02*x1752))+((r01*x1728*x1730))+(((-1.0)*x1721*x1725*x1726))+(((-1.0)*x1725*x1744))+(((-1.0)*x1725*x1741))+(((-1.0)*x1721*x1726*x1729))+((x1730*x1734*x1736))+(((-1.0)*x1727*x1757))+(((-1.0)*x1727*x1755))+(((-1.0)*x1723*x1725*x1726))+((cj1*x1723*x1729))+(((0.38)*cj0*x1732))+((cj0*cj1*x1730*x1732))+((x1724*x1754))+(((-1.0)*r02*x1743))+(((0.09385)*x1758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1760=((139.0)*sj1);
IkReal x1761=(cj0*r00);
IkReal x1762=(cj1*sj3);
IkReal x1763=(cj3*cj4);
IkReal x1764=((273.0)*r02);
IkReal x1765=(cj1*cj3);
IkReal x1766=(cj4*sj3);
IkReal x1767=(r01*sj0);
IkReal x1768=((273.0)*sj1);
IkReal x1769=((1000.0)*cj4*pz);
IkReal x1770=((1000.0)*py*sj0*sj1);
IkReal x1771=((1000.0)*cj0*px*sj1);
CheckValue<IkReal> x1772 = IKatan2WithCheck(IkReal(((((190.0)*x1766))+((cj3*x1767*x1768))+((cj3*x1761*x1768))+((x1762*x1769))+(((-1.0)*x1764*x1765))+(((-1.0)*x1766*x1771))+(((-1.0)*x1766*x1770))+(((-139.0)*cj1*r02))+((x1760*x1761))+((x1760*x1767)))),((((190.0)*x1763))+(((-1.0)*sj3*x1761*x1768))+(((-1.0)*x1763*x1771))+(((-1.0)*x1763*x1770))+(((1000.0)*cj1*pz*x1763))+((x1762*x1764))+(((-1.0)*sj3*x1767*x1768))),IKFAST_ATAN2_MAGTHRESH);
if(!x1772.valid){
continue;
}
CheckValue<IkReal> x1773=IKPowWithIntegerCheck(IKsign(((((-139.0)*x1763))+(((-273.0)*cj4)))),-1);
if(!x1773.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1772.value)+(((1.5707963267949)*(x1773.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1774=IKcos(j2);
IkReal x1775=IKsin(j2);
IkReal x1776=pz*pz;
IkReal x1777=py*py;
IkReal x1778=px*px;
IkReal x1779=((0.055208)*cj4);
IkReal x1780=(r01*sj0);
IkReal x1781=((1.0)*cj1);
IkReal x1782=((1.0)*sj1);
IkReal x1783=(py*sj1);
IkReal x1784=(cj0*r00);
IkReal x1785=((2.0)*pz);
IkReal x1786=(cj0*sj1);
IkReal x1787=(px*r02);
IkReal x1788=((0.273)*cj3);
IkReal x1789=(cj1*r02);
IkReal x1790=(pz*r01);
IkReal x1791=(py*sj0);
IkReal x1792=(px*r00);
IkReal x1793=((2.0)*cj1);
IkReal x1794=(cj0*py);
IkReal x1795=((0.075894)*cj4);
IkReal x1796=((0.0361)*cj1);
IkReal x1797=((0.38)*r02);
IkReal x1798=((0.0361)*sj1);
IkReal x1799=((0.38)*pz);
IkReal x1800=(cj0*r01);
IkReal x1801=(px*r01);
IkReal x1802=(py*r00);
IkReal x1803=(py*r01);
IkReal x1804=(sj3*x1774);
IkReal x1805=((0.139)*x1775);
IkReal x1806=(sj4*x1775);
IkReal x1807=(sj1*x1776);
IkReal x1808=(pz*r00*sj0);
IkReal x1809=(sj3*x1775);
IkReal x1810=(r02*x1778);
IkReal x1811=((0.139)*x1774);
IkReal x1812=(r02*x1777);
IkReal x1813=(cj3*cj4*x1774);
IkReal x1814=(cj3*cj4*x1775);
evalcond[0]=(((sj1*x1784))+((sj1*x1780))+(((-1.0)*cj4*x1804))+x1814+(((-1.0)*r02*x1781)));
evalcond[1]=(x1813+((cj4*x1809))+(((-1.0)*x1780*x1781))+(((-1.0)*x1781*x1784))+(((-1.0)*r02*x1782)));
evalcond[2]=((-0.19)+(((-1.0)*x1811))+(((-1.0)*x1774*x1788))+((sj0*x1783))+(((-1.0)*pz*x1781))+(((-0.273)*x1809))+((px*x1786)));
evalcond[3]=(((x1775*x1788))+(((-1.0)*pz*x1782))+x1805+(((-1.0)*cj0*px*x1781))+(((-0.273)*x1804))+(((-1.0)*x1781*x1791)));
evalcond[4]=(((sj4*x1805))+(((-1.0)*x1781*x1802))+(((-1.0)*x1782*x1808))+((x1788*x1806))+(((-0.273)*sj4*x1804))+((x1786*x1790))+((sj0*sj1*x1787))+((cj1*x1801))+(((-1.0)*r02*x1782*x1794)));
evalcond[5]=((((0.273)*sj3*x1806))+(((-0.19)*x1800))+((sj1*x1801))+(((-1.0)*x1782*x1802))+((sj4*x1774*x1788))+((x1789*x1794))+(((-1.0)*sj0*x1781*x1787))+(((-1.0)*cj0*x1781*x1790))+(((0.19)*r00*sj0))+((sj4*x1811))+((cj1*x1808)));
evalcond[6]=(((x1784*x1807))+((x1775*x1795))+(((-2.0)*sj0*x1783*x1792))+((sj1*x1777*x1784))+(((0.0361)*x1789))+(((0.38)*x1803))+((sj1*x1778*x1780))+(((-1.0)*x1779*x1804))+(((-1.0)*x1785*x1786*x1787))+(((-1.0)*x1777*x1780*x1782))+(((0.38)*x1792))+((pz*x1797))+(((-1.0)*r02*sj0*x1783*x1785))+((cj1*x1785*x1803))+(((0.09385)*x1814))+(((-1.0)*x1784*x1798))+(((-1.0)*x1781*x1810))+(((-1.0)*x1781*x1812))+((cj1*x1785*x1792))+((x1776*x1789))+((x1780*x1807))+(((-2.0)*px*x1783*x1800))+(((-1.0)*x1780*x1798))+(((-1.0)*x1778*x1782*x1784)));
evalcond[7]=((((-1.0)*x1778*x1780*x1781))+((x1791*x1792*x1793))+(((-1.0)*x1776*x1780*x1781))+(((-1.0)*x1776*x1781*x1784))+((x1779*x1809))+(((-1.0)*x1777*x1781*x1784))+((x1774*x1795))+((x1785*x1789*x1791))+((r02*x1807))+(((0.09385)*x1813))+((cj1*x1778*x1784))+(((-1.0)*x1784*x1796))+(((-1.0)*x1784*x1799))+(((-1.0)*x1782*x1812))+(((-1.0)*x1782*x1810))+((cj0*cj1*x1785*x1787))+((x1793*x1794*x1801))+((cj1*x1777*x1780))+(((-1.0)*r02*x1798))+(((0.38)*cj0*x1787))+((r01*x1783*x1785))+((x1791*x1797))+(((-1.0)*x1780*x1796))+(((-1.0)*x1780*x1799))+((sj1*x1785*x1792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1815=((1.0)*sj1);
IkReal x1816=(cj1*sj3);
IkReal x1817=(cj0*r00);
IkReal x1818=(cj3*r02);
IkReal x1819=(r01*sj0);
IkReal x1820=(sj1*sj3);
IkReal x1821=(cj3*x1819);
CheckValue<IkReal> x1822=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1822.valid){
continue;
}
CheckValue<IkReal> x1823 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x1815*x1817))+((x1816*x1819))+((x1816*x1817))+((r02*x1820))+((cj1*x1818))+(((-1.0)*x1815*x1821)))),(((cj1*cj3*x1817))+((x1819*x1820))+((cj1*x1821))+(((-1.0)*r02*x1816))+((sj1*x1818))+((x1817*x1820))),IKFAST_ATAN2_MAGTHRESH);
if(!x1823.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1822.value)))+(x1823.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1824=IKcos(j2);
IkReal x1825=IKsin(j2);
IkReal x1826=pz*pz;
IkReal x1827=py*py;
IkReal x1828=px*px;
IkReal x1829=((0.055208)*cj4);
IkReal x1830=(r01*sj0);
IkReal x1831=((1.0)*cj1);
IkReal x1832=((1.0)*sj1);
IkReal x1833=(py*sj1);
IkReal x1834=(cj0*r00);
IkReal x1835=((2.0)*pz);
IkReal x1836=(cj0*sj1);
IkReal x1837=(px*r02);
IkReal x1838=((0.273)*cj3);
IkReal x1839=(cj1*r02);
IkReal x1840=(pz*r01);
IkReal x1841=(py*sj0);
IkReal x1842=(px*r00);
IkReal x1843=((2.0)*cj1);
IkReal x1844=(cj0*py);
IkReal x1845=((0.075894)*cj4);
IkReal x1846=((0.0361)*cj1);
IkReal x1847=((0.38)*r02);
IkReal x1848=((0.0361)*sj1);
IkReal x1849=((0.38)*pz);
IkReal x1850=(cj0*r01);
IkReal x1851=(px*r01);
IkReal x1852=(py*r00);
IkReal x1853=(py*r01);
IkReal x1854=(sj3*x1824);
IkReal x1855=((0.139)*x1825);
IkReal x1856=(sj4*x1825);
IkReal x1857=(sj1*x1826);
IkReal x1858=(pz*r00*sj0);
IkReal x1859=(sj3*x1825);
IkReal x1860=(r02*x1828);
IkReal x1861=((0.139)*x1824);
IkReal x1862=(r02*x1827);
IkReal x1863=(cj3*cj4*x1824);
IkReal x1864=(cj3*cj4*x1825);
evalcond[0]=(((sj1*x1834))+((sj1*x1830))+(((-1.0)*cj4*x1854))+x1864+(((-1.0)*r02*x1831)));
evalcond[1]=(x1863+(((-1.0)*r02*x1832))+(((-1.0)*x1831*x1834))+((cj4*x1859))+(((-1.0)*x1830*x1831)));
evalcond[2]=((-0.19)+((px*x1836))+(((-1.0)*pz*x1831))+((sj0*x1833))+(((-0.273)*x1859))+(((-1.0)*x1861))+(((-1.0)*x1824*x1838)));
evalcond[3]=((((-1.0)*cj0*px*x1831))+(((-1.0)*pz*x1832))+(((-1.0)*x1831*x1841))+(((-0.273)*x1854))+x1855+((x1825*x1838)));
evalcond[4]=((((-0.273)*sj4*x1854))+((x1836*x1840))+(((-1.0)*r02*x1832*x1844))+(((-1.0)*x1832*x1858))+((sj4*x1855))+((sj0*sj1*x1837))+((x1838*x1856))+((cj1*x1851))+(((-1.0)*x1831*x1852)));
evalcond[5]=(((sj4*x1861))+(((-1.0)*cj0*x1831*x1840))+(((-1.0)*x1832*x1852))+(((-0.19)*x1850))+((cj1*x1858))+((x1839*x1844))+(((-1.0)*sj0*x1831*x1837))+((sj1*x1851))+(((0.19)*r00*sj0))+(((0.273)*sj3*x1856))+((sj4*x1824*x1838)));
evalcond[6]=((((-2.0)*px*x1833*x1850))+((x1825*x1845))+((x1834*x1857))+(((-1.0)*x1830*x1848))+((x1826*x1839))+(((0.0361)*x1839))+((sj1*x1827*x1834))+((sj1*x1828*x1830))+(((-1.0)*x1827*x1830*x1832))+(((-1.0)*x1835*x1836*x1837))+(((-1.0)*x1831*x1860))+(((-1.0)*x1831*x1862))+(((0.09385)*x1864))+(((0.38)*x1842))+((cj1*x1835*x1853))+((pz*x1847))+(((-2.0)*sj0*x1833*x1842))+(((0.38)*x1853))+(((-1.0)*x1828*x1832*x1834))+((cj1*x1835*x1842))+(((-1.0)*x1834*x1848))+(((-1.0)*r02*sj0*x1833*x1835))+((x1830*x1857))+(((-1.0)*x1829*x1854)));
evalcond[7]=(((cj0*cj1*x1835*x1837))+(((-1.0)*x1832*x1860))+(((-1.0)*x1832*x1862))+((x1829*x1859))+(((-1.0)*x1826*x1831*x1834))+((x1841*x1842*x1843))+((x1824*x1845))+(((-1.0)*x1830*x1849))+(((-1.0)*x1830*x1846))+((sj1*x1835*x1842))+(((-1.0)*x1827*x1831*x1834))+(((-1.0)*r02*x1848))+(((-1.0)*x1826*x1830*x1831))+(((0.38)*cj0*x1837))+(((0.09385)*x1863))+((x1835*x1839*x1841))+((r02*x1857))+((cj1*x1827*x1830))+((cj1*x1828*x1834))+((r01*x1833*x1835))+((x1841*x1847))+((x1843*x1844*x1851))+(((-1.0)*x1834*x1846))+(((-1.0)*x1834*x1849))+(((-1.0)*x1828*x1830*x1831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "ab9d03903279e44bc692e896791bcd05"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
